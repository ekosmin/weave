<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
Editor for custom layers using GridLinePlotters
@author kmanohar
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 implements="weave.api.ui.ILinkableObjectEditor"
		 xmlns="weave.editors.*"
		 label="{lang('Grid Line Settings')}" xmlns:ui="weave.ui.*">
	
	<mx:HBox width="100%">
		<mx:VBox width="100%">
			<ui:IndentTextInput group="{this}" label="{lang('X interval')}" creationComplete="linkBindableProperty(_plotter.xInterval, event.target, 'text');"/>
			<ui:IndentTextInput group="{this}" label="{lang('Y interval')}" creationComplete="linkBindableProperty(_plotter.yInterval, event.target, 'text');"/>
		</mx:VBox>
		<mx:VBox width="100%">
			<ui:IndentTextInput label="{lang('X offset')}" creationComplete="linkBindableProperty(_plotter.xOffset, event.target, 'text');"/>
			<ui:IndentTextInput label="{lang('Y offset')}" creationComplete="linkBindableProperty(_plotter.yOffset, event.target, 'text');"/>
		</mx:VBox>
	</mx:HBox>
	
	<ui:Indent label="{lang('Grid bounds')}">
		<ui:TextInputWithPrompt id="xMinInput" prompt="{lang('xMin')}" width="{boundsInputWidth}"/>
		<mx:VBox>
			<ui:TextInputWithPrompt id="yMaxInput" prompt="{lang('yMax')}" width="{boundsInputWidth}"/>
			<ui:TextInputWithPrompt id="yMinInput" prompt="{lang('yMin')}" width="{boundsInputWidth}"/>
		</mx:VBox>
		<ui:TextInputWithPrompt id="xMaxInput" prompt="{lang('xMax')}" width="{boundsInputWidth}"/>
	</ui:Indent>
	
	<ui:Indent label="{lang('Thickness')}">
		<mx:NumericStepper id="gridLineThicknessStepper" minimum="1" maximum="10"
						   creationComplete="linkBindableProperty(_plotter.lineStyle.weight.defaultValue, event.target, 'value')"/>
	</ui:Indent>
	<ui:Indent label="{lang('Color')}">
		<ui:CustomColorPicker toolTip="{lang('Select a color for the grid lines of this visualization')}" id="gridColorPicker" 
						creationComplete="linkBindableProperty(_plotter.lineStyle.color.defaultValue, event.target, 'selectedColor')"/>
	</ui:Indent>
	<ui:Indent label="{lang('Opacity')}">
		<mx:HSlider id="gridLineAlphaSlider" 
					snapInterval="0.05"
					tickInterval="0.5" labels="{['0%','50%','100%']}" 
					dataTipFormatFunction="{(function():Function{return PlotterUtils.alphaSliderFormatFunction;}())}"
					minimum="0.0" maximum="1.0" 
					liveDragging="true"
					creationComplete="linkBindableProperty(_plotter.lineStyle.alpha.defaultValue, event.target, 'value')"/>
	</ui:Indent>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newDisposableChild;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.compiler.StandardLib;
			import weave.core.LinkableNumber;
			import weave.primitives.Bounds2D;
			import weave.utils.EventUtils;
			import weave.utils.PlotterUtils;
			import weave.visualization.plotters.GridLinePlotter;
			
			private static const boundsInputWidth:int = 84;
			[Bindable] private var inputWidth:int = 128;
			private var _plotter:GridLinePlotter = null;
			private const xMin:LinkableNumber = newDisposableChild(this, LinkableNumber);
			private const yMin:LinkableNumber = newDisposableChild(this, LinkableNumber);
			private const xMax:LinkableNumber = newDisposableChild(this, LinkableNumber);
			private const yMax:LinkableNumber = newDisposableChild(this, LinkableNumber);
			private const tempBounds:Bounds2D = new Bounds2D();
			private var _copyingLinkableBounds:Boolean = false;
			
			public function setTarget(object:ILinkableObject):void
			{
				_plotter = object as GridLinePlotter;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(xMin, xMinInput, 'text');
				linkBindableProperty(yMin, yMinInput, 'text');
				linkBindableProperty(xMax, xMaxInput, 'text');
				linkBindableProperty(yMax, yMaxInput, 'text');
				xMin.addImmediateCallback(this, handleBoundsInput);
				yMin.addImmediateCallback(this, handleBoundsInput);
				xMax.addImmediateCallback(this, handleBoundsInput);
				yMax.addImmediateCallback(this, handleBoundsInput);
				
				getCallbackCollection(_plotter.bounds).addGroupedCallback(this, handleLinkableBounds);
				handleLinkableBounds();
			}
			
			private function handleBoundsInput():void
			{
				if (!_copyingLinkableBounds)
					_plotter.bounds.setBounds(xMin.value, yMin.value, xMax.value, yMax.value);
			}
			private function handleLinkableBounds():void
			{
				_copyingLinkableBounds = true;
				_plotter.bounds.copyTo(tempBounds);
				xMin.value = tempBounds.xMin;
				yMin.value = tempBounds.yMin;
				xMax.value = tempBounds.xMax;
				yMax.value = tempBounds.yMax;
				_copyingLinkableBounds = false;
			}
		]]>
	</mx:Script>
</mx:VBox>