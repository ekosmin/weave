<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	implements="weave.api.ui.IDataSourceEditor"
	creationPolicy="all" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('DBF URL')}">
		<ui:TextInputWithPrompt id="dbfURL" width="100%" prompt="http://www.example.com/example.dbf"/>
		<mx:Button label="{lang('Open file')}" click="openFile(dbfURL, new FileFilter('DBF', '*.dbf'));"/>
	</ui:Indent>
	<ui:Indent label="{lang('SHP URL')}">
		<ui:TextInputWithPrompt id="shpURL" width="100%"  prompt="http://www.example.com/example.shp"/>
		<mx:Button label="{lang('Open file')}" click="openFile(shpURL, new FileFilter('SHP', '*.shp'));"/>
	</ui:Indent>
	<ui:Indent label="{lang('Projection')}">
		<ui:TextInputWithPrompt id="projection" width="100%" prompt="Example: EPSG:4326"/>
	</ui:Indent>
	<ui:Indent label="{lang('Key Column')}">
		<ui:CustomComboBox id="keyColumnCombo" editable="true" width="100%">
			<ui:creationComplete>
				<![CDATA[
					keyColumnCombo.addEventListener(DropdownEvent.CLOSE, function(event:DropdownEvent):void {
						keyColumnCombo.text = keyColumnCombo.selectedItem as String;
					});
				]]>
			</ui:creationComplete>
		</ui:CustomComboBox>
	</ui:Indent>
	<ui:Indent label="{lang('Key Type')}">
		<ui:KeyTypesMenu id="keyTypeSelector"
						 minWidth="200"
						 text="{sourceName.text}"
						 creationComplete="{if (target)
						 {
						 	(event.target as KeyTypesMenu).addKeyTypeToMenu(target.getKeyType());
						 	(event.target as KeyTypesMenu).selectedItem = target.getKeyType();
						 }}"/>
	</ui:Indent>
	<mx:Spacer height="20"/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.events.DropdownEvent;
			import mx.controls.Alert;
			import mx.events.DropdownEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.data.DataSources.DBFDataSource;
			import weave.ui.BusyIndicator;
			
			private var busyIndicator:BusyIndicator = new BusyIndicator();

			override protected function createChildren():void
			{
				super.createChildren();
				addChild(busyIndicator);
				busyIndicator.visible = false;
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(DBFDataSource));
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
			}
			
			[Bindable] private var target:DBFDataSource = null;
			public function setTarget(object:ILinkableObject):void
			{
				target = object as DBFDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					dbfURL.text = target.dbfUrl.value;
					shpURL.text = target.shpUrl.value;
					projection.text = target.projection.value;
					keyColumnCombo.dataProvider = target.getColumnNames();
					keyColumnCombo.validateNow();
					keyColumnCombo.text = target.keyColName.value;
					keyTypeSelector.addKeyTypeToMenu(target.getKeyType());
					keyTypeSelector.selectedKeyType = target.getKeyType();
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
				}
			}
			
			public function hasPendingChanges():Boolean
			{
				return StandardLib.asString(target.dbfUrl.value) != StandardLib.asString(dbfURL.text)
					|| StandardLib.asString(target.shpUrl.value) != StandardLib.asString(shpURL.text)
					|| StandardLib.asString(target.projection.value) != StandardLib.asString(projection.text)
					|| StandardLib.asString(target.keyColName.value) != StandardLib.asString(keyColumnCombo.text)
					|| StandardLib.asString(target.getKeyType()) != StandardLib.asString(keyTypeSelector.selectedKeyType);
			}

			public function applyChanges():void
			{
				target.dbfUrl.value = null; // temporary solution, fixes bug where local file update won't be detected
				target.shpUrl.value = null; // temporary solution, fixes bug where local file update won't be detected
				target.dbfUrl.value = dbfURL.text;
				target.shpUrl.value = shpURL.text;
				target.projection.value = projection.text;
				target.keyColName.value = keyColumnCombo.text;
				target.keyType.value = keyTypeSelector.selectedKeyType;
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text)
				{
					Alert.show(lang("Please enter a name for this data source."), lang("Error"));
					return null;
				}
				if (!dbfURL.text && !shpURL.text)
				{
					Alert.show(lang("Please specify URL(s) for SHP and/or DBF."), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name."), lang("Error"));
					return null;
				}
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, DBFDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
			
			private function openFile(target:TextInputWithPrompt, fileFilter:FileFilter):void
			{
				try
				{
					var _fileLoader:FileReference = new FileReference();
					_fileLoader.addEventListener(Event.SELECT, function(event:Event):void{
						busyIndicator.visible = true;
						_fileLoader.load();
						WeaveAPI.ProgressIndicator.addTask(_fileLoader);
					});
					_fileLoader.addEventListener(ProgressEvent.PROGRESS, function(event:ProgressEvent):void{
						WeaveAPI.ProgressIndicator.updateTask(_fileLoader, event.bytesLoaded / event.bytesTotal);
					});
					_fileLoader.addEventListener(Event.COMPLETE, function(event:Event):void{
						target.text = WeaveAPI.URLRequestUtils.saveLocalFile(_fileLoader.name, _fileLoader.data);
						busyIndicator.visible = false;
						WeaveAPI.ProgressIndicator.removeTask(_fileLoader);
					});
					_fileLoader.addEventListener(IOErrorEvent.IO_ERROR, function(event:IOErrorEvent):void{
						busyIndicator.visible = false;
						reportError(event);
					});
					
					_fileLoader.browse([fileFilter]);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
		]]>
	</mx:Script>
</mx:VBox>