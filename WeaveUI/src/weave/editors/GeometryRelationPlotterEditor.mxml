<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" label="{lang('Geometry relations')}" 
		 implements="weave.api.ui.ILinkableObjectEditor" xmlns:ui="weave.ui.*" xmlns="weave.editors.*">
	<ui:DynamicColumnComponent id="geometrySelector" label="{lang('Geometry')}" errorStringFunction="{getGeometryError}"/>
	<ui:DynamicColumnComponent id="sourceKeySelector" label="{lang('Source key')}"/>
	<ui:DynamicColumnComponent id="destinationKeySelector" label="{lang('Destination key')}"/>
	<ui:DynamicColumnComponent id="valueSelector" label="{lang('Value')}"/>
	<ui:Indent label="{lang('Line thickness')}">
		<mx:HSlider id="lineWidthSlider"
					width="100%"
					alpha="1.0"
					snapInterval="1"
					tickValues="{[5,10,15,20,25,30]}"
					minimum="1" maximum="30"
					liveDragging="true" mouseDown="event.stopPropagation()"
					creationComplete="linkBindableProperty(_plotter.lineWidth, event.target, 'value')"/>
	</ui:Indent>
	<ui:Indent label="{lang('Positive value color')}">
		<ui:CustomColorPicker id="pos_ColorPicker"
						creationComplete="linkBindableProperty(_plotter.posLineColor, event.target, 'selectedColor')"/>
	</ui:Indent>
	<ui:Indent label="{lang('Negative value color')}">
		<ui:CustomColorPicker id="neg_ColorPicker"
						creationComplete="linkBindableProperty(_plotter.negLineColor, event.target, 'selectedColor')"/>
	</ui:Indent>
	<ui:CheckBoxWithNestedOptions id="showValueCheckBox"
								  label="{lang('Display value in the middle of the line')}"
								  creationComplete="linkBindableProperty(_plotter.showValue, event.target, 'selected')">
		<ui:Indent label="{lang('Label size')}">
			<mx:HSlider id="labelSizeSlider"
						width="100%"
						alpha="1.0"
						snapInterval="1"
						tickInterval="2" labels="{['6','8','10','12','14','16','18','20']}"
						minimum="6" maximum="20"
						liveDragging="true" mouseDown="event.stopPropagation()"
						creationComplete="linkBindableProperty(_plotter.fontSize,event.target,'value')"/>
		</ui:Indent>
		<ui:Indent label="{lang('Label color')}">
			<ui:CustomColorPicker id="colorPicker"
							creationComplete="linkBindableProperty(_plotter.fontColor, event.target, 'selectedColor')"/>
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>
		
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.DataType;
			import weave.api.linkBindableProperty;
			import weave.visualization.plotters.GeometryRelationPlotter;
			
			private var _plotter:GeometryRelationPlotter = null;
			
			public function setTarget(object:ILinkableObject):void
			{
				_plotter = object as GeometryRelationPlotter;
			}
			
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkGeometryProperties();
			}
			
			private function getGeometryError():String
			{
				if (_plotter.geometryColumn.getMetadata(ColumnMetadata.DATA_TYPE) != DataType.GEOMETRY)
					return lang('Please select a geometry column.');
				return '';
			}
			
			private function getSourceKeyError():String
			{
				if (_plotter.sourceKeyColumn.getMetadata(ColumnMetadata.DATA_TYPE) !=
					_plotter.geometryColumn.getMetadata(ColumnMetadata.KEY_TYPE))
					return lang("The dataType of this column must equal the keyType of the geometry column.");
				return '';
			}
			
			private function getDestinationKeyError():String
			{
				if (_plotter.destinationKeyColumn.getMetadata(ColumnMetadata.DATA_TYPE) !=
					_plotter.geometryColumn.getMetadata(ColumnMetadata.KEY_TYPE))
					return lang("The dataType of this column must equal the keyType of the geometry column.");
				return '';
			}
			
			private function handleGeom():void
			{
				sourceKeySelector.errorStringFunction = getSourceKeyError;
				destinationKeySelector.errorStringFunction = getDestinationKeyError;
			}
			
			private function linkGeometryProperties():void
			{
				sourceKeySelector.dynamicObject = _plotter.sourceKeyColumn;
				destinationKeySelector.dynamicObject = _plotter.destinationKeyColumn;
				valueSelector.dynamicObject = _plotter.valueColumn;
				geometrySelector.dynamicObject = _plotter.geometryColumn.internalDynamicColumn;
				_plotter.geometryColumn.addGroupedCallback(this, handleGeom, true);
			}
			
			
			private function unlinkGeometryProperties():void
			{
				if (!data)
					return;
				
				sourceKeySelector.dynamicObject = null;
				destinationKeySelector.dynamicObject = null;
				valueSelector.dynamicObject = null;
				geometrySelector.dynamicObject = null;
				_plotter.geometryColumn.removeCallback(handleGeom);
			}
			
		]]>
	</mx:Script>
		
</mx:VBox>
