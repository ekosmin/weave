<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	implements="weave.api.ui.IDataSourceEditor"
	creationPolicy="all" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('GeoJSON URL *')}">
		<ui:TextInputWithPrompt id="url" width="100%" prompt="http://www.example.com/example.geojson"/>
		<mx:Button label="{lang('Open file')}" click="openFile(url, new FileFilter('GeoJSON', '*.geojson;*.json'), new FileFilter('All', '*.*'));"/>
	</ui:Indent>
	<ui:Indent label="{lang('Projection')}">
		<ui:helpContent>
			Specifies the geographic projection in which the geometry data is provided.
			
			Weave will try to read the projection information from the GeoJSON file, but it only supports legacy identifiers such as "EPSG:4326".
			Use this setting if Weave fails to determine the correct legacy identifier for the projection.
			Changing this setting does not alter the geometry coordinates.
		</ui:helpContent>
		<ui:TextInputWithPrompt id="projection" width="100%" prompt="Example: EPSG:4326"/>
	</ui:Indent>
	<ui:Indent label="{lang('Key Property')}">
		<ui:helpContent>
			Enter the name of the property that uniquely identifies each feature in the data set.
		</ui:helpContent>
		<mx:TextInput id="keyProperty" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('Key Type')}" helpContent="{KeyTypesMenu.helpContent}">
		<ui:KeyTypesMenu id="keyTypeSelector" text="{sourceName.text}" creationComplete="{if (target)
						 {
						 	(event.target as KeyTypesMenu).addKeyTypeToMenu(target.getKeyType());
						 	(event.target as KeyTypesMenu).selectedItem = target.keyType.value;
						 }}"/>
	</ui:Indent>
	<mx:Spacer height="20"/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.data.DataSources.GeoJSONDataSource;
			import weave.ui.BusyIndicator;
			
			private var busyIndicator:BusyIndicator = new BusyIndicator();
			
			override protected function createChildren():void
			{
				super.createChildren();
				addChild(busyIndicator);
				busyIndicator.visible = false;
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(GeoJSONDataSource));
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
			}
			
			[Bindable] private var target:GeoJSONDataSource = null;
			public function setTarget(object:ILinkableObject):void
			{
				target = object as GeoJSONDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					url.text = target.url.value;
					projection.text = target.getProjection();
					keyProperty.text = target.keyProperty.value;
					keyTypeSelector.addKeyTypeToMenu(target.getKeyType());
					keyTypeSelector.selectedKeyType = target.keyType.value;
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
				}
			}
			
			private function eq(s1:String, s2:String):Boolean { return (s1||'')==(s2||''); }
			
			public function hasPendingChanges():Boolean
			{
				return !eq(target.url.value, url.text)
					|| (
						!eq(target.getProjection(), projection.text) &&
						!eq(target.projection.value, projection.text)
					)
					|| !eq(target.keyProperty.value, keyProperty.text)
					|| !eq(target.keyType.value, keyTypeSelector.selectedKeyType);
			}

			public function applyChanges():void
			{
				target.url.value = null; // temporary solution, fixes bug where local file update won't be detected
				target.url.value = url.text;
				if (!eq(target.getProjection(), projection.text))
					target.projection.value = projection.text;
				target.keyProperty.value = keyProperty.text;
				target.keyType.value = keyTypeSelector.selectedKeyType;
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text)
				{
					Alert.show(lang("Please enter a name for this data source."), lang("Error"));
					return null;
				}
				if (!url.text)
				{
					Alert.show(lang("Please specify the URL to a GeoJSON file."), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name."), lang("Error"));
					return null;
				}
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, GeoJSONDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
			
			private function openFile(textInput:TextInputWithPrompt, ...fileFilters):void
			{
				try
				{
					var file:FileReference = new FileReference();
					file.addEventListener(Event.SELECT, function(event:Event):void{
						busyIndicator.visible = true;
						file.load();
						WeaveAPI.ProgressIndicator.addTask(file);
					});
					file.addEventListener(ProgressEvent.PROGRESS, function(event:ProgressEvent):void{
						WeaveAPI.ProgressIndicator.updateTask(file, event.bytesLoaded / event.bytesTotal);
					});
					file.addEventListener(Event.COMPLETE, function(event:Event):void{
						if (sourceName.editable)
						{
							var nameEqualsKeyType:Boolean = sourceName.text == keyTypeSelector.selectedKeyType;
							sourceName.text = file.name;
							if (nameEqualsKeyType)
							{
								keyTypeSelector.addKeyTypeToMenu(file.name);
								keyTypeSelector.selectedKeyType = file.name;
							}
						}
						textInput.text = WeaveAPI.URLRequestUtils.saveLocalFile(file.name, file.data);
						busyIndicator.visible = false;
						WeaveAPI.ProgressIndicator.removeTask(file);
					});
					file.addEventListener(IOErrorEvent.IO_ERROR, function(event:IOErrorEvent):void{
						busyIndicator.visible = false;
						reportError(event);
					});
					
					file.browse(fileFilters);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
		]]>
	</mx:Script>
</mx:VBox>