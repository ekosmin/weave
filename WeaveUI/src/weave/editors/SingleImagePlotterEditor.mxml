<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.editors.*"
		 xmlns:ui="weave.ui.*"
		 label="{lang('Image Settings')}"
		 implements="weave.api.ui.ILinkableObjectEditor">
	<ui:Indent label="{lang('Image URL:')}">
		<mx:TextInput id="urlInput" width="100%"/>
		<mx:Button label="{lang('Open file')}" click="fileAttacher.browseAndAttachFile()"/>
	</ui:Indent>
	<ui:Paragraph>
		Enter data coordinates below. Width and height are optional.
	</ui:Paragraph>
	<ui:IndentTextInput id="xInput" label="{lang('X')}"/>
	<ui:IndentTextInput id="yInput" label="{lang('Y')}"/>
	<ui:IndentTextInput id="widthInput" label="{lang('Width')}" alpha="{useImageSizeCheck.selected ? 0.5 : 1}"/>
	<ui:IndentTextInput id="heightInput" label="{lang('Height')}" alpha="{useImageSizeCheck.selected ? 0.5 : 1}"/>
	<ui:CustomCheckBox id="useImageSizeCheck" label="{lang('Use image coordinates')}"/>
	<ui:Indent label="Alignment">
		<ui:AlignmentControl id="alignmentInput"/>
	</ui:Indent>
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.getSessionState;
			import weave.api.linkBindableProperty;
			import weave.services.FileAttacher;
			import weave.ui.ControlPanel;
			import weave.ui.CustomContextMenuManager;
			import weave.ui.DraggablePanel;
			import weave.visualization.layers.PlotManager;
			import weave.visualization.plotters.SingleImagePlotter;
			import weave.visualization.tools.SimpleVisTool;
			
			private var _plotter:SingleImagePlotter = null;
			public function setTarget(object:ILinkableObject):void
			{
				_plotter = object as SingleImagePlotter;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkBindableProperty(_plotter.imageURL, urlInput, "text", 1000);
				linkBindableProperty(_plotter.dataX, xInput, "text");
				linkBindableProperty(_plotter.dataY, yInput, "text");
				linkBindableProperty(_plotter.dataWidth, widthInput, "text");
				linkBindableProperty(_plotter.dataHeight, heightInput, "text");
				linkBindableProperty(_plotter.useImageSize, useImageSizeCheck, "selected");
				linkBindableProperty(_plotter.horizontalAlign, alignmentInput, 'horizontalAlign');
				linkBindableProperty(_plotter.verticalAlign, alignmentInput, 'verticalAlign');
			}
			
			//----------------------------------------------
			
			private static var _contextMenuItem:ContextMenuItem = null;
			public static function createContextMenuItems(destination:DisplayObject):Boolean
			{
				if(!destination.hasOwnProperty("contextMenu") )
					return false;
				
				// Add a listener to this destination context menu for when it is opened
				var contextMenu:ContextMenu = destination["contextMenu"] as ContextMenu;
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, handleContextMenuOpened);
				_contextMenuItem = CustomContextMenuManager.createAndAddMenuItemToDestination("Add Marker", destination, handleAddMarker, "2.1 textBoxMenuItem");
				
				return true;
			}
			
			private static var tool:SimpleVisTool = null;
			private static var anchorPoint:Point = new Point();
			private static function handleContextMenuOpened(e:ContextMenuEvent):void
			{	
				tool = DraggablePanel.activePanel as SimpleVisTool;
				if (tool)
				{
					_contextMenuItem.enabled = true;
					anchorPoint.x = WeaveAPI.StageUtils.stage.mouseX;
					anchorPoint.y = WeaveAPI.StageUtils.stage.mouseY;
				}
				else
				{
					_contextMenuItem.enabled = false;
					tool = null;
				}
			}
			
			private static function handleAddMarker(e:ContextMenuEvent):void
			{
				if (tool)
				{
					var state:Object = getSessionState(tool.visualization);
					var pm:PlotManager = tool.visualization.plotManager;
					var name:String = pm.plotters.generateUniqueName("marker");
					var plotter:SingleImagePlotter = pm.plotters.requestObject(name, SingleImagePlotter, false);
					
					var localAnchorPoint:Point = tool.visualization.globalToLocal(anchorPoint);
					pm.zoomBounds.projectScreenToData(localAnchorPoint);
					
					plotter.imageURL.value = SingleImagePlotter.RED_CIRCLE_IMAGE_URL;
					plotter.dataX.value = localAnchorPoint.x;
					plotter.dataY.value = localAnchorPoint.y;
					
					ControlPanel.openEditor(plotter, [tool.visualization], [state]);
				}
			}
			
			private var fileAttacher:FileAttacher = new FileAttacher(this, [new FileFilter('Image', '*.png;*.jpg;*.bmp'), new FileFilter('All files', "*")], handleURL);
			private function handleURL(url:String):void
			{
				urlInput.text = url;
			}
		]]>
	</mx:Script>
</mx:VBox>
