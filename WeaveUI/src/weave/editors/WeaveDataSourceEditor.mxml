<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent label="{lang('Source name *')}">
		<mx:TextInput id="sourceName" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('Source URL')}">
		<ui:TextInputWithPrompt id="url" prompt="http://www.example.com/WeaveServices/DataService" width="100%"/>
	</ui:Indent>
	<ui:Indent label="{lang('Root hierarchy ID')}">
		<ui:TextInputWithPrompt id="rootId" prompt="Hierarchy ID" width="100%"/>
		<mx:Button label="{lang('Choose')}" click="chooseHierarchy()"/>
		<mx:Button label="{lang('Reset')}" click="rootId.text = '';"/>
	</ui:Indent>
	<mx:Spacer height="20"/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.disposeObject;
			import weave.api.registerDisposableChild;
			import weave.compiler.StandardLib;
			import weave.data.DataSources.WeaveDataSource;
			import weave.ui.WeaveDataSourceHierarchySelector;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(WeaveDataSource));
			}
			
			[Bindable] private var target:WeaveDataSource = null;
			
			public function setTarget(object:ILinkableObject):void
			{
				target = object as WeaveDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					url.text = target.url.value;
					
					var id:Number = StandardLib.asNumber(target.rootId.getSessionState());
					rootId.text = isFinite(id) ? String(id) : '';
					
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
				}
			}
			
			public function hasPendingChanges():Boolean
			{
				return StandardLib.asString(target.url.value) != StandardLib.asString(url.text)
					|| StandardLib.asString(target.rootId.getSessionState()) != StandardLib.asString(rootId.text);
			}
			
			public function applyChanges():void
			{
				// set value on data source
				target.url.value = url.text;
				// read from data source in case value is different
				url.text = target.url.value;
				
				// set value on data source
				var id:Number = StandardLib.asNumber(rootId.text);
				target.rootId.setSessionState(isFinite(id) ? id : null);
				// read from data source in case value is different
				id = StandardLib.asNumber(target.rootId.getSessionState());
				rootId.text = isFinite(id) ? String(id) : '';
				
				disposeObject(_hierarchySelector);
				_hierarchySelector = null;
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text)
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, WeaveDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
			
			private var _hierarchySelector:WeaveDataSourceHierarchySelector;
			
			public function chooseHierarchy():void
			{
				_hierarchySelector = registerDisposableChild(this, WeaveDataSourceHierarchySelector.show(url.text, handleSelectedHierarchy));
			}
			private function handleSelectedHierarchy(id:int):void
			{
				rootId.text = String(id);
			}
		]]>
	</mx:Script>
</mx:VBox>
