<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
	This is a GUI for SessionStateLog undo and redo.

	@author adufilie
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns="weave.editors.*"
		 click="handleAnyClick();"
		 backgroundColor="0xCCCCCC"
		 width="100%" horizontalGap="{padding}" paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}" paddingBottom="{padding}"
		 implements="weave.api.ui.ILinkableObjectEditor,weave.api.core.ILinkableObject" xmlns:ui="weave.ui.*">
	<mx:Button width="24" toolTip="{lang('Load a file...')}" icon="@Embed(source='/weave/resources/images/eject-inset.png')" click="load()"/> 
	<mx:Button width="24" toolTip="{lang('Save as...')}" icon="@Embed(source='/weave/resources/images/floppy.png')" click="save()"/>
	<mx:Button id="playButton" label="{ getPlayLabel(_playSpeed, playButton.selected) }" toggle="true" toolTip="{lang('Replay session history')}" click="if (playButton.selected) play();"/>
	<mx:Button width="24" id="undoButton" click="_stateLog.undo();" toolTip="{lang('Undo')}" icon="@Embed(source='/weave/resources/images/history-undo.png')"/>
	<mx:Button width="24" id="redoButton" click="_stateLog.redo();" toolTip="{lang('Redo')}" icon="@Embed(source='/weave/resources/images/history-redo.png')"/>
	<mx:HSlider id="slider" width="100%" minWidth="0" showDataTip="false" liveDragging="true" tickInterval="1" snapInterval="1" minimum="0" change="handleSlider();" mouseDown="slider.getThumbAt(0).setFocus()"/>
	<ui:MenuButton width="24" id="menuButton" toolTip="{lang('Menu')}" initialize="menuButton.data = [
		{label: lang('Clear all history'), click: _stateLog.clearHistory},
		{label: lang('Clear undo history'), click: function():void { _stateLog.clearHistory(-1); }},
		{label: lang('Clear redo history'), click: function():void { _stateLog.clearHistory(1); }},
		{label: getSquashMenuLabel, click: squash, shown: getSquashMenuLabel}
	];"/>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.detectLinkableObjectChange;
			import weave.api.newLinkableChild;
			import weave.api.objectWasDisposed;
			import weave.api.reportError;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableWatcher;
			import weave.core.SessionStateLog;
			import weave.menus.FileMenu;
			import weave.ui.ExportSessionStateOptions;
			import weave.ui.SubMenu;
			
			private const padding:Number = 4;
			
			private var _stateLog:SessionStateLog = null; // this is the object we are editing
			private const _stateLogWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleStateLogChange);

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				_playMenu = new SubMenu(
					playButton,
					[1,2,4,8,16].map(function(speed:int, i:int, a:Array):Object {
						return {label: speed + 'x', click: function():void { play(speed); }};
					})
				);
				_playMenu.setSubMenuEvents([MouseEvent.MOUSE_DOWN], [MouseEvent.MOUSE_UP]);
				addEventListener(Event.ENTER_FRAME, handleEnterFrame);
			}
			
			/**
			 * This gets set to true when a squash is active and false when the squash is completed.
			 */
			public const squashActive:LinkableBoolean = newLinkableChild(this, LinkableBoolean);
			
			private var _squashItem:Object;
			private function getSquashMenuLabel():String
			{
				if (_squashItem && (_stateLog.undoHistory.indexOf(_squashItem) >= 0 || _stateLog.redoHistory.indexOf(_squashItem) >= 0))
					return lang("Squash (Mark out)");
				if (_stateLog.undoHistory.length)
					return lang("Squash (Mark in)");
				return '';
			}
			private function squash():void
			{
				var undoLength:int = _stateLog.undoHistory.length;
				if (_squashItem)
				{
					// perform squash
					_stateLog.synchronizeNow();
					
					// TEMPORARY SOLUTION until bookmarks are implemented
					SessionStateLog.enableHistoryRewrite = true;
					
					var i:int = _stateLog.undoHistory.indexOf(_squashItem);
					if (i >= 0)
					{
						_stateLog.squashHistory(i + 1 - undoLength);
					}
					else
					{
						i = _stateLog.redoHistory.indexOf(_squashItem);
						if (i >= 0)
						{
							_stateLog.squashHistory(i + 1);
						}
					}
					_squashItem = null;
					
					squashActive.value = false;
				}
				else if (undoLength)
				{
					// begin squash
					
					// TEMPORARY SOLUTION until bookmarks are implemented
					SessionStateLog.enableHistoryRewrite = false; // prevents the _squashItem from being replaced in the history
					
					_squashItem = _stateLog.undoHistory[undoLength - 1];
					
					squashActive.value = true;
				}
				showSquashTicks();
			}
			private function showSquashTicks():void
			{
				if (_squashItem)
				{
					var pos:int = _stateLog.undoHistory.length;
					var i:int = _stateLog.undoHistory.indexOf(_squashItem);
					if (i < 0)
					{
						i = _stateLog.redoHistory.indexOf(_squashItem)
						if (i >= 0)
							i += pos;
					}
					
					if (i < 0)
					{
						slider.tickValues = [];
					}
					else
					{
						var min:int = Math.min(i + 1, pos);
						var max:int = Math.max(i + 1, pos);
						var values:Array = new Array(max - min + 1);
						i = values.length;
						while (i--)
							values[i] = min + i;
						slider.tickValues = values;
					}
				}
				else if (slider.tickValues.length > 0)
				{
					slider.tickValues = [];
				}
			}
			
			private var _playMenu:SubMenu;
			[Bindable] private var _playSpeed:uint = 1;
			private var _lastReplayTime:int = 0;
			private var _maxStepDelay:int = 1000;
			
			private function getPlayLabel(playSpeed:uint, active:Boolean):String
			{
				return playSpeed == 1 ? lang(active ? 'Replaying' : 'Replay') : lang(active ? 'Replaying ({0}x)' : 'Replay ({0}x)', playSpeed);
			}
			private function play(speed:int = 0):void
			{
				playButton.selected = true;
				if (speed)
					_playSpeed = speed;
				// if at end, restart from beginning
				if (_stateLog.redoHistory.length == 0)
					_stateLog.undo(int.MAX_VALUE);
			}
			private function handleEnterFrame(event:Event):void
			{
				if (playButton.selected)
				{
					var mouseDown:Boolean = WeaveAPI.StageUtils.mouseButtonDown;
					if (_stateLog.redoHistory.length)
					{
						// always read the current delay value because it may change due to undo/redo while playing
						var entry:Object = _stateLog.redoHistory[0];
						var delay:int = entry.triggerDelay + entry.diffDuration;
						// wait until delay has passed
						if (getTimer() < _lastReplayTime + Math.min(delay / _playSpeed, _maxStepDelay))
							return;
						// wait until background tasks complete
						if (WeaveAPI.ProgressIndicator.getTaskCount() > 0)
							return;
						// pause while mouse button is pressed
						if (!mouseDown)
						{
							_stateLog.redo();
							// save current time as reference point
							_lastReplayTime = getTimer();
						}
					}
					else if (!mouseDown)
					{
						// stop playing
						playButton.selected = false;
					}
				}
			}
			
			/**
			 * @inheritDoc
			 */
			public function setTarget(object:ILinkableObject):void
			{
				_stateLogWatcher.target = _stateLog = object as SessionStateLog;
			}
			
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			// called when anything is clicked
			private function handleAnyClick():void
			{
				// hack so slider doesn't disappear
				Weave.properties.enableSessionHistoryControls.value = true;
			}
			
			// called when slider value changes
			private function handleSlider():void
			{
				var delta:int = slider.value - _stateLog.undoHistory.length;
				if (delta < 0)
					_stateLog.undo(-delta);
				else
					_stateLog.redo(delta);
				
				showSquashTicks();
				
				// hack so slider doesn't disappear
				handleAnyClick();
			}
			
			// called when state log changes
			private function handleStateLogChange():void
			{
				if (objectWasDisposed(_stateLog))
					return;
				
				if (!parent)
				{
					callLater(handleStateLogChange);
					return;
				}
				
				if (detectLinkableObjectChange(handleStateLogChange, _stateLog.enableLogging))
					menuButton.visible = menuButton.includeInLayout = _stateLog.enableLogging.value;
				
				slider.maximum = _stateLog.undoHistory.length + _stateLog.redoHistory.length;
				slider.value = _stateLog.undoHistory.length;
				slider.enabled = slider.maximum > slider.minimum;
				undoButton.enabled = _stateLog.undoHistory.length > 0;
				redoButton.enabled = _stateLog.redoHistory.length > 0;
				// save current time as reference point
				_lastReplayTime = getTimer();
			}
			
			private function load():void
			{
				try
				{
					var fileRef:FileReference = new FileReference();
					fileRef.addEventListener(IOErrorEvent.IO_ERROR, reportError);
					fileRef.addEventListener(
						Event.SELECT,
						function (e:Event):void
						{
							fileRef.load();
						}
					);
					fileRef.addEventListener(
						Event.COMPLETE,
						function (e:Event):void
						{
							FileMenu.loadFile(fileRef.name, fileRef.data);
						}
					);
					
					// TEMPORARY SOLUTION until we can register file type handlers in WeaveAPI
					fileRef.browse(FileMenu.getSupportedFileTypes());
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			private function save():void
			{
				ExportSessionStateOptions.openExportPanel();
			}
		]]>
	</mx:Script>
</mx:HBox> 
