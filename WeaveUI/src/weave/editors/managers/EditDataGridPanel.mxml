<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel xmlns="weave.editors.managers.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off" escapeKeyClosesPanel="true"
				visible="true" title="{lang('View/Edit Data')}" xmlns:ui="weave.ui.*" xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*">
	<mx:VBox width="100%" height="100%">
		<CustomDataGrid:CustomDataGrid id="tableEditor" width="100%" height="100%"/>
	</mx:VBox>
	
	<mx:ControlBar>
		<mx:Spacer width="100%"/>
		<mx:Button id="saveButton" label="{lang('Ok')}" click="removePanel();"/>
		<mx:Button id="cancelButton" label="{lang('Cancel')}" click="removePanel();"/>
	</mx:ControlBar>
	
	<mx:Script>
		<![CDATA[
			
			
			/**
			 * @return The modified rows with columns in modified order.
			 */
			public function getRows():Array
			{
				return tableEditor.getRows();
			}
			
			/**
			 * This function loads data into the grid.
			 * @param tableWithHeader is an array of arrays with all the data including the header
			 * @param editable Set this to true to allow the user to edit the data.
			 **/
			public function setRows(tableWithHeader:Array, editable:Boolean):void
			{
				tableEditor.draggableColumns = editable;
				tableEditor.editable = editable;
				saveButton.visible = editable;
				cancelButton.visible = editable;
				title = editable ? lang("View/Edit Data") : lang("View Data");
				
				tableEditor.setRows(tableWithHeader);
			}
			
			private function removeLeadingAndTrailingQuotes(element:*, index:int, arr:Array):void
			{
				var string:String = String(element);
				
				// if the first character is a quote and last character is a quote
				if(string.charAt(0) == "\"" && string.charAt(string.length-1) == "\"")
				{
					// set this value in the array to be the string with the first character and last character removed
					arr[index] = string.substr(1, string.length-2);
				}
			}
			
			private function trimCommas(value:String):String
			{
				if (value == null || value == "\\N" || value == "NaN" )
					return "";
				var trimmedString:String = "";
				var temp:Array = value.split(",");
				for(var i:int; i <temp.length; i++)
				{
					trimmedString += temp[i];
				}
				return trimmedString;
			}
		]]>
	</mx:Script>
</ui:DraggablePanel>
