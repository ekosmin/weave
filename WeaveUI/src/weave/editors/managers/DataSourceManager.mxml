<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.managers.*"
	xmlns:ui="weave.ui.*"
	backgroundColor="#EFF4BC"
	escapeKeyClosesPanel="true"
	enablePercentageCoords="false"
	title="{lang('Manage data sources')}" xmlns:editors="weave.editors.*" xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*">
	<mx:HDividedBox initialize="UIUtils.pad(event, padding, 100, 100)">
		<mx:VBox height="100%">
			<ui:MenuButton id="createDataSource" label="{lang('New data source...')}" width="100%"/>
			<ui:Paragraph translate="true">
				Select a data source:
			</ui:Paragraph>
			<mx:List id="sourceList"
					 change="handleSourceSelect()"
					 minHeight="0"
					 height="100%" width="100%">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox horizontalScrollPolicy="off" verticalAlign="middle" initialize="UIUtils.pad(this, 2);">
							<mx:Label id="lbl" width="100%" minWidth="0"/>
							<ui:MenuButton id="menu" toolTip="{lang('Menu')}" smallIcon="true" width="20" height="20">
								<ui:initialize>
									<![CDATA[
										menu.data = [
											{
												label: lang('Edit session state'),
												click: function():void {
													SessionStateEditor.openDefaultEditor(data as IDataSource);
												}
											},{
												label: lang('Refresh'),
												click: function():void {
													var ds:IDataSource = data as IDataSource;
													if (ds)
													{
														ds.hierarchyRefresh.triggerCallbacks();
														// TEMPORARY SOLUTION until all data sources behave correctly - force creating a new copy
														var ghm:ILinkableHashMap = WeaveAPI.globalHashMap;
														ghm.requestObjectCopy(ghm.getName(ds), ds);
													}
												}
											},
											WeaveMenuItem.TYPE_SEPARATOR,
											{
												label: lang('Delete'),
												click: function():void {
													var name:String = WeaveAPI.globalHashMap.getName(data as ILinkableObject);
													WeaveAPI.globalHashMap.removeObject(name);
												}
											}
										];
									]]>
								</ui:initialize>
							</ui:MenuButton>
							<ui:BusyIndicator id="busy" diameterRatio=".75"/>
							<mx:Script>
								<![CDATA[
									import weave.api.core.ILinkableHashMap;
									import weave.api.core.ILinkableObject;
									import weave.api.data.IDataSource;
									import weave.core.UIUtils;
									import weave.menus.WeaveMenuItem;
									import weave.ui.SessionStateEditor;
									
									override public function set data(value:Object):void
									{
										super.data = value as IDataSource;
										lbl.text = WeaveAPI.globalHashMap.getName(value as ILinkableObject);
										busy.targets = [value];
									}
								]]>
							</mx:Script>
						</mx:HBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
		</mx:VBox>
		<ui:CustomTabNavigator id="tabNav" initialize="UIUtils.pad(event, padding, 100, 100)" change="callLater(handleSourceSelect)">
			<ui:CustomViewStack id="browseTab" label="{lang('Browse')}" initialize="UIUtils.pad(event, 0, 100, 100, true)" selectedIndex="{dataSource ? 1 : 0}">
				<mx:Canvas width="100%" height="100%">
					<ui:Paragraph translate="true" id="browseMessage"/>
				</mx:Canvas>
				<mx:HBox width="100%" height="100%">
					<editors:DynamicColumnEditor id="browser" dataSource="{dataSource}"/>
					<ui:MenuButton id="createVis" label="{lang('Create a visualization...')}"/>
					<mx:VBox width="100%" height="100%" id="columnDisplay">
						<mx:Label id="columnDisplayLabel"/>
						<CustomDataGrid:CustomDataGrid id="columnDisplayGrid"
									 height="100%" width="100%"
									 sortableColumns="false"
									 draggableColumns="false"
									 verticalScrollPolicy="on">
							<CustomDataGrid:creationComplete>
								<![CDATA[
									browser.explorer.fileVBox.addChild(columnDisplay);
									var dataColumn:IAttributeColumn = browser.referencedColumn;
									var dgcKey:DataGridColumn = new DataGridColumn();
									var dgcValue:DataGridColumn = new DataGridColumn();
									dgcKey.headerWordWrap = true;
									dgcValue.headerWordWrap = true;
									columnDisplayGrid.columns = [dgcKey, dgcValue];
									columnDisplayGrid.labelFunction = function(key:IQualifiedKey, dgc:DataGridColumn):String {
										return dgc == dgcKey ? key.localName : dataColumn.getValueFromKey(key, String);
									};
									dataColumn.addGroupedCallback(
										this,
										function():void {
											var keyCount:int = dataColumn.keys.length;
											columnDisplay.enabled = keyCount > 0;
											if (linkableObjectIsBusy(dataColumn))
												columnDisplayLabel.text = lang("Loading data...");
											else
											{
												columnDisplayLabel.visible = columnDisplayLabel.includeInLayout = columnDisplay.enabled;
												columnDisplayLabel.text = lang(
													'Selected column has {0} records',
													StandardLib.formatNumber(keyCount)
												);
											}
											columnDisplayGrid.dataProvider = dataColumn.keys;
											keyColumn.keyType.value = dataColumn.getMetadata(ColumnMetadata.KEY_TYPE);
											var dataType:String = dataColumn.getMetadata(ColumnMetadata.DATA_TYPE);
											dgcKey.headerText = keyColumn.getMetadata(ColumnMetadata.TITLE);
											dgcValue.headerText = dataType ? lang("Value ({0})", dataType) : lang("Value");
										},
										true
									);
									BindingUtils.bindSetter(
										function(selectedItem:IWeaveTreeNode):void
										{
											var ref:IColumnReference = selectedItem as IColumnReference;
											columnDisplay.visible = columnDisplay.includeInLayout = ref && ref.getColumnMetadata() != null;
										},
										browser.explorer.fileView,
										'selectedItem'
									);
								]]>
							</CustomDataGrid:creationComplete>
						</CustomDataGrid:CustomDataGrid>
					</mx:VBox>
				</mx:HBox>
			</ui:CustomViewStack>
			<ui:CustomViewStack id="editTab" label="{lang('Configure')}" initialize="UIUtils.pad(event, 0, 100, 100, true)" selectedIndex="{dataSource ? 1 : 0}">
				<mx:Canvas width="100%" height="100%">
					<ui:Paragraph translate="true" id="configureMessage"/>
				</mx:Canvas>
				<mx:VBox width="100%" height="100%">
					<mx:Box id="container" initialize="UIUtils.pad(event, 0, 100, 100, true)"/>
					<mx:HBox width="100%">
						<ui:CustomCheckBox id="refreshCheck" label="{lang('Refresh hierarchy after apply')}" selected="true"/>
						<mx:Spacer width="100%"/>
						<mx:Button label="{lang('Apply changes')}" click="save()"/>
						<mx:Button label="{lang('Cancel')}" click="removeEditor(); tabNav.selectedChild = browseTab;"/>
					</mx:HBox>
				</mx:VBox>
			</ui:CustomViewStack>
		</ui:CustomTabNavigator>
	</mx:HDividedBox>
		
		<mx:Script>
			<![CDATA[
				import weave.menus.DataMenu;
				import weave.api.data.IQualifiedKey;
				import weave.Weave;
				import weave.utils.VectorUtils;
				import mx.core.INavigatorContent;
				import weave.menus.DataMenu;
				import weave.api.core.ILinkableHashMap;
				import weave.utils.ColumnUtils;
				import weave.api.ui.ISelectableAttributes;
				import avmplus.getQualifiedClassName;
				import weave.core.ClassUtils;
				import weave.visualization.tools.SimpleVisTool;
				import weave.api.core.ILinkableObject;
				import weave.menus.ToolsMenu;
				import weave.menus.WeaveMenuItem;
				import weave.ui.SubMenu;
				import mx.binding.utils.BindingUtils;
				import mx.controls.dataGridClasses.DataGridColumn;
				import mx.core.Container;
				import mx.controls.Alert;
				
				import weave.api.data.ColumnMetadata;
				import weave.api.data.IAttributeColumn;
				import weave.api.data.IColumnReference;
				import weave.api.data.IDataSource;
				import weave.api.data.IWeaveTreeNode;
				import weave.api.disposeObject;
				import weave.api.linkableObjectIsBusy;
				import weave.api.newDisposableChild;
				import weave.api.registerDisposableChild;
				import weave.api.reportError;
				import weave.api.ui.ILinkableObjectEditor;
				import weave.compiler.StandardLib;
				import weave.core.UIUtils;
				import weave.data.AttributeColumns.KeyColumn;
				import weave.data.AttributeColumns.ProxyColumn;
				import weave.utils.PopUpUtils;
				
				private static const padding:int = 8;
				
				private const keyColumn:KeyColumn = newDisposableChild(this, KeyColumn);
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					createDataSource.data = function():Array { return DataMenu.getDynamicItems(null, true); }
					initCreateVis();
					
					WeaveAPI.globalHashMap.childListCallbacks.addImmediateCallback(this, updateSources, true);
					selectDataSource(null);
				}
				
				private function initCreateVis():void
				{
					browser.explorer.fileVBox.addChildAt(createVis, 0);
					
					function onClick(item:WeaveMenuItem):void
					{
						// prioritize input columns
						var selectedItems:Array = browser.explorer.fileView.selectedItems;
						Alert.show(selectedItems.toString());
						if (selectedItems)
							selectedItems = selectedItems.concat().reverse();
						var input:Array = VectorUtils.union(
							selectedItems,
							browser.explorer.selectedFolder.getChildren()
						).filter(function(item:Object, i:*, a:*):Boolean {
							return item is IColumnReference && (item as IColumnReference).getColumnMetadata() != null;
						});
						
						// limit the number of input columns
						const max_input:int = 10;
						if (input.length > max_input)
							input.length = max_input;
						
						var obj:ISelectableAttributes = ToolsMenu.createGlobalObject(item) as ISelectableAttributes;
						if (obj is SimpleVisTool)
						{
							(obj as SimpleVisTool).initSelectableAttributes(input);
						}
						else
						{
							var selectables:Array = obj.getSelectableAttributes();
							if (selectables.length == 1 && selectables[0] is ILinkableHashMap)
								input.forEach(function(item:Object, i:int, a:Array):void {
									ColumnUtils.initSelectableAttribute(selectables[0], item, i == 0);
								});
							else
								ColumnUtils.initSelectableAttributes(selectables, input);
						}
					}
					createVis.data = function():Array {
						return ToolsMenu.getDynamicItems(null, function(item:WeaveMenuItem):Boolean {
							item.click = onClick;
							var qname:String = getQualifiedClassName(item.data);
							var qname_iowsa:String = getQualifiedClassName(ISelectableAttributes);
							return ClassUtils.classImplements(qname, qname_iowsa);
						});
					};
				}
				
				override public function reposition():void
				{
					panelWidth.value = "700";
					panelHeight.value = "500";
				}
				
				private function hasPendingChanges():Boolean
				{
					return editor && editor.parent && editor.hasPendingChanges();
				}
				
				private function updateSources():void
				{
					sourceList.dataProvider = WeaveAPI.globalHashMap.getObjects(IDataSource);
					sourceList.selectedItem = dataSource;
					
					if (WeaveAPI.globalHashMap.childListCallbacks.lastObjectRemoved == dataSource)
						selectDataSource(null);
					
					var newDataSource:IDataSource = WeaveAPI.globalHashMap.childListCallbacks.lastObjectAdded as IDataSource;
					if (newDataSource && !hasPendingChanges())
					{
						selectDataSource(newDataSource);
						tabNav.selectedIndex = 0;
					}
				}
				
				[Bindable] private var dataSource:IDataSource;
				private var editor:ILinkableObjectEditor = null;
				
				/**
				 * Displays the Browse tab for a specific data source.
				 */
				public function browse(target:IDataSource, discardChanges:Boolean = false):void
				{
					if (discardChanges || !hasPendingChanges())
					{
						selectDataSource(target);
						tabNav.selectedChild = browseTab;
					}
				}
				
				public function selectDataSource(value:IDataSource):void
				{
					sourceList.selectedItem = value;
					handleSourceSelect(true);
				}
				
				private function handleSourceSelect(confirmed:Boolean = false):void
				{
					var newDataSource:IDataSource = sourceList.selectedItem as IDataSource;
					
					// don't reset editor if unnecessary
					if (dataSource == newDataSource && tabNav.selectedChild == editTab && hasPendingChanges())
						return;
					
					if (!confirmed && hasPendingChanges())
					{
						// switch back until user confirms
						sourceList.selectedItem = dataSource;
						var prevTab:INavigatorContent = tabNav.selectedChild;
						tabNav.selectedChild = editTab;
						confirmDiscard(function():void {
							tabNav.selectedChild = prevTab;
							selectDataSource(newDataSource);
						});
						return;
					}
					
					if (confirmed && dataSource == newDataSource)
					{
						// clear any existing selection
						browser.referencedColumn.setColumnReference(null, null);
					}
					
					removeEditor();
					
					dataSource = newDataSource
					
					if (dataSource && tabNav.selectedChild == editTab)
					{
						editor = WeaveAPI.EditorManager.getNewEditor(dataSource);
						if (!editor)
							return;
						container.addChildAt(editor as DisplayObject, 0);
						if (editor is Container)
							(editor as Container).label = lang('Edit {0}', WeaveAPI.ClassRegistry.getDisplayName(Object(dataSource).constructor as Class));
						editor.percentWidth = 100;
						editor.percentHeight = 100;
					}
					
					if (!dataSource)
					{
						if (WeaveAPI.globalHashMap.getObjects(IDataSource).length)
							browseMessage.text = configureMessage.text = "Please select a data source.";
						else
							browseMessage.text = configureMessage.text = "Please create a data source first.";
					}
				}
				
				private function save():void
				{
					try
					{
						if (editor != null)
						{
							editor.applyChanges();
							removeEditor();
							if (refreshCheck.selected)
								dataSource.hierarchyRefresh.triggerCallbacks();
							tabNav.selectedChild = browseTab;
						}
					}
					catch (e:Error)
					{
						reportError(e);
					}
				}
				
				private function removeEditor():void
				{
					if (editor && editor.parent == container)
						container.removeChild(editor as DisplayObject);
					disposeObject(editor);
					editor = null;
				}
				
				override public function removePanel():void
				{
					if (hasPendingChanges())
					{
						confirmDiscard(function():void {
							selectDataSource(null);
							removePanel();
						});
					}
					else
					{
						selectDataSource(null);
						super.removePanel();
					}
				}
				
				private function confirmDiscard(yes:Function):void
				{
					PopUpUtils.confirm(
						this,
						lang('Discard changes'),
						lang('Discard unsaved changes?'),
						yes, null,
						lang('Discard'), lang('Cancel')
					);
				}
			]]>
		</mx:Script>
</ui:DraggablePanel>