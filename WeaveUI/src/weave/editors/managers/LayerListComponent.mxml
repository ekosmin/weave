<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.editors.managers.*"
		 width="100%" height="100%"
		 creationPolicy="all"
		 label="{lang('Layers')}" xmlns:ui="weave.ui.*">
	<ui:Indent id="layerButtons" grouped="false" label="{lang('Visualization layers')}" fontWeight="bold" verticalAlign="bottom">
		<mx:HBox width="100%" id="selectorControls">
			<mx:Spacer width="100%"/>
			<ui:MenuButton id="addButton" label="{lang('New layer...')}"/>
		</mx:HBox>
	</ui:Indent>
	<mx:VBox borderStyle="solid" initialize="UIUtils.pad(event, 5, 100, 100)">
		<mx:HBox width="100%" verticalAlign="middle" toolTip="{lang('Foreground layers appear at the beginning of this list.')}">
			<mx:HRule width="100%"/>
			<mx:Label text="{lang('Foreground')}" alpha="0.5"/>
			<mx:HRule width="100%"/>
		</mx:HBox>
		<mx:List id="list" variableRowHeight="true" initialize="UIUtils.pad(event, 2, 100, 100)" borderStyle="none"
				 mouseDown="onMouseDown(event)" dragStart="onDragStart(event)">
			<mx:itemRenderer>
				<mx:Component>
					<mx:HBox width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off"
							 resize="(parent as UIComponent).invalidateSize();"
							 addedToStage="(parent as UIComponent).invalidateSize();">
						<mx:HBox horizontalGap="0">
							<ui:CustomCheckBox label="{lang('Visible')}" selected="{layerIsVisible}" change="layerIsVisible = event.target.selected"/>
							<mx:HSlider toolTip="{lang('Alpha (opacity)')}" width="64" liveDragging="true"
										minimum="0" maximum="1" value="{layerAlpha}" change="layerAlpha = event.target.value"/>
						</mx:HBox>
						<ui:CustomCheckBox label="{lang('Selectable')}" selected="{layerIsSelectable}" change="layerIsSelectable = event.target.selected"/>
						<ui:Paragraph id="lbl" textAlign="center"/>
						<ui:MenuButton label="{lang('Edit...')}" toolTip="{lang('Double-click to edit properties')}" initialize="event.target.data = [
							{label: lang('Edit properties'), click: openSettingsPanel},
							{label: lang('Edit session state'), click: openSessionEditor},
							{label: lang('Rename'), click: rename, shown: objectIsNotLocked},
							WeaveMenuItem.TYPE_SEPARATOR,
							{label: lang('Delete'), click: remove, shown: objectIsNotLocked}
						];" doubleClickEnabled="true" doubleClick="openSettingsPanel()"/>
						<mx:Script>
							<![CDATA[
								import mx.core.UIComponent;
								
								import weave.api.core.ILinkableObject;
								import weave.api.getSessionState;
								import weave.api.linkBindableProperty;
								import weave.api.objectWasDisposed;
								import weave.api.setSessionState;
								import weave.api.ui.IPlotter;
								import weave.api.unlinkBindableProperty;
								import weave.menus.WeaveMenuItem;
								import weave.ui.AlertTextBox;
								import weave.ui.AlertTextBoxEvent;
								import weave.ui.ControlPanel;
								import weave.ui.SessionStateEditor;
								import weave.ui.SubMenu;
								import weave.ui.VariableListController;
								import weave.visualization.layers.LayerSettings;
								import weave.visualization.layers.PlotManager;
								import weave.visualization.layers.Visualization;
								
								override protected function childrenCreated():void
								{
									super.childrenCreated();
								}
								
								[Bindable] public var layerIsVisible:Boolean = true;
								[Bindable] public var layerIsSelectable:Boolean = true;
								[Bindable] public var layerAlpha:Number = 1;
								
								// accessors for convenience
								private function get plotter():IPlotter
								{
									return data as IPlotter;
								}
								private function get plotManager():PlotManager
								{
									return outerDocument.visualization.plotManager;
								}
								private function get plotterName():String
								{
									return plotManager.plotters.getName(plotter);
								}
								private function get layerSettings():LayerSettings
								{
									return plotManager.layerSettings.getObject(plotterName) as LayerSettings;
								}
								
								override public function set data(newPlotter:Object):void
								{
									// filter out bogus data
									if (objectWasDisposed(newPlotter))
										newPlotter = null;
									
									newPlotter = newPlotter as IPlotter;
									
									lbl.text = outerDocument.list.itemToLabel(newPlotter);
									callLater((parent as UIComponent).invalidateSize);
									
									if (plotter == newPlotter)
										return;
									
									// unlink checkboxes
									if (layerSettings)
									{
										unlinkBindableProperty(layerSettings.visible, this, "layerIsVisible");
										unlinkBindableProperty(layerSettings.selectable, this, "layerIsSelectable");
										unlinkBindableProperty(layerSettings.alpha, this, "layerAlpha");
									}
									
									// save pointers
									super.data = newPlotter;
									
									// link checkboxes
									if (layerSettings)
									{
										linkBindableProperty(layerSettings.visible, this, "layerIsVisible");
										linkBindableProperty(layerSettings.selectable, this, "layerIsSelectable");
										linkBindableProperty(layerSettings.alpha, this, "layerAlpha");
									}
								}
								
								// menu code
								private function objectIsNotLocked():Boolean
								{
									return !plotManager.plotters.objectIsLocked(plotterName);
								}
								private function openSessionEditor():void
								{
									SessionStateEditor.openDefaultEditor(plotter);
								}
								private function openSettingsPanel():void
								{
									ControlPanel.openEditor(plotter, [plotManager]);
								}
								private function rename():void
								{
									var defaultInputString:String = outerDocument.controller.hashMap.getName(data as ILinkableObject);
									var alertBox:AlertTextBox = AlertTextBox.show(lang("Rename Layer"), lang("Please enter a new layer name:"), defaultInputString);
									
									alertBox.addEventListener(AlertTextBoxEvent.BUTTON_CLICKED, 
										function (e:AlertTextBoxEvent):void 
										{
											// if the user clicked cancel, then we will just return from here and save nothing
											if (!e.confirm)
												return;
											
											//Alert.show("Input was " + e.textInput);
											var ls:LayerSettings = plotManager.layerSettings.getObject(defaultInputString) as LayerSettings;
											var state:Object = getSessionState(ls);
											plotManager.plotters.renameObject(defaultInputString, e.textInput);
											ls = plotManager.layerSettings.getObject(e.textInput) as LayerSettings;
											setSessionState(ls, state);
										}
									);
								}
								private function remove():void
								{
									var name:String = outerDocument.controller.hashMap.getName(data as ILinkableObject);
									outerDocument.controller.hashMap.removeObject(name);
								}
							]]>
						</mx:Script>
					</mx:HBox>
				</mx:Component>
			</mx:itemRenderer>
		</mx:List>
		<mx:Label id="listOverlay"
				  width="{list.width}" y="{(list.height - listOverlay.height) / 2}"
				  mouseChildren="false" alpha="0.5"
				  textAlign="center"
				  text="{lang('Start by adding a new layer.')}"
				  creationComplete="list.addChild(listOverlay);"
				  visible="{isEmpty(list.dataProvider)}"/>
		<mx:HBox width="100%" verticalAlign="middle" toolTip="{lang('Background layers appear at the end of this list.')}">
			<mx:HRule width="100%"/>
			<mx:Label text="{lang('Background')}" alpha="0.5"/>
			<mx:HRule width="100%"/>
		</mx:HBox>
	</mx:VBox>
	<!--
	<mx:CheckBox id="enableAutoZoom" label="{lang('Enable auto zoom to extent')}"
				 creationComplete="linkBindableProperty(_visTool.visualization.enableAutoZoomToExtent, event.target, 'selected');"/>
	<mx:CheckBox label="{lang('Enable zoom and pan')}"
				 creationComplete="linkBindableProperty(_visTool.visualization.enableZoomAndPan, event.target, 'selected');"/>
	-->
	<ui:Indent label="{overrideZoomLabel}">
		<ui:TextInputWithPrompt id="overrideXMin" prompt="{lang('xMin')}" width="100%"/>
		<mx:VBox width="100%">
			<ui:TextInputWithPrompt id="overrideYMax" prompt="{lang('yMax')}" width="100%"/>
			<ui:TextInputWithPrompt id="overrideYMin" prompt="{lang('yMin')}" width="100%"/>
		</mx:VBox>
		<ui:TextInputWithPrompt id="overrideXMax" prompt="{lang('xMax')}" width="100%"/>
		<mx:Button id="useCurrentZoom" label="{lang('Use current zoom')}" click="setOverrideCoords(true)"/>
		<mx:Button label="{lang('Reset')}" click="setOverrideCoords(false)"/>
	</ui:Indent>
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.ui.IObjectWithDescription;
			import mx.controls.sliderClasses.Slider;
			import weave.ui.ControlPanel;
			import weave.api.getSessionState;
			import weave.menus.WeaveMenuItem;
			import weave.ui.SubMenu;
			import weave.api.ui.IPlotter;
			import weave.core.UIUtils;
			import weave.primitives.Bounds2D;
			import weave.visualization.layers.PlotManager;
			import weave.api.newDisposableChild;
			import weave.ui.VariableListController;
			import weave.visualization.layers.Visualization;
			import mx.managers.PopUpManager;
			import weave.api.core.ILinkableHashMap;
			import weave.ui.SessionStateEditor;
			import weave.api.linkBindableProperty;

			private function isEmpty(ac:*):Boolean
			{
				return !ac || !ac.length;
			}
			
			[Bindable] private var overrideZoomLabel:String;
			[Bindable] internal var _visualization:Visualization = null;
			public const controller:VariableListController = newDisposableChild(this, VariableListController);
			
			public function get selectedPlotterName():String
			{
				return controller.hashMap.getName(list.selectedItem as IPlotter);
			}
			
			public function get selectedPlotter():IPlotter
			{
				return list.selectedItem as IPlotter;
			}
			
			public function set visualization(value:Visualization):void
			{
				_visualization = value;
				controller.hashMap = _visualization.plotManager.plotters;
				_visualization.plotManager.enableAutoZoomToExtent.addGroupedCallback(this, function():void {
					if (_visualization.plotManager.enableAutoZoomToExtent.value)
						overrideZoomLabel = lang("Override auto zoom:");
					else
						overrideZoomLabel = lang("Override full extent:");
				}, true);
			}
			public function get visualization():Visualization
			{
				return _visualization;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				if (_visualization)
				{
					linkBindableProperty(_visualization.plotManager.overrideXMin, overrideXMin, 'text');
					linkBindableProperty(_visualization.plotManager.overrideYMin, overrideYMin, 'text');
					linkBindableProperty(_visualization.plotManager.overrideXMax, overrideXMax, 'text');
					linkBindableProperty(_visualization.plotManager.overrideYMax, overrideYMax, 'text');
					UIUtils.linkVisibility(this, _visualization.plotManager.enableAutoZoomToExtent, useCurrentZoom, true);
				}
				
				controller.reverse = true;
				controller.view = list;
				controller.labelFunction = getPlotterLabel;
				
				initAddLayerButton(addButton, function():Visualization { return visualization; });
			}
			
			private function getPlotterLabel(plotter:IPlotter):String
			{
				return getLabelWithDescription(_visualization.plotManager.plotters, plotter);
			}
			
			public static function getLabelWithDescription(hashMap:ILinkableHashMap, item:ILinkableObject):String
			{
				if (!item)
					return '';
				
				var plotterName:String = hashMap.getName(item);
				var label:String = plotterName;
				if (item is IObjectWithDescription)
					label += ': ' + (item as IObjectWithDescription).getDescription();
				return label;
			}
			
			private function setOverrideCoords(setOrUnset:Boolean):void
			{
				var pm:PlotManager = _visualization.plotManager;
				if (setOrUnset)
				{
					var b:Bounds2D = new Bounds2D();
					pm.zoomBounds.getDataBounds(b);
					pm.overrideXMin.value = b.xMin;
					pm.overrideYMin.value = b.yMin;
					pm.overrideXMax.value = b.xMax;
					pm.overrideYMax.value = b.yMax;
				}
				else
				{
					pm.overrideXMin.value = NaN;
					pm.overrideYMin.value = NaN;
					pm.overrideXMax.value = NaN;
					pm.overrideYMax.value = NaN;
				}
			}
			
			[Bindable]
			private var _minimumNumObjectsInList:int = -1;
			public function set minimumNumObjectsInList(value:int):void
			{
				_minimumNumObjectsInList = value;
			}
			
			private var _mouseDownTarget:*;
			private function onMouseDown(event:Event):void
			{
				_mouseDownTarget = event.target;
			}
			private function onDragStart(event:Event):void
			{
				if (_mouseDownTarget is Button || _mouseDownTarget is Slider)
					event.preventDefault();
			}
			
			public function set dragMoveEnabled(value:Boolean):void
			{
				// this value has to be stored for later because internalList may be null
				_dragMoveEnabled = value;
			}
			[Bindable] private var _dragMoveEnabled:Boolean = false;

			/**
			 * @param button
			 * @param visualization_or_function Either a Visualization or a Function that returns one.
			 */
			public static function initAddLayerButton(button:MenuButton, visualization_or_function:Object):void
			{
				function getLabel(item:WeaveMenuItem):String
				{
					return WeaveAPI.ClassRegistry.getDisplayName(item.data as Class);
				}
				function onClick(item:WeaveMenuItem):void
				{
					var vis:Visualization = visualization_or_function as Visualization;
					var vis_func:Function = visualization_or_function as Function;
					addPlotterAndEdit(vis || vis_func(), item.data as Class);
				}
				button.data = {
					children: function():Array {
						return WeaveAPI.ClassRegistry.getImplementations(IPlotter).map(
							function(impl:Class, i:*, a:*):* {
								return {
									data: impl,
									label: getLabel,
									click: onClick
								};
							}
						);
					}
				};
			}
			
			/**
			 * @return The newly created IPlotter, or null if it could not be created.
			 */
			public static function addPlotterAndEdit(visualization:Visualization, plotterType:Class, openEditor:Boolean = true):*
			{
				var hm:ILinkableHashMap = visualization.plotManager.plotters;
				var state:Object = getSessionState(visualization);
				var name:String = hm.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(plotterType));
				var plotter:IPlotter = hm.requestObject(name, plotterType, false) as IPlotter;
				if (!plotter)
					return null;
				
				if (openEditor)
					ControlPanel.openEditor(plotter, [visualization], [state]);
				return plotter;
			}
		]]>
	</mx:Script>
</mx:VBox>
