<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns="weave.editors.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*"
	>
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="200"/>
	</ui:Indent>
	<ui:Indent label="{lang('Source URL *')}">
		<ui:TextInputWithPrompt change="handleURLTextChange()" id="url" width="300" prompt="http://www.example.com/example.xls"/>
	</ui:Indent>
	
	<mx:HBox visible="{uploadSection.visible}" horizontalAlign="center" width="100%">
		<mx:Label fontWeight="bold" text="{lang('OR')}"/>
	</mx:HBox>
	<ui:Indent id="uploadSection" label="{lang('Open local XLS file *')}">
		<mx:Button label="{lang('Browse')}" click="browseForFiles()"/>
		<mx:Label id="uploadMessg" color="0xFF0000" text="{lang('loaded')}" visible="false"/>
	</ui:Indent>
	
	<ui:Indent label="{lang('Key Type *')}">
		<ui:KeyTypesMenu id="keyTypeSelector"
						 creationComplete="{if(target)
						 {
						 (event.target as KeyTypesMenu).addKeyTypeToMenu(target.keyType.value);
						 (event.target as KeyTypesMenu).selectedItem = target.keyType.value;
						 }}"/>
	</ui:Indent>
	<ui:Indent label="{lang('Key Column')}">
		<mx:TextInput id="keyColumnName" width="200" toolTip="{lang('enter the column name that uniquely identifies each row in the data set')}"/>
	</ui:Indent>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Button enabled="false" label="{lang('View data in Grid')}" id="showGridButton" click="showGrid()"/>
	<mx:Script>
		<![CDATA[
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.DataSources.XLSDataSource;
			import weave.editors.managers.EditDataGridPanel;
			
			override protected function createChildren():void
			{
				super.createChildren();
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(XLSDataSource));
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
			}
			
			[Bindable] private var target:XLSDataSource = null;
			public function setTarget(object:ILinkableObject):void
			{
				target = object as XLSDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					url.text = target.url.value;
					keyColumnName.text = target.keyColName.value;
					keyTypeSelector.addKeyTypeToMenu(target.keyType.value);
					keyTypeSelector.selectedKeyType = target.keyType.value;
					uploadSection.visible = false;
					showGridButton.visible = false;
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
				}
			}
			
			public function hasPendingChanges():Boolean
			{
				return StandardLib.asString(target.url.value) != StandardLib.asString(url.text)
					|| StandardLib.asString(target.keyColName.value) != StandardLib.asString(keyColumnName.text)
					|| StandardLib.asString(target.keyType.value) != StandardLib.asString(keyTypeSelector.selectedKeyType);
			}
			
			public function applyChanges():void
			{
				target.url.value = null; // temporary solution, fixes bug where local file update won't be detected
				target.url.value = url.text;
				target.keyColName.value = keyColumnName.text;
				target.keyType.value = keyTypeSelector.selectedKeyType;
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text || (!url.text && !xlsFile))
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				//if an XLS file has been loaded we create and add it to a CSVDataSource
				if (xlsFile)
				{
					var csvSource:CSVDataSource = WeaveAPI.globalHashMap.requestObject(sourceName.text, CSVDataSource, false);
					if (!csvSource)
					{
						Alert.show(lang("Unexpected problem. Unable to add the data source."));
						return null;
					}
					csvSource.url.value = url.text;
					csvSource.setCSVDataString(WeaveAPI.CSVParser.createCSV(xlsDataArray));
					csvSource.keyColName.value = keyColumnName.text;
					csvSource.keyType.value = keyTypeSelector.selectedKeyType;
					return csvSource;
				}
				
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, XLSDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
			
			
			
			
			private var _fileLoader:FileReference = null;
			
			
			/**
			 * browseForfiles: opens up a file browser window to upload CSV files 
			 **/
			private function browseForFiles():void
			{
				try
				{
					if (_fileLoader == null)
					{
						_fileLoader = new FileReference();
						_fileLoader.addEventListener(Event.SELECT, handleDatasetSelected);
						_fileLoader.addEventListener(Event.COMPLETE, handleDatasetLoaded);
					}
					
					_fileLoader.browse([new FileFilter("XLS", "*.xls")]);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			
			private function handleDatasetSelected(event:Event):void
			{
				_fileLoader.load();
			}
			
			
			
			
			
			public var xlsDataArray:Array = [];

			//this will hold the header columns as was loaded when the data is initially loaded.
			//This is done so that the data gird shows the columns in the same order it was uploaded.
			private var headerArray:Array = [];
			
			public var xlsFile:ExcelFile = null;
			private function handleDatasetLoaded(event:Event):void
			{
				// the file extension should be at the end of the file minus the four characters for the extension (i.e. ".csv" )
				var extensionPosition:int = _fileLoader.name.length - 4;
				
				xlsFile = new ExcelFile();
				try
				{				
					if (_fileLoader.name.search(".xls") == extensionPosition || _fileLoader.name.search(".XLS") == extensionPosition )
					{
						xlsFile.loadFromByteArray(event.target.data);
						
						
						xlsDataArray = convertSheetsToArrays(xlsFile.sheets[0]);
						
						uploadMessg.visible = true;
						showGridButton.enabled=true;
						//clearing the Source URL text input
						url.text = "";
					}
				}
				catch (e:Error)
				{
					reportError(e);
				}
				
				
			}
			
			private function showGrid():void
			{
				if (xlsFile.sheets.length == 0)
				{
					Alert.show(lang("No data found"));
					return;
				}
				var grid:EditDataGridPanel = PopUpManager.createPopUp(this, EditDataGridPanel) as EditDataGridPanel;
				grid.setRows(xlsDataArray, false);
				
				PopUpManager.bringToFront(grid);
			}
			
			
			private function handleURLTextChange():void
			{
				uploadMessg.visible = false;
				showGridButton.enabled = false;
				xlsFile = null;
			}
			
			private function convertSheetsToArrays(xlsSheet:Sheet):Array
			{
				var paramArray:Array = new Array();
				
				var xlsArrayCollection:ArrayCollection = xlsSheet.values;
				
				for (var i:int = 0; i < xlsArrayCollection.length; i++)
				{
					paramArray[i] = [];
					for (var j:int = 0; j < xlsArrayCollection[i].length; j++)
					{
						paramArray[i].push((xlsArrayCollection[i][j] as Cell).value);
					}
				}
				
				return paramArray;
			}
			
		]]>
	</mx:Script>
</mx:VBox>