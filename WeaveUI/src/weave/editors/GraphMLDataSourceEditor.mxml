<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.editors.*"
    verticalScrollPolicy="off"
    horizontalScrollPolicy="off"
    creationPolicy="all"
    implements="weave.api.ui.IDataSourceEditor" xmlns:ui="weave.ui.*"
    >
    <mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
    <ui:Indent label="{lang('Source Name *')}">
        <mx:TextInput id="sourceName" focusOut=
            "nodeKeyTypeSelector.addKeyTypeToMenu(sourceName.text+'Nodes');
             edgeKeyTypeSelector.addKeyTypeToMenu(sourceName.text+'Edges');"  width="100%"/>
    </ui:Indent>
    <ui:Indent label="{lang('Source URL')}">
        <ui:TextInputWithPrompt change="handleUrlInput()" id="sourceUrl" width="100%" prompt="http://www.example.com/example.graphml"/>
		<mx:Button label="{lang('Open file')}" click="fileAttacher.browseAndAttachFile()"/>
        <mx:Label id="uploadMessage" color="0xFF0000" visible="{uploadMessage.text?true:false}" includeInLayout="{uploadMessage.text?true:false}"/>
    </ui:Indent>

    <ui:Indent label="{lang('Nodes')}">
        <mx:VBox>
            <ui:Indent label="{lang('KeyType *')}">
                <ui:KeyTypesMenu id="nodeKeyTypeSelector"/>
            </ui:Indent>
            <ui:Indent label="{lang('Key Property')}">
                <ui:CustomComboBox id="nodeKeyPropertyInput" editable="true" width="100%"
								   toolTip="{lang('Enter the name of the property that uniquely identifies each node in the graph (Default: Use the id property.)')}"/>
				<!-- mx:Label color = "0xFF0000" text="{lang{'Non-unique'}}" visible="{!(target == null || !target.nodeKeyPropertyValid)}"/ -->
            </ui:Indent>
        </mx:VBox>
    </ui:Indent>

    <ui:Indent label="{lang('Edges')}">
        <mx:VBox>
            <ui:Indent label="{lang('KeyType *')}">
                <ui:KeyTypesMenu id="edgeKeyTypeSelector"/>
            </ui:Indent>
            <ui:Indent label="{lang('Key Property')}">
                <ui:CustomComboBox id="edgeKeyPropertyInput" editable="true" width="100%"
								   toolTip="{lang('Enter the name of the property that uniquely identifies each node in the graph (Default: Use the id property.)')}"/>
				<!-- mx:Label color = "0xFF0000" text="{lang{'Non-unique'}}" visible="{!(target == null || !target.edgeKeyPropertyValid)}"/ -->
            </ui:Indent>
        </mx:VBox>
    </ui:Indent>


    <mx:Spacer/>
    <mx:Label text="{lang('* = required')}"/>
    <mx:Script>
        <![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.getCallbackCollection;
			import weave.api.newDisposableChild;
			import weave.api.registerDisposableChild;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.core.LinkableWatcher;
			import weave.data.DataSources.GraphMLDataSource;
			import weave.services.FileAttacher;
			import weave.ui.BusyIndicator;
            
            private const busyIndicator:BusyIndicator = new BusyIndicator(watcher);
			private const watcher:LinkableWatcher = registerDisposableChild(this, new LinkableWatcher(GraphMLDataSource, null, handleTarget));
			private const fileAttacher:FileAttacher = new FileAttacher(watcher, [new FileFilter("GraphML", "*.graphml")], handleFileLoad, handleFileError);
			
            override protected function createChildren():void
            {
                super.createChildren();
				
                addChild(busyIndicator);
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(GraphMLDataSource));

                nodeKeyPropertyInput.labelFunction = nodeKeyLabelFunction;
                edgeKeyPropertyInput.labelFunction = edgeKeyLabelFunction;

                nodeKeyTypeSelector.addKeyTypeToMenu(sourceName.text + 'Nodes');
                nodeKeyTypeSelector.selectedKeyType = sourceName.text + 'Nodes';
                edgeKeyTypeSelector.addKeyTypeToMenu(sourceName.text + 'Edges');
                edgeKeyTypeSelector.selectedKeyType = sourceName.text + 'Edges';
            }
			
			private function handleUrlInput():void
			{
				if (!target)
					setTarget(newDisposableChild(this, GraphMLDataSource));
				
				// Note: because we're modifying the session state here, [Cancel] button does not work properly in DataSourceManager.
				target.sourceUrl.value = sourceUrl.text;
			}
            
            private function nodeKeyLabelFunction(item:Object):String
            {
                var key:String = item as String;
                
                if (target)
                {
                    var label:String = target.nodeSchema[key].name;
                    if (label)
                        return label + " (" + key + ")";
                    else
                        return key;
                }
                return "";
            }

            private function edgeKeyLabelFunction(item:Object):String
            {
                var key:String = item as String;
                
                if (target)
                {
                    var label:String = target.edgeSchema[key].name;
                    if (label)
                        return label + " (" + key +")";
                    else
                        return key;
                }
                return "";
            }
            
			private function get target():GraphMLDataSource
			{
				return watcher.target as GraphMLDataSource;
			}
			
            public function setTarget(object:ILinkableObject):void
            {
				watcher.target = object;
			}
			
			private function handleTarget():void
			{
                if (!parent)
                {
                    callLater(handleTarget);
                    return;
                }
                
                if (!target)
					return;
				
                if (WeaveAPI.globalHashMap.getName(target))
                {
                    sourceName.text = WeaveAPI.globalHashMap.getName(target);
                    sourceName.editable = false;
                    sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
                }
                
				if (sourceUrl.text != target.sourceUrl.value)
				{
					uploadMessage.text = '';
	                sourceUrl.text = target.sourceUrl.value;
				}

                nodeKeyPropertyInput.dataProvider = new ArrayCollection(target.nodeProperties || []);
                nodeKeyPropertyInput.selectedItem = target.nodeKeyPropertyName.value;
                
                nodeKeyTypeSelector.addKeyTypeToMenu(target.nodeKeyType.value);
                nodeKeyTypeSelector.selectedKeyType = target.nodeKeyType.value;

                edgeKeyPropertyInput.dataProvider = new ArrayCollection(target.edgeProperties || []);
                edgeKeyPropertyInput.selectedItem = target.edgeKeyPropertyName.value;

                edgeKeyTypeSelector.addKeyTypeToMenu(target.edgeKeyType.value);
                edgeKeyTypeSelector.selectedKeyType = target.edgeKeyType.value;
            }
			
			private function eq(a:String, b:String):Boolean { return StandardLib.asString(a) == StandardLib.asString(b); }
            
            public function hasPendingChanges():Boolean
            {
                return !eq(target.sourceUrl.value, sourceUrl.text)
                	|| !eq(target.nodeKeyType.value, nodeKeyTypeSelector.selectedKeyType)
                    || !eq(target.nodeKeyPropertyName.value, nodeKeyPropertyInput.selectedItem as String)
					|| !eq(target.edgeKeyType.value, edgeKeyTypeSelector.selectedKeyType)
                    || !eq(target.edgeKeyPropertyName.value, edgeKeyPropertyInput.selectedItem as String);
            }

            public function applyChanges():void
            {
                target.nodeKeyType.value = nodeKeyTypeSelector.selectedKeyType;
                target.nodeKeyPropertyName.value = nodeKeyPropertyInput.selectedItem as String;

                target.edgeKeyType.value = edgeKeyTypeSelector.selectedKeyType;
                target.edgeKeyPropertyName.value = edgeKeyPropertyInput.selectedItem as String;

				target.sourceUrl.value = null; // temporary solution, fixes bug where local file update won't be detected
                target.sourceUrl.value = sourceUrl.text;
            }
            
            public function createDataSource():IDataSource
            {
                if (!sourceName.text || !nodeKeyTypeSelector.selectedKeyType || !edgeKeyTypeSelector.selectedKeyType)
                {
                    Alert.show(lang("Please fill all required fields"), lang("Error"));
                    return null;
                }
                if (WeaveAPI.globalHashMap.getObject(sourceName.text))
                {
                    Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
                    return null;
                }
				
				if (target)
	                setTarget( WeaveAPI.globalHashMap.requestObjectCopy(sourceName.text, target) );
				else
					setTarget( WeaveAPI.globalHashMap.requestObject(sourceName.text, GraphMLDataSource, false) );

                if (!target)
                {
                    Alert.show(lang("Unexpected problem. Unable to add the data source."));
                    return null;
                }

                applyChanges();

                return target;
            }
            
            private function handleFileLoad(url:String):void
            {
                //weaveTrace("File attached.");

                sourceUrl.text = url;
				uploadMessage.text = lang('Loaded');
				handleUrlInput();
            }
			private function handleFileError(e:Error):void
			{
				uploadMessage.text = lang('Error');
				reportError(e);
			}
        ]]>
    </mx:Script>
</mx:VBox>