<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox  xmlns:mx="http://www.adobe.com/2006/mxml"
		  xmlns:ui="weave.ui.*"
		  xmlns="weave.editors.*"
		  label="{lang('ScatterPlot')}"
		  implements="weave.api.ui.ILinkableObjectEditor">
	<mx:Script>
		<![CDATA[
			import mx.core.mx_internal;
			import mx.events.SliderEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.unlinkBindableProperty;
			import weave.compiler.StandardLib;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.utils.PlotterUtils;
			import weave.visualization.plotters.ScatterPlotPlotter;
			
			use namespace mx_internal;
			
			[Bindable] private var target:ScatterPlotPlotter = null;
			
			public function setTarget(object:ILinkableObject):void
			{
				if (target)
				{
					unlinkBindableProperty(target.fill.alpha.defaultValue, fillAlphaSlider, "value");
					unlinkBindableProperty(target.line.alpha.defaultValue, lineAlphaSlider, "value");
					unlinkBindableProperty(target.colorNegative, colorNegativePicker, 'selectedColor');
					unlinkBindableProperty(target.colorPositive, colorPositivePicker, 'selectedColor');
					unlinkBindableProperty(target.colorBySize, colorBySizeCheckBox, 'selected');
					unlinkBindableProperty(target.sourceProjection, sourceProjection, 'text');
					unlinkBindableProperty(target.destinationProjection, destinationProjection, 'text');
					target.sourceProjection.removeCallback(handleProjections);
					target.destinationProjection.removeCallback(handleProjections);
					target.fill.color.removeCallback(handleColorColumnChange);
					target.fill.color.removeCallback(handlePlotterFillColor);
					getCallbackCollection(target).removeCallback(handlePlotterChange);
					
					dataXCol.dynamicObject = null;
					dataYCol.dynamicObject = null;
					colorCol.columnWrapper = null;
					sizeCol.dynamicObject = null;
				}
				
				target = object as ScatterPlotPlotter;
				
				if (target)
				{
					// make sure components are not null
					if (!initialized)
						initialize();
					linkBindableProperty(target.fill.alpha.defaultValue, fillAlphaSlider, "value");
					linkBindableProperty(target.line.alpha.defaultValue, lineAlphaSlider, "value");
					linkBindableProperty(target.colorNegative, colorNegativePicker, 'selectedColor');
					linkBindableProperty(target.colorPositive, colorPositivePicker, 'selectedColor');
					linkBindableProperty(target.colorBySize, colorBySizeCheckBox, 'selected');
					linkBindableProperty(target.sourceProjection, sourceProjection, 'text');
					linkBindableProperty(target.destinationProjection, destinationProjection, 'text');
					target.sourceProjection.addGroupedCallback(this, handleProjections, true);
					target.destinationProjection.addGroupedCallback(this, handleProjections, true);
					target.fill.color.addImmediateCallback(this, handleColorColumnChange, true);
					target.fill.color.addGroupedCallback(this, handlePlotterFillColor);
					getCallbackCollection(target).addGroupedCallback(this, handlePlotterChange, true);
					
					dataXCol.dynamicObject = target.dataX;
					dataYCol.dynamicObject = target.dataY;
					colorCol.columnWrapper = target.fill.color;
					sizeCol.dynamicObject = target.sizeBy;
				}
			}
			
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			private function handleProjections():void
			{
				// show or hide controls depending on whether or not a projection is specified
				if (!UIUtils.hasFocus(sourceProjection) && !UIUtils.hasFocus(destinationProjection))
					enableReprojection.selected = !!(target.sourceProjection.value || target.destinationProjection.value);
			}
			
			private var _prevGlobalColorColumnName:String = null;
			private function handleColorColumnChange():void
			{
				var newName:String = target.fill.color.internalDynamicColumn.globalName;
				if (newName)
					_prevGlobalColorColumnName = newName;
			}
			
			private function handlePlotterChange():void
			{
				// when the plotter settings change, update the slider interface
				if (target.colorBySize.value)
				{
					sizeBySlider.thumbCount = 1;
					sizeBySlider.value = target.maxScreenRadius.value;
				}
				else if (target.sizeBy.internalObject)
				{
					sizeBySlider.thumbCount = 2;
					sizeBySlider.values = [target.minScreenRadius.value, target.maxScreenRadius.value];
				}
				else
				{
					sizeBySlider.thumbCount = 1;
					sizeBySlider.value = target.defaultScreenRadius.value;
				}
			}
			private function handleSizeSliderChange(event:SliderEvent):void
			{
				if (!UIUtils.hasFocus(sizeBySlider))
					return;
				
				// when user interacts with slider, update session state
				if (target.colorBySize.value)
				{
					target.maxScreenRadius.value = event.value;
				}
				else if (target.sizeBy.internalObject)
				{
					if (event.thumbIndex == 0)
					{
						target.minScreenRadius.value = event.value;
					}
					else
					{
						target.maxScreenRadius.value = event.value;
					}
				}
				else
				{
					target.defaultScreenRadius.value = event.value;
				}
			}
			private function handlePlotterFillColor():void
			{
				overrideColorCheckBox.setSelected(!target.fill.color.getInternalColumn());
				var color:Number = StandardLib.asNumber(target.fill.color.defaultValue.value);
				if (isFinite(color))
					overrideColorPicker.selectedColor = color;
			}
			private function handleOverrideColor(event:Event):void
			{
				if (!UIUtils.hasFocus(overrideColorCheckBox) && !overrideColorPicker.hasFocus && !UIUtils.hasFocus(colorBySizeCheckBox))
					return;
				if (overrideColorCheckBox.selected)
				{
					colorBySizeCheckBox.selected = false;
					target.fill.color.defaultValue.value = overrideColorPicker.selectedColor;
					target.fill.color.internalDynamicColumn.removeObject();
				}
				else
				{
					target.fill.color.defaultValue.value = NaN;
					target.fill.color.internalDynamicColumn.requestGlobalObject(_prevGlobalColorColumnName, ColorColumn, false);
				}
			}
		]]>
	</mx:Script>
	<ui:DynamicColumnComponent id="dataXCol" label="{lang('X')}"/>
	<ui:DynamicColumnComponent id="dataYCol" label="{lang('Y')}"/>
	<ui:DynamicColumnComponent id="colorCol" label="{lang('Color')}" showLinkControl="false"/>
	<ui:DynamicColumnComponent id="sizeCol" label="{lang('Size')}"/>
	<ui:Indent label="{lang('Point size')}">
		<mx:HSlider id="sizeBySlider"
					liveDragging="true"
					width="100%"
					thumbCount="2"
					snapInterval="1"
					minimum="1" 
					maximum="60"
					tickValues="[5,10,15,20,25,30,35,40,45,50,55,60]"
					change="handleSizeSliderChange(event)"
					mouseDown="event.target.setFocus(); event.stopImmediatePropagation();"/>
	</ui:Indent>
	<ui:Indent label="{lang('Point opacity')}">
		<mx:HSlider id="fillAlphaSlider"
					width="100%" 
					snapInterval="0.05"
					tickInterval=".25"
					dataTipFormatFunction="{(function():Function{return PlotterUtils.alphaSliderFormatFunction;}())}"
					minimum="0" maximum="1"
					liveDragging="true"/>
	</ui:Indent>
	<ui:Indent label="{lang('Outline opacity')}">
		<mx:HSlider id="lineAlphaSlider"
					width="100%" 
					snapInterval="0.05"
					tickInterval=".25"
					dataTipFormatFunction="{(function():Function{return PlotterUtils.alphaSliderFormatFunction;}())}"
					minimum="0" maximum="1"
					liveDragging="true"/>
	</ui:Indent>
	
	<mx:HBox>
		<mx:CheckBox id="overrideColorCheckBox"
					 label="{lang('Override global color')}"
					 change="handleOverrideColor(event)"/>
		<ui:CustomColorPicker id="overrideColorPicker"
							  enabled="{overrideColorCheckBox.selected}"
							  selectedColor="0xE0E0E0"
							  change="handleOverrideColor(event)"/>
	</mx:HBox>
	
	<ui:CheckBoxWithNestedOptions id="colorBySizeCheckBox" label="{lang('Color by positive or negative \'size\' column values')}"
								  change="if (colorBySizeCheckBox.selected) overrideColorCheckBox.setSelected(false); else handleOverrideColor(event);">
		<ui:HelpComponent>
			Select this option to highlight the differences in your 'size' column.
			
			* All values greater than 0 radius will be one color.
			
			* All values less than 0 radius will be another color.
			
			* If you have a size of 0 radius the circle will not be drawn.
			
			If a size column is not specified, nothing will be drawn in this mode.
		</ui:HelpComponent>
		
		<ui:Indent label="{lang('Color for positive size values')}">
			<ui:CustomColorPicker id="colorPositivePicker"
								  enabled="{colorBySizeCheckBox.selected}" />
		</ui:Indent>
		<ui:Indent label="{lang('Color for negative size values')}">
			<ui:CustomColorPicker id="colorNegativePicker" 
								  enabled="{colorBySizeCheckBox.selected}" />
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>
	
	<ui:CheckBoxWithNestedOptions id="enableReprojection" label="{lang('Geographic reprojection')}">
		<ui:change>
			<![CDATA[
			if (UIUtils.hasFocus(enableReprojection))
			{
				if (enableReprojection.selected)
				{
					// recall previously saved values
					sourceProjection.text = sourceProjection.data as String;
					destinationProjection.text = destinationProjection.data as String;
				}
				else
				{
					// save values for later
					sourceProjection.data = sourceProjection.text;
					destinationProjection.data = destinationProjection.text;
					sourceProjection.text = destinationProjection.text = '';
				}
			}
			]]>
		</ui:change>
		<ui:Indent label="from" translate="true">
			<ui:TextInputWithPrompt id="sourceProjection" width="100%" prompt="{lang('Source projection')}"/>
			<mx:Button label="{lang('Lat/Long')}" click="sourceProjection.text = 'EPSG:4326';"/>
		</ui:Indent>
		<ui:Indent label="to" translate="true">
			<ui:TextInputWithPrompt id="destinationProjection" width="100%" prompt="{lang('Destination projection')}"/>
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>
</mx:VBox>
