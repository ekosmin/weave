<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
	xmlns="weave.editors.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="weave.ui.*"
	xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	creationPolicy="all"
	implements="weave.api.ui.IDataSourceEditor"
	>
	<ui:HelpComponent id="helpComponent" visible="false" includeInLayout="false">
		<ui:htmlText>
			<![CDATA[
			<b>Check your data!</b>
			<p>The Grid shows you how we interpret your data.
				Check the rows and columns to confirm that they are in the correct format.
				Check the Unique Identifier Column and the Delimiter Combo Box.
				Click next if your data is in the right format.</p>
			<b>Key Column</b>
			<p>This is the name of the column header that uniquely identifies each row of your dataset.
				We have computed the columns that contain unique values and set the Unique Column Identifier to the first option.
				You can set it any other available option within the Combo Box.
				If you are not sure which column to select or if you don't see this combo box you can ignore for now.</p>
			<b>Delimiter</b>
			<p>We assume that your data is delimited so that we can correctly identify the columns within the dataset.
				When you load the data, we do a quick check to compute the delmiter and then parse the data.
				Use the grid to check if the data has been parsed correctly.
				If the wrong delimiter is used you can select from the combo box the commonly used delimiters (Comma, Semi Colon, Tab, Space).
				You can also type a single character delimiter.
				The grid displays the parsed data every time you change the delimiter</p>
			]]>
		</ui:htmlText>
	</ui:HelpComponent>
	
	<mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
	<ui:Indent group="{indentGroup}" label="{lang('Source Name *')}">
		<mx:TextInput id="sourceName" focusOut="keyTypeSelector.addKeyTypeToMenu(sourceName.text)" width="100%"/>
	</ui:Indent>
	<ui:Indent group="{indentGroup}" label="{lang('Source URL')}">
		<ui:TextInputWithPrompt change="handleURLTextChange()" id="url" width="100%" prompt="http://www.example.com/example.csv"/>
		<mx:Button label="{lang('Open file')}" click="append = false; browseForFiles()"/>
	</ui:Indent>
	<ui:CustomTabNavigator id="tabNav" width="100%" height="100%"
						   initialize="UIUtils.pad(event, 5);"
						   change="editorTabChanged(event)" enabled="{!url.text}">
		<mx:VBox id="tableTab" label="{lang('Table')}">
			<CustomDataGrid:CustomSparkDataGrid id="tableEditor"  width="100%" height="100%" editable="true" gridItemEditorSessionStart="handleItemEditStart(event)" gridItemEditorSessionSave="handleGridItemEditEnd(event)"/>
		</mx:VBox>
		<mx:VBox id="textTab" label="{lang('Text')}">
			<ui:CodeEditor id="textEditor" width="100%" height="100%"/>
		</mx:VBox>
	</ui:CustomTabNavigator>
	<ui:Indent label="{lang('Delimiter')}" enabled="{!url.text}">
		<ui:CustomComboBox id="delimiterComboBox"
						   editable="true"
						   openDuration="0"
						   closeDuration="0"
						   enabled="{!tableEdited}"
						   dataProvider="{delimiters}"
						   labelFunction="{delimiterLabelFunction}"
						   change="delimiterChanged()"/>
		<mx:Button label="{lang('Append file')}" click="append = true; browseForFiles()"/>
	</ui:Indent>
	<mx:Button id="editMetadataButton" label="{lang('Edit metadata')}" click="editMetadata()" enabled="false"/>

	<ui:Indent label="{lang('Key Column')}">
		<mx:HBox horizontalGap="0">
			<ui:TextInputWithPrompt id="keyColumnName"
									prompt="{keyColumnName.text ? null : lang(AUTO_GENERATED)}"
									toolTip="{lang('Enter the name of the column that uniquely identifies each row in the data set')}"/>
			<ui:MenuButton id="keyColumnMenu"
						   alignRight="true"
						   data="{getKeyColumnMenuItems as Function}"
						   toolTip="{lang('Select a key column')}"
						   width="22" cornerRadius="0"
						   enabled="{textEditor.text || tableEdited}"
						   visible="{!url.text}"/>
		</mx:HBox>
	</ui:Indent>
	<ui:Indent label="{lang('Key Type *')}">
		<ui:KeyTypesMenu id="keyTypeSelector"/>
	</ui:Indent>
	<mx:Spacer/>
	<mx:Label text="{lang('* = required')}"/>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.mx_internal;
			
			import spark.events.GridItemEditorEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IDataSource;
			import weave.api.getSessionState;
			import weave.api.reportError;
			import weave.compiler.StandardLib;
			import weave.core.UIUtils;
			import weave.data.CSVParser;
			import weave.data.DataSources.CSVDataSource;
			import weave.menus.WeaveMenuItem;
			import weave.ui.BusyIndicator;
			import weave.ui.CSVMetadataEditor;
			import weave.ui.ControlPanel;
			import weave.ui.DraggablePanel;
			import weave.ui.IndentGroup;
			import weave.utils.VectorUtils;
			
			[Bindable] private var indentGroup:IndentGroup = new IndentGroup();
			
			private var busyIndicator:BusyIndicator = new BusyIndicator();

			private var target:CSVDataSource = null;
			
			[Bindable] private var tableEdited:Boolean = false;
			private var append:Boolean = false;
			
			private const delimiters:Array = [',', ';', ' ', '\t'];
			private function delimiterLabelFunction(char:String):String
			{
				if (char == ',')
					return lang("Comma");
				if (char == ';')
					return lang("Semicolon");
				if (char == ' ')
					return lang("Space");
				if (char == '\t')
					return lang("Tab");
				return char;
			}
			
			private var _fileLoader:FileReference = null;

			private function get parser():CSVParser
			{
				var delim:String = delimiterComboBox.selectedItem as String || delimiterComboBox.text || ',';
				return new CSVParser(false, delim);
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				delimiterComboBox.addEventListener(KeyboardEvent.KEY_DOWN, handleComboKeyDown, true);
				addChild(busyIndicator);
				busyIndicator.visible = false;
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(CSVDataSource));
				keyTypeSelector.addKeyTypeToMenu(sourceName.text);
				keyTypeSelector.selectedKeyType = sourceName.text;
				tableEditor.setRows(null);
				tabNav.selectedChild = textTab;
				textEditor.setFocus();
			}
			
			private static const AUTO_GENERATED:String = lang("Auto-generated");
			private function getKeyColumnMenuItems():Array
			{
				function setKeyColumnName(item:WeaveMenuItem):void {
					keyColumnName.text = item.data as String;
					keyTypeSelector.addKeyTypeToMenu(item.data as String);
				}
				var rows:Array = getRows();
				var header:Array = (rows && rows[0]) || [];
				return WeaveMenuItem.createItems([
					{label: AUTO_GENERATED, click: setKeyColumnName},
					header.map(function(name:String, i:*, a:*):* {
						return {label: name, click: setKeyColumnName, data: name};
					})
				]);
			}

			private function handleComboKeyDown(event:Event):void
			{
				delimiterComboBox.mx_internal::getTextInput().selectRange(0, int.MAX_VALUE);
			}
			
			public function setTarget(object:ILinkableObject):void
			{
				target = object as CSVDataSource;
				
				if (!parent)
				{
					callLater(setTarget, arguments);
					return;
				}
				
				if (target)
				{
					editMetadataButton.enabled = true;
					sourceName.text = WeaveAPI.globalHashMap.getName(target);
					url.text = target.url.value;
					keyColumnName.text = target.keyColName.value;
					keyTypeSelector.addKeyTypeToMenu(target.keyType.value);
					keyTypeSelector.selectedKeyType = target.keyType.value;
					sourceName.editable = false;
					sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.")
					handleURLTextChange();
					if (!url.text)
					{
						var rows:Array = target.csvData.getSessionState() as Array;
						tabNav.selectedChild = tableTab;
						tabNav.validateProperties();
						tableEditor.setRows(rows);
						tableEdited = true;
						busyIndicator.visible = false;
						if (!rows)
							tabNav.selectedChild = textTab;
					}
				}
			}

			private function editorTabChanged(event:Event):void
			{
				if (tabNav.selectedChild === tableTab)
					textToTable();
				else if (tabNav.selectedChild === textTab)
					tableToText();
			}
			
			private function tableToText():void
			{
				textEditor.text = parser.createCSV(tableEditor.getRows());
				tableEdited = false;
			}
			
			private function textToTable():void
			{
				tableEditor.setRows(parser.parseCSV(textEditor.text));
			}

			private function delimiterChanged():void
			{
				if (!delimiterComboBox.text || delimiterComboBox.text == '"')
					delimiterComboBox.selectedItem = ',';
				if (textEditor.text)
				{
					textToTable();
					tabNav.selectedChild = tableTab;
				}
			}

			private var oldValue:String;
			private function handleItemEditStart(event:GridItemEditorEvent):void
			{
				oldValue = (event.currentTarget as CustomSparkDataGrid).dataProvider[event.rowIndex][event.column.dataField];				
			}
			
			private function handleGridItemEditEnd(event:GridItemEditorEvent):void
			{
				var newValue:String = (event.currentTarget as CustomSparkDataGrid).dataProvider[event.rowIndex][event.column.dataField];
				tableEdited ||= oldValue != newValue;
				if (tableEdited)
					callLater(delimiterComboBox.close);
			}
			
			public function hasPendingChanges():Boolean
			{
				return StandardLib.asString(target.url.value) != StandardLib.asString(url.text)
					|| StandardLib.asString(target.keyColName.value) != StandardLib.asString(keyColumnName.text)
					|| StandardLib.asString(target.keyType.value) != StandardLib.asString(keyTypeSelector.selectedKeyType)
					|| WeaveAPI.SessionManager.computeDiff(getSessionState(target.csvData), getRows()) !== undefined;
			}

			public function applyChanges():void
			{
				target.url.value = null; // temporary solution, fixes bug where local file update won't be detected
				target.url.value = url.text;
				target.keyColName.value = keyColumnName.text;
				target.keyType.value = keyTypeSelector.selectedKeyType;
				target.csvData.setSessionState(getRows());
			}
			
			public function createDataSource():IDataSource
			{
				if (!sourceName.text || (!url.text && !(textEditor.text || tableEdited)) || !keyTypeSelector.selectedKeyType)
				{
					Alert.show(lang("Please fill all required fields"), lang("Error"));
					return null;
				}
				if (WeaveAPI.globalHashMap.getObject(sourceName.text))
				{
					Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
					return null;
				}
				target = WeaveAPI.globalHashMap.requestObject(sourceName.text, CSVDataSource, false);
				if (!target)
				{
					Alert.show(lang("Unexpected problem. Unable to add the data source."));
					return null;
				}
				applyChanges();
				return target;
			}
			
			/**
			* browseForfiles: opens up a file browser window to upload CSV files 
			**/
			private function browseForFiles():void
			{
				try
				{
					if (_fileLoader == null)
					{
						_fileLoader = new FileReference();
						_fileLoader.addEventListener(Event.SELECT, csvFileSelectedHandler);
						_fileLoader.addEventListener(ProgressEvent.PROGRESS, handleProgress);
						_fileLoader.addEventListener(Event.COMPLETE, csvFileLoadCompleteHandler);
						_fileLoader.addEventListener(IOErrorEvent.IO_ERROR, fileErrorHandler);
					}
					
					_fileLoader.browse([new FileFilter("CSV", "*.csv"), new FileFilter("TSV", "*.tsv"), new FileFilter("All files", "*")]);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			private function csvFileSelectedHandler(event:Event):void
			{
				// Show busy indicator until parser finishes (handleCSVParser)
				busyIndicator.visible = true;
				var nameEqualsKeyType:Boolean = sourceName.text == keyTypeSelector.selectedKeyType;
				
				if (sourceName.editable && (!append || !textEditor.text))
				{
					sourceName.text = _fileLoader.name;
					if (nameEqualsKeyType)
						keyTypeSelector.selectedKeyType = _fileLoader.name;
				}
				keyTypeSelector.addKeyTypeToMenu(_fileLoader.name);
				_fileLoader.load();
				WeaveAPI.ProgressIndicator.addTask(_fileLoader);
			}
			
			private function handleProgress(event:ProgressEvent):void
			{
				WeaveAPI.ProgressIndicator.updateTask(_fileLoader, event.bytesLoaded / event.bytesTotal);
			}
			
			private function csvFileLoadCompleteHandler(event:Event):void
			{
				if (append)
				{
					appendRows(parser.parseCSV(String(_fileLoader.data)));
				}
				else
				{
					url.text = WeaveAPI.URLRequestUtils.saveLocalFile(_fileLoader.name, _fileLoader.data);
					handleURLTextChange();
				}
				
				busyIndicator.visible = false;

				WeaveAPI.ProgressIndicator.removeTask(_fileLoader);
			}
			
			private function fileErrorHandler(event:IOErrorEvent):void
			{
				busyIndicator.visible = false;
				var fileRef:FileReference = event.target as FileReference;
				reportError(
					"File upload failed",
					"File: " + fileRef.name + "\n" + "Size: " + fileRef.size + "\n" + event.text
				);
			}

			public function setText(text:String, delimiter:String):void
			{
				delimiterComboBox.selectedItem = delimiter;
				if (!delimiterComboBox.selectedItem)
					delimiterComboBox.text = delimiter;
				tabNav.selectedChild = textTab;
				tabNav.validateProperties();
				textEditor.text = text;
				tabNav.selectedChild = tableTab;
			}
			
			private function appendRows(rowsToAppend:Array):void
			{
				tabNav.selectedChild = tableTab;
				tabNav.validateProperties();
				
				var rows:Array = getRows();
				if (!rows || !rows.length)
					rows = [[]];
				var headerRow:Array = rows[0];
				var allRows:Array = WeaveAPI.CSVParser.convertRecordsToRows(
					VectorUtils.flatten(
						WeaveAPI.CSVParser.convertRowsToRecords(rowsToAppend),
						WeaveAPI.CSVParser.convertRowsToRecords(rows)
					),
					VectorUtils.union(headerRow, rowsToAppend[0])
				);
				
				tableEditor.setRows(allRows);
				tableEdited = false;
				tableToText();
			}
			
			private function getRows():Array
			{
				if (url.text)
					return null;
				if (tabNav.selectedChild == textTab && !textEditor.text)
					return null;
				
				tabNav.selectedChild = tableTab;
				tabNav.validateProperties();
				return tableEditor.getRows();
			}
			
			private function arrayIsEmpty(array:Array):Boolean
			{
				return !array || !array.length;
			}
			
			private function handleURLTextChange():void
			{
				var hasURL:Boolean = url.text ? true : false;
				tableEditor.setRows(null);
				textEditor.text = '';
				tabNav.selectedChild = textTab;
			}
			private function editMetadata():void
			{
				ControlPanel.openEditor(this.target, null, null, true, CSVMetadataEditor);
			}
		]]>
	</mx:Script>
</mx:VBox>