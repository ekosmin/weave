<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns="weave.editors.*" 
		 xmlns:mx="http://www.adobe.com/2006/mxml" 
		 width="100%" 
		 height="100%" xmlns:ui="weave.ui.*"
		 >
	<ui:CustomCheckBox id="enableMenuBar"
			label="{lang('Show menu bar')}"
			creationComplete="linkBindableProperty(Weave.properties.enableMenuBar, event.target, 'selected');">
	</ui:CustomCheckBox>
	
	<ui:CustomCheckBox label="{lang('Show session history controls')}"
				 creationComplete="linkBindableProperty(Weave.properties.enableSessionHistoryControls, event.target, 'selected');"
				/>

	<ui:CustomCheckBox label="{lang('Enable tool control panels and attribute selection')}"
					   creationComplete="linkBindableProperty(Weave.properties.enableToolControls, event.target, 'selected');"/>

	<ui:CustomTabNavigator resizeToContent="true" width="100%" height="100%" paddingLeft="10" paddingRight="10">
		<mx:VBox label="{lang('Right-click')}" verticalGap="{verticalGap}">
			<ui:CustomCheckBox label="{lang('Right-click Menu')}" id="rightClick"
						 creationComplete="linkBindableProperty(Weave.properties.enableRightClick,event.target,'selected')"/>
			<mx:VBox enabled="{rightClick.selected}" paddingLeft="10" verticalGap="{verticalGap}" width="100%">
				<ui:CustomCheckBox label="{lang('Subset controls')}" creationComplete="linkBindableProperty(Weave.properties.enableSubsetControls, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Search for record online')}" creationComplete="linkBindableProperty(Weave.properties.enableSearchForRecord, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Pen Tool')}" creationComplete="linkBindableProperty(Weave.properties.enablePenTool, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Add Marker')}" creationComplete="linkBindableProperty(Weave.properties.enableMarker, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Add Circle')}" creationComplete="linkBindableProperty(Weave.properties.enableDrawCircle, event.target, 'selected')"/>
				<!--<ui:CustomCheckBox label="{lang('Add Annotation')}" creationComplete="linkBindableProperty(Weave.properties.enableAnnotation, event.target, 'selected')"/>-->
				<ui:CustomCheckBox label="{lang('Print/Export Panel Image')}" creationComplete="linkBindableProperty(Weave.properties.enableExportToolImage, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Print/Export Application Image')}" creationComplete="linkBindableProperty(Weave.properties.enableExportApplicationScreenshot, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Export CSV')}" creationComplete="linkBindableProperty(Weave.properties.enableExportCSV, event.target, 'selected')"/>
				
				<ui:Indent label="{lang('Data Info URL')}" width="100%">
					<ui:HelpComponent>
						If you enter a URL here, a right-click menu option will appear that opens the URL
						("Show information about this dataset...").
					</ui:HelpComponent>
					<ui:TextInputWithPrompt width="100%" prompt="http://www.example.com/example.html" creationComplete="linkBindableProperty(Weave.properties.dataInfoURL, event.target, 'text');"/>
				</ui:Indent>
			</mx:VBox>
		</mx:VBox>

		<mx:VBox label="{lang('Session')}" verticalGap="{verticalGap}">	 	
			<ui:CustomCheckBox label="{lang('Session Menu')}"
						 creationComplete="linkBindableProperty(Weave.properties.enableSessionMenu, event.target, 'selected')"/>
			<ui:CustomCheckBox label="{lang('Manage plugins')}"
						 creationComplete="linkBindableProperty(Weave.properties.enableManagePlugins, event.target, 'selected')"/>
			<ui:CustomCheckBox id="collabPanel"
						 label="{lang('Connect to Collaboration Server')}"
						 creationComplete="linkBindableProperty(Weave.properties.showCollaborationMenuItem, event.target, 'selected');"
						 />
		</mx:VBox>
		
		<mx:VBox  label="{lang('Data')}" verticalGap="{verticalGap}">
			<ui:CustomCheckBox id="dataMenu"
						 label="{lang('Data Menu')}"
						 creationComplete="linkBindableProperty(Weave.properties.enableDataMenu, event.target, 'selected')"/>
			<mx:VBox enabled="{dataMenu.selected}" paddingLeft="10" verticalGap="{verticalGap}">
				
				<ui:CustomCheckBox label="{lang('Browse data')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableBrowseData, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Manage data sources')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableManageDataSources, event.target, 'selected')"/>
				<ui:CustomCheckBox id="refreshDataCheckBox"
							 label="{lang('Refresh data source hierarchies')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableRefreshHierarchies, refreshDataCheckBox, 'selected')"/> 
				<ui:CustomCheckBox label="{lang('Export CSV')}" creationComplete="linkBindableProperty(Weave.properties.enableExportCSV, event.target, 'selected')"/>
				
				<mx:HRule width="100%" height="22"/>
				<ui:DividedCheckBoxList id="dataMenuCheckList"/>
				<mx:HRule width="100%" height="22"/>

				<ui:CustomCheckBox label="{lang('Equation Column Editor')}"
								   creationComplete="linkBindableProperty(Weave.properties.showEquationEditor, event.target, 'selected')"/>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox label="{lang('Tools')}" verticalGap="{verticalGap}">	 	
			<ui:CustomCheckBox id="toolsMenu"
						 label="{lang('Tools Menu')}"
						 creationComplete="linkBindableProperty(Weave.properties.enableDynamicTools, event.target, 'selected')"/>
			
			<mx:HBox enabled="{toolsMenu.selected}" paddingLeft="10" horizontalGap="10" width="100%">
				<mx:VBox verticalGap="{verticalGap}">
					<ui:CustomCheckBox label="{lang('Color Controller')}"
								 creationComplete="linkBindableProperty(Weave.properties.showColorController, event.target, 'selected')"/>
					<ui:CustomCheckBox label="{lang('Probe Info Editor')}"
								 creationComplete="linkBindableProperty(Weave.properties.showProbeToolTipEditor, event.target, 'selected')"/>
					<ui:CustomCheckBox label="{lang('Probe Info Window')}"
								 creationComplete="linkBindableProperty(Weave.properties.showProbeWindow, event.target, 'selected')"/>
					<ui:CustomCheckBox id="collabSettings"
								 label="{lang('Collaboration Settings')}"
								 creationComplete="linkBindableProperty(Weave.properties.showCollaborationEditor, event.target, 'selected');"
								 />
					<ui:CustomCheckBox label="{lang('Add External Tool')}"
								 creationComplete="linkBindableProperty(Weave.properties.showAddExternalTools, event.target, 'selected')"/>
				</mx:VBox>
				<ui:DividedCheckBoxList id="toolsMenuCheckList"/>
			</mx:HBox>	
		</mx:VBox>	
		
		<mx:VBox width="100%" label="{lang('Selections')}" verticalGap="{verticalGap}">	 	
			<ui:CustomCheckBox
						 id="selectionsMenu"
						 label="{lang('Selections Menu')}"
						 creationComplete="linkBindableProperty(Weave.properties.enableSelectionsMenu, event.target, 'selected')"/> 
			<mx:VBox enabled="{selectionsMenu.selected}" paddingLeft="10" verticalGap="{verticalGap}">
				<ui:CustomCheckBox label="{lang('Save current Selection')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableSaveCurrentSelection, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Clear current Selection')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableClearCurrentSelection, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Manage saved selections')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableManageSavedSelections, event.target, 'selected')"/>
			</mx:VBox>
		</mx:VBox>	
		
		<mx:VBox width="100%" label="{lang('Subsets')}" verticalGap="{verticalGap}">	 	
			<ui:CustomCheckBox
						 id="subsetsMenu"
						 label="{lang('Subsets Menu')}"
						 creationComplete="linkBindableProperty(Weave.properties.enableSubsetsMenu, event.target, 'selected')"/> 
			<mx:VBox enabled="{subsetsMenu.selected}" paddingLeft="10" verticalGap="{verticalGap}">
				<ui:CustomCheckBox label="{lang('Create subset from selected records')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableCreateSubsets, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Remove selected records from subset')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableRemoveSubsets, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Show all records')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableShowAllRecords, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Save current subset')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableSaveCurrentSubset, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Manage saved subsets')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableManageSavedSubsets, event.target, 'selected')"/>
			</mx:VBox>
		</mx:VBox>	
		
		<mx:VBox width="100%" label="{lang('Window')}" verticalGap="{verticalGap}">	 	
			<ui:CustomCheckBox id="windowMenu"
						 label="{lang('Window Menu')}"
						 creationComplete="linkBindableProperty(Weave.properties.enableWindowMenu, event.target, 'selected')"/> 
			<mx:VBox enabled="{windowMenu.selected}" paddingLeft="10" verticalGap="{verticalGap}">
				<ui:CustomCheckBox label="{lang('Preferences')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableUserPreferences, event.target, 'selected')"/>
				
				<ui:CustomCheckBox toolTip="{lang('This option must also be enabled in the embed tag of the surrounding webpage.')}"
							 label="{lang('Full-screen')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableFullScreen, event.target, 'selected')"/>  
				
				<ui:CustomCheckBox label="{lang('Tile all windows')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableTileAllWindows, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Cascade all windows')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableCascadeAllWindows, event.target, 'selected')"/>
				
				<ui:CustomCheckBox label="{lang('Minimize all windows')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableMinimizeAllWindows, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Restore all minimized windows')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableRestoreAllMinimizedWindows, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Close all windows')}"
							 creationComplete="linkBindableProperty(Weave.properties.enableCloseAllWindows, event.target, 'selected')"/>
			</mx:VBox>
		</mx:VBox>	
	</ui:CustomTabNavigator>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.collections.ICollectionView;
			import mx.controls.Alert;
			import mx.controls.HRule;
			import mx.events.CloseEvent;
			
			import weave.Weave;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.core.LinkableBoolean;
			import weave.core.UIUtils;
			import weave.menus.DataMenu;
			import weave.menus.ToolsMenu;
			import weave.menus.WeaveMenuItem;
			import weave.utils.EventUtils;
			import weave.utils.VectorUtils;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				Weave.properties.enableMenuBar.addGroupedCallback(this, handleMenuToggled);
				
				dataMenuCheckList.labelFunction = getMenuItemLabel;
				toolsMenuCheckList.labelFunction = getMenuItemLabel;
				
				addEventListener(MouseEvent.ROLL_OVER, initCheckListData);
				callLater(loadCheckLists);

				var delayedSave:Function = EventUtils.generateDelayedCallback(this, saveCheckLists, 0);
				BindingUtils.bindSetter(delayedSave, dataMenuCheckList, 'selection');
				BindingUtils.bindSetter(delayedSave, toolsMenuCheckList, 'selection');
				
				getCallbackCollection(Weave.properties.menuToggles).addGroupedCallback(this, initCheckListData);
			}
			
			private function getMenuItemLabel(item:WeaveMenuItem):String
			{
				return item.label;
			}
			
			private function initCheckListData(event:MouseEvent = null):void
			{
				function mapper(item:WeaveMenuItem, i:int, a:Array):* { return item.data ? item : null; }
				dataMenuCheckList.dataProvider = DataMenu.getDynamicItems().map(mapper);
				toolsMenuCheckList.dataProvider = ToolsMenu.getDynamicItems(null, null, true).map(mapper);
				loadCheckLists();
			}
			
			private var loadCheckListFromState:Boolean = false;
			
			private function getMenuToggles(checkList:DividedCheckBoxList):Array
			{
				var menuItems:Array = VectorUtils.getArrayFromCollection(checkList.dataProvider as ICollectionView, false);
				return menuItems.map(function(item:WeaveMenuItem, i:int, a:Array):LinkableBoolean {
					return item ? Weave.properties.getMenuToggle(item.data as Class) : null;
				});
			}
			private function saveCheckLists():void
			{
				for each (var checkList:DividedCheckBoxList in [dataMenuCheckList, toolsMenuCheckList])
					if (UIUtils.hasFocus(checkList))
						getMenuToggles(checkList).forEach(function(toggle:LinkableBoolean, i:int, a:Array):void {
							if (toggle)
								toggle.value = checkList.getSelectedState(i);
						});
			}
			private function loadCheckLists():void
			{
				for each (var checkList:DividedCheckBoxList in [dataMenuCheckList, toolsMenuCheckList])
					getMenuToggles(checkList).forEach(function(toggle:LinkableBoolean, i:int, a:Array):void {
						if (toggle)
							checkList.setSelectedState(i, toggle.value);
					});
			}
			
			private function handleMenuToggled():void
			{
				var focus:InteractiveObject = getFocus();
				if (focus && enableMenuBar.contains(focus) && !Weave.properties.enableMenuBar.value)
				{
					// put up an alert box so the user has to confirm removing the menu bar
					Alert.show(lang("Are you sure you want to remove the menu bar?  \nOnce removed, the functions that are accessed through the menu will no longer be accessible."),
						   lang("Remove menu bar?"),
						   Alert.YES | Alert.NO,
						   null,
						   function(e:CloseEvent):void {
						   		// if the user chose yes to removing the menu bar
						   		if(e.detail == Alert.YES)
						   		{
						   			Weave.properties.enableMenuBar.value = false;
						   		}
						   		else if(e.detail == Alert.NO)
						   		{
						   			// if the user said no to removing the menu bar, reset the sessioned variable back to enabled
						   			Weave.properties.enableMenuBar.value = true;
						   		}
						   });
				}
			}
			private const verticalGap:int = 0;
		]]>
	</mx:Script>
</mx:VBox>	