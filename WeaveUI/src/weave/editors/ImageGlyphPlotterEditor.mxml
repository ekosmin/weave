<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.editors.*"
		 implements="weave.api.ui.ILinkableObjectEditor"
		 label="{lang('Image Settings')}" xmlns:ui="weave.ui.*">	
	
	<ui:DynamicColumnComponent id="xCol" label="{lang('X Column')}" />
	<ui:DynamicColumnComponent id="yCol" label="{lang('Y Column')}" />
	
	<ui:DynamicColumnComponent id="imageURL" label="{lang('Image URL Column')}" />
	<ui:Indent>
		<ui:IndentTextInput id="defaultURL" label="{lang('Default URL')}" creationComplete="linkBindableProperty(target.imageURL.defaultValue, event.target, 'text', 500)"/>
		<mx:Button label="{lang('Open file')}" click="fileAttacher.browseAndAttachFile()"/>
	</ui:Indent>
	
	<ui:DynamicColumnComponent id="imageSize" label="{lang('Image Size Column')}" />
	<ui:Indent>
		<ui:CustomCheckBox id="enableDefaultSize" label="{lang('Default Image Size')}">
			<ui:change>
				<![CDATA[
					if (enableDefaultSize.selected)
						target.imageSize.defaultValue.value = defaultSize.value;
					linktargetImageSize();
					if (!enableDefaultSize.selected)
						target.imageSize.defaultValue.value = undefined;
				]]>
			</ui:change>
		</ui:CustomCheckBox>
		<mx:NumericStepper id="defaultSize" width="64" value="10" minimum="1" maximum="1000" enabled="{enableDefaultSize.selected}"/>
	</ui:Indent>
	
	<ui:DynamicColumnComponent id="rotationCol" label="{lang('Image Rotation Column')}" />
	<ui:Indent>
		<mx:HBox verticalAlign="middle" horizontalGap="{hgap}">
			<mx:HBox>
				<mx:Label text="{lang('Offset')}"/>
				<mx:NumericStepper id="rotationStepper" width="64" maximum="360" minimum="-360" stepSize="90"
								   creationComplete="linkBindableProperty(target.rotationOffset, event.target, 'value', 500)" />
			</mx:HBox>
			<ui:CustomCheckBox id="rotationCheckbox" label="{lang('Data in Degrees')}"
							   creationComplete="linkBindableProperty(target.dataInDegrees, event.target, 'selected')">
				<ui:change>
					<![CDATA[
						rotationStepper.value = 0;
						if (rotationCheckbox.selected)
							rotationStepper.stepSize = 90, rotationStepper.minimum = -360, rotationStepper.maximum = 360;
						else
							rotationStepper.stepSize = Math.PI / 2, rotationStepper.minimum = -2*Math.PI, rotationStepper.maximum = 2*Math.PI;
					]]>
				</ui:change>
			</ui:CustomCheckBox>
			<ui:CustomCheckBox label="{lang('Reverse')}"
							   creationComplete="linkBindableProperty(target.reverseRotation, event.target, 'selected')"/>
		</mx:HBox>
	</ui:Indent>
	<ui:CheckBoxWithNestedOptions id="enableReprojection" label="{lang('Geographic reprojection')}">
		<ui:change>
			<![CDATA[
			if (UIUtils.hasFocus(enableReprojection))
			{
				if (enableReprojection.selected)
				{
					// recall previously saved values
					sourceProjection.text = sourceProjection.data as String;
					destinationProjection.text = destinationProjection.data as String;
				}
				else
				{
					// save values for later
					sourceProjection.data = sourceProjection.text;
					destinationProjection.data = destinationProjection.text;
					sourceProjection.text = destinationProjection.text = '';
				}
			}
			]]>
		</ui:change>
		<ui:Indent label="from" translate="true">
			<ui:TextInputWithPrompt id="sourceProjection" width="100%" prompt="{lang('Source projection')}"/>
			<mx:Button label="{lang('Lat/Long')}" click="sourceProjection.text = 'EPSG:4326';"/>
		</ui:Indent>
		<ui:Indent label="to" translate="true">
			<ui:TextInputWithPrompt id="destinationProjection" width="100%" prompt="{lang('Destination projection')}"/>
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.linkBindableProperty;
			import weave.api.unlinkBindableProperty;
			import weave.compiler.StandardLib;
			import weave.core.UIUtils;
			import weave.services.FileAttacher;
			import weave.visualization.plotters.ImageGlyphPlotter;
			
			private const hgap:int = 30;
			
			public function setTarget(object:ILinkableObject):void
			{
				if (target)
				{
					unlinkBindableProperty(target.sourceProjection, sourceProjection, 'text');
					unlinkBindableProperty(target.destinationProjection, destinationProjection, 'text');
					target.sourceProjection.removeCallback(handleProjections);
					target.destinationProjection.removeCallback(handleProjections);
					target.imageSize.defaultValue.removeCallback(handletargetImageSize);
					xCol.dynamicObject = null;
					yCol.dynamicObject = null;
					imageURL.dynamicObject = null;
					imageSize.dynamicObject = null;
					rotationCol.dynamicObject = null;
				}
				
				target = object as ImageGlyphPlotter;
				
				if (target)
				{
					// make sure components are not null
					if (!initialized)
						initialize();
					linkBindableProperty(target.sourceProjection, sourceProjection, 'text');
					linkBindableProperty(target.destinationProjection, destinationProjection, 'text');
					target.sourceProjection.addGroupedCallback(this, handleProjections, true);
					target.destinationProjection.addGroupedCallback(this, handleProjections, true);
					target.imageSize.defaultValue.addGroupedCallback(this, handletargetImageSize, true);
					xCol.dynamicObject = target.dataX;
					yCol.dynamicObject = target.dataY;
					imageURL.dynamicObject = target.imageURL.internalDynamicColumn;
					imageSize.dynamicObject = target.imageSize.internalDynamicColumn;
					rotationCol.dynamicObject = target.rotation;
				}
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
			}
			
			private var target:ImageGlyphPlotter = null;
			
			private function handletargetImageSize():void
			{
				enableDefaultSize.selected = StandardLib.isDefined(target.imageSize.defaultValue.value);
				linktargetImageSize();
			}
			private function linktargetImageSize():void
			{
				if (enableDefaultSize.selected)
					linkBindableProperty(target.imageSize.defaultValue, defaultSize, 'value', 250);
				else
					unlinkBindableProperty(target.imageSize.defaultValue, defaultSize, 'value');
			}
			
			private var fileAttacher:FileAttacher = new FileAttacher(this, [new FileFilter('Image', '*.png;*.jpg;*.bmp'), new FileFilter('All files', "*")], handleURL);
			private function handleURL(url:String):void
			{
				defaultURL.text = url;
			}
			
			private function handleProjections():void
			{
				// show or hide controls depending on whether or not a projection is specified
				if (!UIUtils.hasFocus(sourceProjection) && !UIUtils.hasFocus(destinationProjection))
					enableReprojection.selected = !!(target.sourceProjection.value || target.destinationProjection.value);
			}
		]]>
	</mx:Script>
</mx:VBox>
