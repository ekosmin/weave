<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<mx:VBox width="100%" height="100%"
	xmlns="weave.editors.*"
	xmlns:ui="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	implements="weave.api.core.ILinkableObject,weave.api.ui.ILinkableObjectEditor"
	>
	<mx:HBox width="100%">
		<ui:TextInputWithPrompt id="searchInput" prompt="{lang('Search')}" width="100%"/>
		<mx:Button label="{lang('Show all')}" enabled="{!!searchInput.text}" click="searchInput.text = '';"/>
		<ui:CustomCheckBox id="filterCheckbox" label="{lang('Filter descendants')}"
						   toolTip="{lang('Apply search filter to descendants of matching categories')}"
						   creationComplete="filterCheckbox.selected = !entityNodeSearch.includeAllDescendants;"
						   change="entityNodeSearch.includeAllDescendants = !filterCheckbox.selected;"/>
	</mx:HBox>
	<ui:HierarchyExplorer id="explorer"/>
	<ui:BusyIndicator id="busyIndicator" targets="{[explorer]}"/>
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.ListEvent;
			
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IColumnReference;
			import weave.api.data.IDataSource;
			import weave.api.data.IExternalLink;
			import weave.api.data.IWeaveTreeNode;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.data.AttributeColumnCache;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.data.hierarchy.EntityNodeSearch;
			import weave.data.hierarchy.WeaveRootDataTreeNode;
			import weave.utils.EventUtils;
			
			public const referencedColumn:ReferencedColumn = newLinkableChild(this, ReferencedColumn, copyToTarget);
			private function copyToTarget():void
			{
				if (target)
					target.requestLocalObjectCopy(referencedColumn);
			}
			
			private const targetWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, copyFromTarget);
			private function copyFromTarget():void
			{
				if (target && target.internalObject is ReferencedColumn)
				{
					var counter:uint = referencedColumn.triggerCounter;
					copySessionState(target.internalObject, referencedColumn);
					// make sure item gets selected even if referencedColumn did not change
					// because we may have previously cleared explorer.fileView.selectedItem
					if (counter == referencedColumn.triggerCounter)
						handleReferencedColumn();
				}
				else if (explorer && explorer.fileView)
					explorer.fileView.selectedItem = null;
			}
			
			public function get target():DynamicColumn
			{
				return targetWatcher.target as DynamicColumn;
			}
			
			public function setTarget(newTarget:ILinkableObject):void
			{
				targetWatcher.target = newTarget as DynamicColumn;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			public function set dataSource(ds:IDataSource):void
			{
				if (dataSourceWatcher.target != ds)
				{
					if (explorer)
						explorer.fileView.selectedItem = null;
					dataSourceWatcher.target = ds;
				}
			}
			private const dataSourceWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleDataSource, true);
			private function handleDataSource():void
			{
				var ds:IDataSource = dataSourceWatcher.target as IDataSource;
				if (ds)
				{
					var root:IWeaveTreeNode = ds.getHierarchyRoot();
					explorer.rootNode = root;
					explorer.folderView.showRoot = true;
					if (!root.hasChildBranches() && !explorer.fileView.selectedItem)
						explorer.expandPathAndSelectNode(root);
				}
				else
				{
					explorer.rootNode = null;
					explorer.folderView.showRoot = false;
				}
			}
			
			private const entityNodeSearch:EntityNodeSearch = newLinkableChild(this, EntityNodeSearch);
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				registerLinkableChild(this, explorer);

				explorer.rootNode = new WeaveRootDataTreeNode();
				
				explorer.folderView.dragEnabled = false;
				explorer.fileView.dragEnabled = true;
				
				getCallbackCollection(explorer).addGroupedCallback(this, handleExplorerGroupedCallback);
				referencedColumn.addImmediateCallback(this, handleReferencedColumn, true);
				
				BindingUtils.bindSetter(handleFolderSelection, explorer.folderView, 'selectedItem');
				BindingUtils.bindSetter(handleFileSelection, explorer.fileView, 'selectedItem');
				
				registerLinkableChild(explorer.folderView, entityNodeSearch);
				registerLinkableChild(explorer.fileView, entityNodeSearch);
				explorer.folderView.nodeFilter = entityNodeSearch.nodeFilter;
				explorer.fileView.nodeFilter = entityNodeSearch.nodeFilter;
				EventUtils.addDelayedEventCallback(searchInput, "textChanged", handleFolderSearch, 500);
				
				// when a URL node (IExternalLink) is clicked, visit the URL
				explorer.fileView.addEventListener(ListEvent.ITEM_CLICK, function(event:ListEvent):void {
					var link:IExternalLink = event.itemRenderer.data as IExternalLink;
					if (link && link.getURL())
						navigateToURL(new URLRequest(link.getURL()), '_blank');
				});
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function handleFolderSearch():void
			{
				entityNodeSearch.searchString = EntityNodeSearch.replaceSpacesWithWildcards(searchInput.text);
			}
			
			private function handleFolderSelection(selectedFolder:IWeaveTreeNode):void
			{
				if (!UIUtils.hasFocus(explorer.folderView) && !UIUtils.hasFocus(explorer.fileView))
					return;
				// if we just selected the category corresponding to the referencedColumn,
				// make sure the corresponding column gets selected
				if (lastFoundCategoryIsSelectedFolder)
					getCallbackCollection(explorer).triggerCallbacks();
			}
			private function handleFileSelection(selectedFile:IWeaveTreeNode):void
			{
				// don't set session state if tree is not focused.
				if (!UIUtils.hasFocus(explorer.fileView))
					return;
				
				var ref:IColumnReference = selectedFile as IColumnReference;
				if (ref)
				{
					var meta:Object = ref.getColumnMetadata();
					if (meta)
					{
						var counter:uint = referencedColumn.triggerCounter;
						referencedColumn.setColumnReference(ref.getDataSource(), meta);
						// when user selects something, make sure we copy to target even if referencedColumn did not change
						if (counter == referencedColumn.triggerCounter)
							copyToTarget();
					}
				}
			}
			
			private function handleExplorerGroupedCallback():void
			{
				// if we have a target and no leaf node is selected
				if (target && target.internalObject is ReferencedColumn && !explorer.fileView.selectedItem)
				{
					// if we previously could not find the referenced node or we are in the correct category,
					// try to find the item in the newly updated hierarchy
					if (!_lastFoundNode || lastFoundCategoryIsSelectedFolder)
					{
						handleReferencedColumn();
					}
				}
			}
			
			private function get lastFoundCategoryIsSelectedFolder():Boolean
			{
				return _lastFoundCategory && explorer.selectedFolder
					&& _lastFoundCategory.equals(explorer.selectedFolder);
			}
			private var _lastFoundCategory:IWeaveTreeNode;
			private var _lastFoundNode:IWeaveTreeNode;
			
			private function handleReferencedColumn():void
			{
				var ds:IDataSource = referencedColumn.getDataSource() || AttributeColumnCache.globalColumnDataSource;
				if (ds)
				{
					var meta:Object = referencedColumn.metadata.getSessionState();
					var node:IWeaveTreeNode = ds.findHierarchyNode(meta);
					_lastFoundNode = explorer.expandPathAndSelectNode(node);
					_lastFoundCategory = _lastFoundNode ? explorer.selectedFolder : null;
				}
				else
				{
					_lastFoundNode = null;
				}
			}
			
			/**
			 * Adds multiple columns to an ILinkableHashMap.
			 * @param destination The hash map where columns should be added.
			 * @param selectedOnly If true, adds selected columns.  If false, adds all visible columns
			 * @return An Array of columns that were added to the hash map.
			 */
			public function addMultipleColumns(destination:ILinkableHashMap, selectedOnly:Boolean):Array
			{
				var result:Array = [];
				var folder:IWeaveTreeNode = explorer.folderView.selectedItem as IWeaveTreeNode;
				if (!folder || !destination)
					return result;
				
				var nodes:Array;
				if (selectedOnly)
				{
					nodes = explorer.fileView.selectedItems;
					// selectedItems order is reversed
					if (nodes)
						nodes = nodes.concat().reverse();
				}
				else
				{
					nodes = folder.getChildren();
				}
				
				referencedColumn.delayCallbacks();
				getCallbackCollection(destination).delayCallbacks();
				for each (var node:IWeaveTreeNode in nodes)
				{
					var ref:IColumnReference = node as IColumnReference;
					if (ref)
					{
						var meta:Object = ref.getColumnMetadata();
						if (meta !== null)
						{
							referencedColumn.setColumnReference(ref.getDataSource(), meta);
							result.push(destination.requestObjectCopy(null, referencedColumn));
						}
					}
				}
				getCallbackCollection(destination).resumeCallbacks();
				referencedColumn.resumeCallbacks();
				
				return result;
			}
		]]>
	</mx:Script>
</mx:VBox>
