<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="Pricipal Components Analysis Editor"
				
				backgroundColor="#EFF4BC" 
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool"
				>
	
	<mx:VBox>
		<ColumnListComponent id="columnList"  height="100%" width="50%" hashMap="{pcHashmap}" label="Input columns"/>
		<mx:Button id="doPCA" label="Compute Principal Components" click="doPCA_clickHandler(event)"/>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.rpc.AsyncToken;
			
			import weave.services.addAsyncResponder;
			
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableHashMap;
			import weave.core.SessionManager;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.KeySets.KeySet;
			import weave.services.DelayedAsyncResponder;
			import weave.services.WeaveRServlet;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			import weave.visualization.tools.WeaveAnalyst;
			
			private const pcHashmap:LinkableHashMap = registerLinkableChild(this,new LinkableHashMap(IAttributeColumn));
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			public var latestColumnKeys:Array = new Array();
			public var finalColumns:Array = new Array();
			
			override protected function inConstructor():void
			{
					super.inConstructor();	
					var analystInstance:WeaveAnalyst = WeaveAnalyst.getInstance();
				    copySessionState(analystInstance.inputColumns,pcHashmap);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				preprocessingColumns();
				pcHashmap.addGroupedCallback(this,preprocessingColumns);
			}
			
			private static function get selection():KeySet
			{
				return Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			}
			
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			}
			
			private function preprocessingColumns():void
			{
				var colObjects:Array = pcHashmap.getObjects(IAttributeColumn);
				var attributeColumns :Array = new Array();
				for (var i:int = 0; i < colObjects.length; i++)
				{
					var col:IAttributeColumn = colObjects[i] as IAttributeColumn;
					var datatype:String = ColumnUtils.getDataType(col);
					if(datatype == "number")
					{
						attributeColumns.push(col);
					}
					
					var joinedColumns:Array = joinColumns(attributeColumns);
					latestColumnKeys = joinedColumns[0];
					finalColumns = joinedColumns[1];
				}
			}
			
			
			protected function doPCA_clickHandler(event:MouseEvent):void
			{
				var inputValues:Array = new Array();
				var inputNames:Array = ["myMatrix"];
				inputValues.push(finalColumns);
				var pcaScript:String = "frame <- data.frame(myMatrix)\n" +
					"pcaResult <- princomp(frame)\n";
				var plotScript:String = "";
				var outputNames:Array = ["pcaResult$loadings", "pcaResult$sd^2"];
				
				var query:AsyncToken = Rservice.runScript(null,inputNames,inputValues,outputNames,pcaScript,"",false,false,false);
				addAsyncResponder(query,handleRunScriptResult,handleRunScriptFault, latestColumnKeys);
			}
			
			private function handleRunScriptResult(event:ResultEvent, keys:Array):void
			{
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;		
				var pcReturnedResult:Array = new Array();//collects results [principalcomponents, eigenvalues]
				var finalPrinComponents:Array = new Array();
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					pcReturnedResult.push(rResult);
					
				}	
				//hardcoded since we know the format of the results returned
				var tempPrinComp:Array = ((pcReturnedResult[0] as RResult).value as Array);//principal components
				var eigenValues:Array = ((pcReturnedResult[1] as RResult).value as Array);//eigenvalues
				
				var analaystInstance:WeaveAnalyst = WeaveAnalyst.getInstance();
				
				var componentNames:Array = new Array();
				for(var a:int = 0; a < tempPrinComp.length; a++)
				{
					componentNames.push("Principal_Component"+[a]);
				}
				
				
				
				//collects the principal components for display in the console
				 for(var l:int = 0; l < tempPrinComp.length; l++)
				{
					finalPrinComponents[l] = new Array();
					for(var k:int = 0; k < tempPrinComp.length; k++)
					{
						var tempArray:Array = tempPrinComp[k];
						(finalPrinComponents[l] as Array).push(tempArray[l]); 
					}
					
				}
				 
				 tempPrinComp.unshift(componentNames); 
				var resultString:String = "";
				for(var z:int = 0; z < finalPrinComponents.length; z++)
				{
					resultString = resultString  + componentNames[z] + "\n" + ObjectUtil.toString(finalPrinComponents[z]) +"\n"+
						"EigenValue"+ ":"+ ObjectUtil.toString(eigenValues[z]) + "\n\n";
					
				}
				analaystInstance.resultConsole.text = resultString;
				
				/*Returning the values sent from R as CSV columns  */
				
				var returnedPrincipalComponents:String = Weave.root.generateUniqueName("Principal Components");
				var prinCompCSVdata:CSVDataSource = Weave.root.requestObject(returnedPrincipalComponents,CSVDataSource,false);
				prinCompCSVdata.setCSVData(tempPrinComp);
				prinCompCSVdata.keyType.value = (keys[0] as IQualifiedKey).keyType;
				prinCompCSVdata.keyColName.value = "Key";
				
				//to do: after collecting the PCs find distance of each from the original columns
				//computeComponentRelatedness(finalPrinComponents);
				
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError(event);
			}
			
			//this function uses R to calculate the distance between each principal component and the orginal columns(vectors)
			/* private function computeComponentRelatedness(_components:Array):Array
			{
				//for each column calculate distance between the PCs and the column
				var relatedOriginalColumns:Array = new Array(); //returns the original columns in one elements of the array in the decreasing order of their relatedness
				var colObjects:Array = pcHashmap.getObjects(IAttributeColumn);
				for(var b:int = 0; b < colObjects.length; b++)
				{
					
				}
				
				
			} */
		]]>
	</mx:Script>
</DraggablePanel>