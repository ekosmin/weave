<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ui="weave.ui.*"
		 xmlns="weave.editors.*"
		 label="{lang('Geometries')}"
		 implements="weave.api.ui.ILinkableObjectEditor">
	
	<ui:DynamicColumnComponent id="geometryComponent" label="{lang('Geometry')}" errorStringFunction="{getGeometryErrorString}"/>
	
	<ui:Indent label="{lang('Icon size')}">
		<mx:NumericStepper id="iconSize"
						   width="50"
						   minimum="0.2" maximum="100"
						   enabled="{!useImagesCheck.selected || fixedImageSizeCheck.selected}"
						   creationComplete="linkBindableProperty(_plotter.iconSize, event.target, 'value')"/>
		<ui:HelpComponent>
			This sets the default icon size when point-based geometry data is used.
		</ui:HelpComponent>
	</ui:Indent>
	
	<ui:CheckBoxWithNestedOptions id="useImagesCheck" label="{lang('Enable images for point data')}" click="handleGeomPlotterImageToggle()">
		<ui:IndentTextInput id="imageURL" label="{lang('Default image URL')}" creationComplete="EventUtils.addDelayedEventCallback(event.target, Event.CHANGE, handleGeomPlotterImageInput)" enabled="{useImagesCheck.selected}"/>
		<ui:DynamicColumnComponent id="imageURLColumnSelector" label="{lang('Image URL column')}" dynamicObject="{_plotter.pointDataImageColumn}"/>
		<mx:CheckBox id="fixedImageSizeCheck" label="{lang('Use specified icon size')}" enabled="{useImagesCheck.selected}" creationComplete="linkBindableProperty(_plotter.useFixedImageSize, fixedImageSizeCheck, 'selected');"/>
	</ui:CheckBoxWithNestedOptions>
	
	<ui:CheckBoxWithNestedOptions id="fillEnabled" label="{lang('Enable fill color')}"
								  creationComplete="linkBindableProperty(_plotter.fill.enable, event.target, 'selected')">
		<mx:HBox id="fillColorColumnControls" width="100%" verticalAlign="middle">
			<ui:DynamicColumnComponent id="fillColorColumn" label="{lang('Color')}" showLinkControl="false" columnWrapper="{_plotter.fill.color}"/>
			<mx:Button label="{lang('Edit Bins...')}" click="DraggablePanel.openStaticInstance(ColorController);"/>
		</mx:HBox>
		<mx:HBox horizontalGap="{hgap}">
			<ui:Indent grouped="false" label="{lang('Alpha')}">
				<mx:NumericStepper 	id="fillAlpha" 
									minimum="0" maximum="1" stepSize="0.1" 
									value="0"
									width="50"
									toolTip="{lang('0: transparent, 1: opaque')}"
									creationComplete="linkBindableProperty(_plotter.fill.alpha.defaultValue,event.target,'value')"/>
			</ui:Indent>
			<ui:Indent grouped="false" useFirstChildAsLabel="true">
				<mx:CheckBox id="enableDefaultColor" label="{lang('Default color')}"
							 change="handleBindableFillColor()"/>
				<ui:CustomColorPicker id="fillColorDefault"
								enabled="{enableDefaultColor.selected}"
								change="handleBindableFillColor()"
								selectedColor="0xEEEEEE"/>
				<ui:HelpComponent>
					This color will be used in place of missing data.
				</ui:HelpComponent>
			</ui:Indent>
		</mx:HBox>
	</ui:CheckBoxWithNestedOptions>
	
	<ui:CheckBoxWithNestedOptions id="lineEnabled" label="{lang('Enable borders')}"
				 				  creationComplete="linkBindableProperty(_plotter.line.enable, event.target, 'selected')">
		<mx:HBox horizontalGap="{hgap}">
			<ui:Indent grouped="false" label="{lang('Alpha')}">
				<mx:NumericStepper 	id="lineAlpha" 
									minimum="0" maximum="1" stepSize="0.1"
									width="50"
									toolTip="{lang('0: transparent, 1: opaque')}"
									creationComplete="linkBindableProperty(_plotter.line.alpha.defaultValue, event.target, 'value')"/>
			</ui:Indent>
			<ui:Indent grouped="false" label="{lang('Color')}">
				<ui:CustomColorPicker id="lineColor"
								creationComplete="linkBindableProperty(_plotter.line.color.defaultValue,event.target,'selectedColor')"/>
			</ui:Indent>
			<ui:Indent grouped="false" label="{lang('Default thickness')}">
				<mx:NumericStepper 	id="lineWeight" 
									minimum="1" maximum="10"
									width="50"
									creationComplete="linkBindableProperty(_plotter.line.weight.defaultValue, event.target, 'value')"/>
			</ui:Indent>
		</mx:HBox>
		<ui:NormalizedColumnComponent id="normalizedWeightComponent"
									  label="{lang('Thickness')}"
									  enabled="{lineEnabled.selected}"/>
	</ui:CheckBoxWithNestedOptions>
	
	<mx:HBox>
		<mx:CheckBox id="ignoreSubsetCheck" label="{lang('Ignore subset')}" change="handleIgnoreSubsetCheck()"/>
		<ui:HelpComponent>
			Check this box to always display these geometries whether or not they are in the current subset.
			Fill color will only be displayed on the geometries in the current subset.
			Only the borders will be displayed for the rest, unless a default fill color is set.
		</ui:HelpComponent>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.DataType;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.compiler.StandardLib;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.ui.ColorController;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.EventUtils;
			import weave.visualization.plotters.GeometryPlotter;
			
			private const hgap:int = 30;
			
			[Bindable] private var _plotter:GeometryPlotter = null;
			
			public function setTarget(object:ILinkableObject):void
			{
				_plotter = object as GeometryPlotter;
			}
			
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				_plotter.pointDataImageColumn.addImmediateCallback(this, handleGeomPlotterImageURLChange);
				getCallbackCollection(_plotter.filteredKeySet).addImmediateCallback(this, handleSubsetChange, true);
				_plotter.pointDataImageColumn.addImmediateCallback(this, handleImageColumn, true);
				geometryComponent.dynamicObject = _plotter.geometryColumn.internalDynamicColumn;
				
				normalizedWeightComponent.normalizedColumn = _plotter.line.normalizedWeightColumn;
				_plotter.fill.color.defaultValue.addImmediateCallback(this, handleLinkableFillColor, true);
			}
			
			private function getGeometryErrorString():String
			{
				if (_plotter.geometryColumn.getMetadata(ColumnMetadata.DATA_TYPE) != DataType.GEOMETRY)
					return lang('Please select a geometry column.');
				return '';
			}
			
			private function handleLinkableFillColor():void
			{
				var color:Number = StandardLib.asNumber(_plotter.fill.color.defaultValue.value);
				enableDefaultColor.selected = isFinite(color);
				if (isFinite(color))
					fillColorDefault.selectedColor = uint(color);
			}
			private function handleBindableFillColor():void
			{
				_plotter.fill.color.defaultValue.value = enableDefaultColor.selected ? fillColorDefault.selectedColor : NaN;
			}
			
			private function handleGeomPlotterImageToggle():void
			{
				if (!useImagesCheck.selected)
					_plotter.pointDataImageColumn.removeObject();
				else
					handleGeomPlotterImageInput();
			}
			
			private function handleGeomPlotterImageInput():void
			{
				var url:String = imageURL.text;
				var adc:AlwaysDefinedColumn = _plotter.pointDataImageColumn.requestLocalObject(AlwaysDefinedColumn, false);
				adc.defaultValue.value = url;
			}
			
			private function handleGeomPlotterImageURLChange():void
			{
				var adc:AlwaysDefinedColumn = _plotter.pointDataImageColumn.getInternalColumn() as AlwaysDefinedColumn;
				if (adc)
					imageURL.text = adc.defaultValue.value as String;
			}
			
			private function handleIgnoreSubsetCheck():void
			{
				if (ignoreSubsetCheck.selected)
				{
					_plotter.filteredKeySet.keyFilter.removeObject();
				}
				else
				{
					_plotter.filteredKeySet.keyFilter.targetPath = [Weave.DEFAULT_SUBSET_KEYFILTER];
				}
			}
			
			private function handleSubsetChange():void
			{
				ignoreSubsetCheck.selected = _plotter.filteredKeySet.keyFilter.targetPath ? false : true;
			}
			
			private function handleImageColumn():void
			{
				useImagesCheck.selected = (_plotter.pointDataImageColumn.getInternalColumn() != null);
				var adc:AlwaysDefinedColumn = _plotter.pointDataImageColumn.getInternalColumn() as AlwaysDefinedColumn;
				if (adc)
					imageURL.text = adc.defaultValue.value as String;
			}
		]]>
	</mx:Script>
</mx:VBox>
