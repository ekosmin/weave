<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HBox xmlns="weave.editors.*" 
		xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:ui="weave.ui.*"
		implements="weave.api.ui.ILinkableObjectEditor,weave.api.core.ILinkableObject"
		creationPolicy="all"
		horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" verticalAlign="middle">
	<ui:CustomCheckBox paddingLeft="4" id="filterToggle" change="toggleFilter();"/>
	<ui:PlayButton id="playButton" enabled="{filterToggle.selected}"/>
	<mx:HSlider id="filterSlider" enabled="{filterToggle.selected}"
				width="100%" minWidth="22"
				fillAlphas="{[1, 1]}"
				liveDragging="true"
				dataTipFormatFunction="{dataTipFormatFunction}"
				mouseDown="event.target.setFocus(); event.stopPropagation()"
				change="handleSliderChange(event);"/>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.events.SliderEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.DataType;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnStatistics;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableFunction;
			import weave.core.LinkableNumber;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.ColumnDataFilter;
			import weave.utils.ColumnUtils;

			public const thumbColor:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0xe0e0e0, isFinite), setThumbColor);
			public const labelFunction:LinkableFunction = registerLinkableChild(this, new LinkableFunction('ColumnUtils.deriveStringFromNumber(column, number)', true, false, ['column', 'number']), invalidateDisplayList);
			public const showPlayButton:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			public const showToggle:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			public const showToggleLabel:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateToggleLabel);
			public const showMinThumb:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), invalidateDisplayList);
			public const showMaxThumb:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), invalidateDisplayList);
			public const forceDiscreteValues:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), invalidateDisplayList);
			public const discreteValueLabelInterval:LinkableNumber = registerLinkableChild(this, new LinkableNumber(1, verifyUINT), invalidateDisplayList);
			public const playStep:LinkableNumber = registerLinkableChild(this, new LinkableNumber(1, verifyPositive));
			private var discreteValues:Array;
			
			private const filterWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, invalidateDisplayList);
			private const statsWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, invalidateDisplayList);
			
			private function verifyUINT(value:Number):Boolean
			{
				return value == uint(value);
			}
			private function verifyPositive(value:Number):Boolean
			{
				return value > 0;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				UIUtils.linkVisibility(this, showPlayButton, playButton);
				UIUtils.linkVisibility(this, showToggle, filterToggle);
				BindingUtils.bindSetter(handlePlayStep, playButton, 'step');
				playButton.button.addEventListener(MouseEvent.CLICK, handlePlayClick);
			}
			
			private function getLastSliderValue():Number
			{
				var values:Array = filterSlider.values;
				return values[values.length - 1];
			}
			private function setLastSliderValue(value:Number):void
			{
				var values:Array = filterSlider.values;
				values[values.length - 1] = value;
				filterSlider.values = values;
				handleSliderChange();
			}
			
			private function handlePlayClick(event:MouseEvent):void
			{
				if (playButton.button.selected)
				{
					// if slider is at maximum, reset slider to minimum
					var value:Number = getLastSliderValue();
					if (!isFinite(value) || value >= filterSlider.maximum)
						setSliderMaxValueToMin();
				}
			}
			
			private function setSliderMaxValueToMin():void
			{
				var newValue:Number = filterSlider.thumbCount > 1 ? Math.max(filterSlider.value, filterSlider.minimum) : filterSlider.minimum;
				setLastSliderValue(newValue);
			}
			
			private function handlePlayStep(step:int):void
			{
				if (!playButton.button.selected || !showPlayButton.value || !filter || !filter.enabled.value)
					return;
				
				// we can actually ignore the step number because we only care that it has stepped.
				
				var value:Number = getLastSliderValue();
				
				// stop playing at end
				if (!isFinite(value) || value >= filterSlider.maximum)
				{
					// stop playing at end
					playButton.button.selected = false;
					return;
				}
				
				setLastSliderValue(Math.min(value + playStep.value, filterSlider.maximum));
			}
			
			public function get filter():ColumnDataFilter
			{
				return filterWatcher.target as ColumnDataFilter;
			}
			[Deprecated(replacement="filter")] public function get numberFilter():ColumnDataFilter { return filter; }
			
			public function setTarget(object:ILinkableObject):void
			{
				filterWatcher.target = object as ColumnDataFilter;
				statsWatcher.target = filter ? WeaveAPI.StatisticsCache.getColumnStatistics(filter.column) : null;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			private function toggleFilter():void
			{
				if (filter)
					filter.enabled.value = filterToggle.selected;
			}
			
			private function getFilterMin():Number
			{
				try
				{
					return filter.values.getSessionState()[0]['min'];
				}
				catch (e:Error)
				{
				}
				return -Infinity;
			}
			
			private function getFilterMax():Number
			{
				try
				{
					return filter.values.getSessionState()[0]['max'];
				}
				catch (e:Error)
				{
				}
				return Infinity;
			}
			
			private function handleSliderChange(event:SliderEvent = null):void
			{
				if (!filter || (event && !UIUtils.hasFocus(filterSlider)))
					return;
				
				var values:Array = filterSlider.values.concat();
				var value:Number;
				var min:Number = getFilterMin();
				var max:Number = getFilterMax();
				if (showMinThumb.value)
				{
					value = values.shift();
					min = discreteValues ? discreteValues[value] : value;
				}
				if (showMaxThumb.value)
				{
					value = values.shift();
					max = discreteValues ? discreteValues[value] : value;
				}
				filter.values.setSessionState([{'min': min, 'max': max}]);
			}
			
			private function dataTipFormatFunction(value:Number):String
			{
				return filter ? getLabelFromNumber(filter.column, value) : '';
			}
			
			private function getLabelFromNumber(column:IAttributeColumn, number:Number):String
			{
				return labelFunction.apply(this, [column, number]) || '';
			}
			
			private function setThumbColor():void
			{
				if (!parent)
				{
					callLater(setThumbColor);
					return;
				}
				filterSlider.setStyle('fillColors', [thumbColor.value, thumbColor.value]);
			}
			
			private function updateToggleLabel():void
			{
				if (!parent)
				{
					callLater(updateToggleLabel);
					return;
				}
				
				if (showToggleLabel.value)
				{
					var title:String = filter.column ? ColumnUtils.getTitle(filter.column) : null;
					filterToggle.label = lang('Filter by {0}', title || '...');
				}
				else
					filterToggle.label = '';
			}

			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (filter && filterToggle.selected != filter.enabled.value)
					filterToggle.selected = filter.enabled.value;
				
				if (detectLinkableObjectChange(updateDisplayList, filterWatcher, showMinThumb, showMaxThumb, forceDiscreteValues, discreteValueLabelInterval, statsWatcher, labelFunction))
				{
					var i:int;
					var stats:IColumnStatistics = statsWatcher.target as IColumnStatistics;
					var min:Number = stats ? stats.getMin() : NaN;
					var max:Number = stats ? stats.getMax() : NaN;
					var ready:Boolean = filter && isFinite(min) && isFinite(max);
					if (ready && (showMinThumb.value || showMaxThumb.value))
					{
						var column:DynamicColumn = filter.column;
						updateToggleLabel();
						enabled = true;
						
						var sliderMinValue:Number = getFilterMin();
						var sliderMaxValue:Number = getFilterMax();
						
						var labels:Array = [];
						var labelInterval:int = discreteValueLabelInterval.value;
						if (column.getMetadata(ColumnMetadata.DATA_TYPE) == DataType.STRING)
						{
							discreteValues = null;
							filterSlider.minimum = min;
							filterSlider.maximum = max;
							filterSlider.tickInterval = 1;
							filterSlider.snapInterval = 1;
							if (labelInterval > 0)
							{
								for (i = min; i <= max; i++)
								{
									if (labels.length % labelInterval == 0)
										labels.push(getLabelFromNumber(column, i));
									else
										labels.push('');
								}
							}
							else
							{
								labels.push(getLabelFromNumber(column, min));
								labels.push(getLabelFromNumber(column, max));
							}
						}
						else if (forceDiscreteValues.value)
						{
							// get distinct numeric values and store as values in lookup
							var lookup:Object = {};
							for each (var key:IQualifiedKey in column.keys)
							{
								var number:Number = column.getValueFromKey(key, Number);
								lookup[number] = number;
							}
							
							// sort values from lookup and create labels for sorted values
							discreteValues = [];
							for each (number in lookup)
								discreteValues.push(number);
							StandardLib.sort(discreteValues);
							
							sliderMinValue = discreteValues.indexOf(sliderMinValue);
							sliderMaxValue = discreteValues.indexOf(sliderMaxValue);
							
							filterSlider.minimum = 0;
							filterSlider.maximum = discreteValues.length - 1;
							filterSlider.tickInterval = 1;
							filterSlider.snapInterval = 1;
							if (labelInterval > 0)
							{
								for each (number in discreteValues)
								{
									if (labels.length % labelInterval == 0)
										labels.push(getLabelFromNumber(column, number));
									else
										labels.push('');
								}
							}
							else
							{
								labels.push(getLabelFromNumber(column, discreteValues[0]));
								labels.push(getLabelFromNumber(column, discreteValues[discreteValues.length - 1]));
							}
						}
						else
						{
							discreteValues = null;
							filterSlider.minimum = min;
							filterSlider.maximum = max;
							filterSlider.tickInterval = 0;
							filterSlider.snapInterval = 0;
							labels.push(getLabelFromNumber(column, min));
							labels.push(getLabelFromNumber(column, max));
						}
						
						var values:Array = [];
						var thumbCount:int = 0;
						if (showMinThumb.value)
							values[thumbCount++] = sliderMinValue;
						if (showMaxThumb.value)
							values[thumbCount++] = sliderMaxValue;
						filterSlider.thumbCount = thumbCount;
						filterSlider.values = values;
						filterSlider.labels = labels;
						filterSlider.invalidateDisplayList();
						filterSlider.validateNow();
					}
					else
					{
						enabled = false;
						filterToggle.selected = false;
						filterSlider.labels = null;
						filterSlider.minimum = 0;
						filterSlider.maximum = 100;
						filterSlider.thumbCount = 1;
						filterSlider.value = 0;
						filterSlider.tickInterval = 0;
						filterSlider.snapInterval = 0;
						filterSlider.invalidateDisplayList();
						filterSlider.validateNow();
					}
				}
				super.updateDisplayList.apply(this, arguments);
			}
		]]>
	</mx:Script>
</mx:HBox>
