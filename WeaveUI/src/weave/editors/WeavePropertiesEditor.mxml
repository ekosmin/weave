<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<ui:ControlPanel xmlns:mx="http://www.adobe.com/2006/mxml"
			xmlns="weave.editors.*"
			xmlns:ui="weave.ui.*"
			backgroundColor="#EFF4BC"
			title="{lang('Preferences')}"
			targets="{(function():*{return [Weave.properties];}())}"
			sessionEditorTarget="{(function():*{return Weave.properties;}())}"
			>
	<WeavePropertiesAppearanceEditor label="{lang('Appearance')}"/>
	
	<WeavePropertiesMenuEditor label="{lang('Menus')}"/>
	
	<WeavePropertiesProbingEditor label="{lang('Mouseover')}"/>
	
	<WeavePropertiesSelectionEditor label="{lang('Selection')}"/>
	
	<mx:VBox label="{lang('Advanced')}" width="100%" height="100%">
		<ui:CustomCheckBox label="{lang('Show error log when an error is caught')}"
						   creationComplete="linkBindableProperty(Weave.properties.showErrors, event.target, 'selected');"/>
		
		<ui:Indent label="{lang('Streaming geometry bounding box request mode')}">
			<ui:CustomComboBox id="geometryMetadataRequestMode"/>
			<ui:HelpComponent>
				This controls how metadata tile requests are filtered based on the map zoom level.
				Unless all metadata tiles are requested for the current X-Y range, selection and
				mouseover on the map will not catch the shapes that are too small to be seen.
			</ui:HelpComponent>
		</ui:Indent>
		<ui:Indent label="{lang('Do not render geometry detail with pixel area less than')}">
			<mx:NumericStepper width="64" minimum="1" maximum="100" stepSize="1" creationComplete="linkBindableProperty(Weave.properties.geometryMinimumScreenArea, event.target, 'value');"/>
			<ui:HelpComponent>
				This controls the filtering of vector tile requests and rendering.
				Enter the minimum area requirement (in pixels) for geometry detail to be rendered.
			</ui:HelpComponent>
		</ui:Indent>
		
		<mx:VBox width="100%">
			<ui:Indent label="{lang('Max computation time per frame')}">
				<mx:NumericStepper id="maxComputationTime" minimum="10" maximum="300" stepSize="10"/>
			</ui:Indent>
			
			<mx:Label text="{lang('Asynchronous task time allocation (milliseconds):')}"/>
			<ui:Indent label="{lang('High priority')}">
				<mx:HSlider id="allocHigh" minimum="5" maximum="300" snapInterval="5" liveDragging="true" change="setAlloc(event)" width="100%"/>
			</ui:Indent>
			<ui:Indent label="{lang('Normal priority')}">
				<mx:HSlider id="allocNormal" minimum="5" maximum="300" snapInterval="5" liveDragging="true" change="setAlloc(event)" width="100%"/>
			</ui:Indent>
			<ui:Indent label="{lang('Low priority')}">
				<mx:HSlider id="allocLow" minimum="5" maximum="300" snapInterval="5" liveDragging="true" change="setAlloc(event)" width="100%"/>
			</ui:Indent>
		</mx:VBox>
		
		<mx:Button label="{lang('Edit translations (Beta)')}" click="DraggablePanel.openStaticInstance(TranslationPanel)" />
	</mx:VBox>
	
	<MacroEditor/>
	
	<mx:VBox label="{lang('Startup script')}" width="100%" height="100%" id="startup">
		<mx:HBox width="100%" verticalAlign="middle">
			<mx:Label text="{lang('Enter JavaScript code below.')}"/>
			<ui:HelpComponent>
				The JavaScript code you enter below will run once on startup.
				A pointer to Weave can be accessed by using the "weave" variable in your script.
				See the JavaScript API documentation for examples.
			</ui:HelpComponent>
			<mx:Spacer width="100%"/>
			<mx:Button label="{lang('View documentation')}" click="navigateToURL(new URLRequest('http://info.iweave.com/projects/weave/wiki/JavaScript_API'), '_blank')"/>
			<mx:Button label="{lang('Restart Weave')}" click="Weave.externalReload()"/>
		</mx:HBox>
		<ui:CodeEditor creationComplete="linkBindableProperty(Weave.properties.startupJavaScript, event.target, 'text', 500)"/>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.linkBindableProperty;
			import weave.core.StageUtils;
			import weave.data.AttributeColumns.StreamedGeometryColumn;
			import weave.ui.DraggablePanel;
			import weave.ui.TranslationPanel;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				geometryMetadataRequestMode.dataProvider = StreamedGeometryColumn.metadataRequestModeEnum;
				linkBindableProperty(StreamedGeometryColumn.metadataRequestMode, geometryMetadataRequestMode, 'selectedItem');
				linkBindableProperty(Weave.properties.maxComputationTimePerFrame, maxComputationTime, 'value');
				
				// time allocation
				allocHigh.value = (WeaveAPI.StageUtils as StageUtils).getTaskPriorityTimeAllocation(WeaveAPI.TASK_PRIORITY_HIGH);
				allocNormal.value = (WeaveAPI.StageUtils as StageUtils).getTaskPriorityTimeAllocation(WeaveAPI.TASK_PRIORITY_NORMAL);
				allocLow.value = (WeaveAPI.StageUtils as StageUtils).getTaskPriorityTimeAllocation(WeaveAPI.TASK_PRIORITY_LOW);
				
				if (!JavaScript.available)
					startup.visible = startup.includeInLayout = false;
			}
			
			private function setAlloc(event:Event):void
			{
				var slider:HSlider = event.currentTarget as HSlider;
				var sliderIndex:int = [allocHigh, allocNormal, allocLow].indexOf(slider);
				var priority:int = [WeaveAPI.TASK_PRIORITY_HIGH, WeaveAPI.TASK_PRIORITY_NORMAL, WeaveAPI.TASK_PRIORITY_LOW][sliderIndex];
				(WeaveAPI.StageUtils as StageUtils).setTaskPriorityTimeAllocation(priority, slider.value);
			}
		]]>
	</mx:Script>
</ui:ControlPanel>
