<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox 
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.editors.*"
    verticalScrollPolicy="off"
    horizontalScrollPolicy="off"
    creationPolicy="all"
    implements="weave.api.core.ILinkableObject, weave.api.ui.IDataSourceEditor, weave.api.ui.ISelectableAttributes" xmlns:ui="weave.ui.*"
    >
    <mx:Label id="editorTitle" fontWeight="bold" text="{label}"/>
    <ui:Indent label="{lang('Source Name')}" visible="{!target}" includeInLayout="{!target}">
        <ui:TextInputWithPrompt id="sourceName"
                                width="100%"
                                prompt="{lang('Enter a name')}"
                                errorString="{sourceName.text ? null : lang('Required')}"/>
    </ui:Indent>
    <ui:DynamicColumnComponent id="partitionColumnEditor">
        <ui:helpContent>
            Each unique value in this column will produce a corresponding group containing all the keys which correspond to those values.
        </ui:helpContent>
    </ui:DynamicColumnComponent>
    <ui:ColumnListComponent id="inputColumnsEditor" showVariableNames="false">
        <ui:helpContent>
            Each column selected here will have several corresponding columns created, one for each value in the "Partition by" column.
        </ui:helpContent>
    </ui:ColumnListComponent>
    <mx:Script>
        <![CDATA[
            import mx.controls.Alert;
            
            import weave.api.copySessionState;
            import weave.api.core.ILinkableHashMap;
            import weave.api.core.ILinkableObject;
            import weave.api.data.IAttributeColumn;
            import weave.api.data.IDataSource;
            import weave.api.getSessionState;
            import weave.api.newLinkableChild;
            import weave.api.registerLinkableChild;
            import weave.core.LinkableHashMap;
            import weave.data.AttributeColumns.DynamicColumn;
            import weave.data.Transforms.PartitionDataTransform;
            
            private const partitionColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
            private const inputColumns:ILinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			
			public function getSelectableAttributes():Array
			{
				return [partitionColumn, inputColumns];
			}
			public function getSelectableAttributeNames():Array
			{
				return ["Partition by", "Columns to partition"];
			}
            
            [Bindable] private var target:PartitionDataTransform = null;
            
            override protected function createChildren():void
            {
                super.createChildren();
                
                partitionColumnEditor.dynamicObject = partitionColumn;

                inputColumnsEditor.hashMap = inputColumns;
                
				sourceName.text = WeaveAPI.globalHashMap.generateUniqueName(WeaveAPI.ClassRegistry.getDisplayName(PartitionDataTransform));
            }
            
            public function setTarget(object:ILinkableObject):void
            {
                target = object as PartitionDataTransform;
                
                if (!parent)
                {
                    callLater(setTarget, arguments);
                    return;
                }
                
                if (target)
                {
                    copySessionState(target.inputColumns, inputColumns);
                    copySessionState(target.partitionColumn, partitionColumn);
                    sourceName.text = WeaveAPI.globalHashMap.getName(target);
                    sourceName.editable = false;
                    sourceName.toolTip = lang("Source name is not editable once added to the session. If needed, delete the source and add it again with the new name.");
                }
            }
            
			private function hasDiff(a:ILinkableObject, b:ILinkableObject):Boolean
			{
				return WeaveAPI.SessionManager.computeDiff(getSessionState(a), getSessionState(b)) !== undefined;
			}
			
            public function hasPendingChanges():Boolean
            {
                return hasDiff(inputColumns, target.inputColumns)
                    || hasDiff(partitionColumn, target.partitionColumn);
            }
            
            public function applyChanges():void
            {
                copySessionState(inputColumns, target.inputColumns);
                copySessionState(partitionColumn, target.partitionColumn);
            }
            
            public function createDataSource():IDataSource
            {
                if (!sourceName.text || !partitionColumn.getInternalColumn() || !inputColumns.getNames().length)
                {
                    Alert.show(lang("Please fill all required fields"), lang("Error"));
                    return null;
                }
                if (WeaveAPI.globalHashMap.getObject(sourceName.text))
                {
                    Alert.show(lang("Source Name already being used. Please give a different name"), lang("Error"));
                    return null;
                }
                target = WeaveAPI.globalHashMap.requestObject(sourceName.text, PartitionDataTransform, false);
                if (!target)
                {
                    Alert.show(lang("Unexpected problem. Unable to add the data source."));
                    return null;
                }
                applyChanges();
                return target;
            }
        ]]>
    </mx:Script>
</mx:VBox>