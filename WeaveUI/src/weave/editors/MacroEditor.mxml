<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ui="weave.ui.*"
		 label="{lang('Macros')}"
		 width="100%" height="100%">
	<mx:HBox>
		<mx:Button label="{lang('Add')}" click="newMacro()"/>
		<mx:Button label="{lang('Rename')}" click="renameMacro()" enabled="{macroList.selectedItem}"/>
		<mx:Button label="{lang('Delete')}" click="controller.hashMap.removeObject(selectedMacroName);" enabled="{macroList.selectedItem}"/>
	</mx:HBox>
	<mx:HDividedBox width="100%" height="100%">
		<mx:VBox width="18%" height="100%">
			<mx:List id="macroList" width="100%" height="100%" change="setSelectedMacro(macroList.selectedItem as LinkableFunction)"/>
		</mx:VBox>
		<mx:VDividedBox width="82%" height="100%" visible="{macroList.selectedItem}" includeInLayout="{macroList.selectedItem}">
			<ui:CodeEditor id="editor" change="updateMacroLater(selectedMacro)"/>
			<mx:HBox width="100%">
				<mx:VBox>
					<mx:Button id="testButton" label="{lang('Test macro')}" click="testMacro(true)"/>
					<ui:CustomCheckBox id="autoTest" label="{lang('Auto test')}"/>
				</mx:VBox>
				<mx:TextArea id="result" width="100%" height="100%" minHeight="22" editable="false"/>
			</mx:HBox>
		</mx:VDividedBox>
	</mx:HDividedBox>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			import weave.api.getCallbackCollection;
			import weave.api.newDisposableChild;
			import weave.api.registerDisposableChild;
			import weave.core.LinkableFunction;
			import weave.core.LinkableWatcher;
			import weave.ui.AlertTextBox;
			import weave.ui.AlertTextBoxEvent;
			import weave.ui.VariableListController;
			import weave.utils.EventUtils;
			
			private const controller:VariableListController = newDisposableChild(this, VariableListController);
			private const macroWatcher:LinkableWatcher = registerDisposableChild(this, new LinkableWatcher(LinkableFunction, handleMacroChange));
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				controller.hashMap = LinkableFunction.macros;
				controller.allowMultipleSelection = false;
				controller.view = macroList;
				LinkableFunction.macros.childListCallbacks.addImmediateCallback(this, handleMacroChange, true);
				
				BindingUtils.bindSetter(setSelectedMacro, macroList, 'selectedItem');
			}
			
			public function get selectedMacro():LinkableFunction
			{
				return macroWatcher.target as LinkableFunction;
			}
			
			public function setSelectedMacro(value:LinkableFunction):void
			{
				if (macroList.selectedItem != value)
					macroList.selectedItem = value;
				macroWatcher.target = value;
			}
			
			public function get selectedMacroName():String
			{
				return controller.hashMap ? controller.hashMap.getName(selectedMacro) : '';
			}
			
			private function handleMacroChange():void
			{
				if (!controller.hashMap)
					return;
				
				setSelectedMacro(selectedMacro); // will set macroList.selectedItem if necessary
				
				if (!selectedMacro)
					setSelectedMacro(controller.hashMap.getObjects()[0] as LinkableFunction);
				
				result.text = '';
				if (selectedMacro)
				{
					editor.text = selectedMacro.value;
					EventUtils.callLaterThrottled(this, testMacro);
				}
				else
				{
					editor.text = '';
				}
			}
			private var updateMacroLater:Function = EventUtils.generateDelayedCallback(this, updateMacroNow, 500, true);
			
			private function updateMacroNow(macro:LinkableFunction):void
			{
				if (macro && macro == selectedMacro)
					macro.value = editor.text;
			}
			
			private function newMacro():void
			{
				AlertTextBox.show(
					lang("New macro"),
					lang("Enter a name for the new macro. The name should be a valid ActionScript identifier."),
					'',
					macroNameValidator
				).addEventListener(
					AlertTextBoxEvent.BUTTON_CLICKED,
					function(event:AlertTextBoxEvent):void
					{
						if (event.confirm == true)
							setSelectedMacro(controller.hashMap.requestObject(event.textInput, LinkableFunction, false));
					}
				);
			}
			private function renameMacro():void
			{
				AlertTextBox.show(
					lang("Rename macro"),
					lang('Enter a new name for the selected macro. The name should be a valid ActionScript identifier.'),
					selectedMacroName,
					macroNameValidator
				).addEventListener(
					AlertTextBoxEvent.BUTTON_CLICKED,
					function(event:AlertTextBoxEvent):void
					{
						if (event.confirm == true)
							setSelectedMacro(controller.hashMap.renameObject(selectedMacroName, event.textInput) as LinkableFunction);
					}
				);
			}
			private function deleteMacro():void
			{
				if (selectedMacro)
					controller.hashMap.removeObject(selectedMacroName);
			}
			private function testMacro(forced:Boolean = false):void
			{
				result.text = '';
				
				if (!selectedMacro)
					return;
				
				try
				{
					if (autoTest.selected || forced)
						result.text = LinkableFunction.evaluateMacro(selectedMacroName);
					else
						selectedMacro.validate();
					testButton.enabled = true;
				}
				catch(e:Error)
				{
					result.text = e.toString();
					testButton.enabled = false;
				}
			}
			
			private function macroNameValidator(name:String):Boolean
			{
				return !controller.hashMap.getObject(name)
					&& LinkableFunction.isValidSymbolName(name);
			}
		]]>
	</mx:Script>
</mx:VBox>