<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		 xmlns:ui="weave.ui.*"
		 verticalGap="0">
	<mx:Label text="{lang('Select attributes to include in mouseover info:')}"/>
	<ui:CheckBoxList id="list" translate="true"
					 paddingLeft="10" paddingTop="0" paddingBottom="0"
					 defaultSelectedState="true"/>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.getCallbackCollection;
			import weave.api.registerDisposableChild;
			import weave.api.ui.ISelectableAttributes;
			import weave.compiler.StandardLib;
			import weave.core.LinkableVariable;
			import weave.core.UIUtils;
			import weave.utils.ColumnUtils;
			
			private var target:ISelectableAttributes;
			private var selectedNames:LinkableVariable;
			private var prevNames:Array;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				list.labelFunction = lang;
				BindingUtils.bindSetter(handleList, list, 'selection');
			}
			
			/**
			 * @param target
			 * @param selectedNames A LinkableVariable containing an Array of selected names.
			 */
			public function setup(target:ISelectableAttributes, selectedNames:LinkableVariable):void
			{
				this.target = target;
				this.selectedNames = selectedNames;
				
				registerDisposableChild(selectedNames, this);
				if (target is ILinkableObject)
					getCallbackCollection(target as ILinkableObject).addGroupedCallback(this, handleTarget);
				selectedNames.addGroupedCallback(this, handleTarget);
				handleTarget();
			}
			
			private function handleTarget():void
			{
				var newNames:Array = target.getSelectableAttributeNames();
				if (StandardLib.compare(prevNames, newNames) != 0)
					list.dataProvider = prevNames = newNames;
				var state:Array = selectedNames ? selectedNames.getSessionState() as Array : null;
				if (StandardLib.getArrayType(state) == Boolean)
					list.selection = state;
				else
					list.selection = namesToBooleans(prevNames, state, list.defaultSelectedState);
			}
			
			private function handleList(selection:Array):void
			{
				if (selectedNames && UIUtils.hasFocus(list))
					selectedNames.setSessionState(booleansToNames(prevNames, selection, list.defaultSelectedState));
			}
			
			public static function namesToBooleans(selectableNames:Array, selection:Array, defaultSelectedState:Boolean = true):Array
			{
				return selectableNames.map(
					function(name:String, i:int, a:Array):Boolean {
						return selection ? selection.indexOf(name) >= 0 : defaultSelectedState;
					}
				);
			}
			
			public static function booleansToNames(selectableNames:Array, selection:Array, defaultSelectedState:Boolean = true):Array
			{
				return selectableNames.filter(
					function(name:String, i:int, a:Array):Boolean {
						if (!selection || selection[i] === undefined)
							return defaultSelectedState;
						return selection[i];
					}
				);
			}
			
			public static function getSelectedAttributeColumns(target:ISelectableAttributes, selectedNames:LinkableVariable, defaultSelectedState:Boolean = true):Array
			{
				var state:Array = selectedNames.getSessionState() as Array;
				var booleans:Array;
				if (StandardLib.getArrayType(state) == Boolean)
					booleans = state;
				else
					booleans = namesToBooleans(target.getSelectableAttributeNames(), state, defaultSelectedState);
				
				var columns:Array = [];
				var attrs:Array = target.getSelectableAttributes();
				for (var i:int = 0; i < attrs.length; i++)
				{
					if ((booleans[i] === undefined && defaultSelectedState) || booleans[i])
					{
						var column:IAttributeColumn = attrs[i] as IAttributeColumn;
						var wrapper:IColumnWrapper = attrs[i] as IColumnWrapper;
						if (wrapper)
							columns.push(ColumnUtils.hack_findInternalDynamicColumn(wrapper));
						else if (column)
							columns.push(column);
						
						var hashMap:ILinkableHashMap = attrs[i] as ILinkableHashMap;
						if (hashMap)
							columns.push(hashMap);
					}
				}
				return columns;
			}
		]]>
	</mx:Script>
</mx:VBox>
