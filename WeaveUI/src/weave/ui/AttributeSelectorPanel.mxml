<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<ControlPanel
	xmlns="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	title="{lang('Attribute Selector')}"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	backgroundColor="#EFF4BC" xmlns:editors="weave.editors.*"
	>
	<mx:VBox width="100%" height="100%" id="outerVBox" verticalGap="5">
		<mx:HBox id="paramSelector" verticalAlign="middle">
			<mx:Label text="Parameter to modify:"/>
			<CustomToggleButtonBar
				id="dimensionTypeLinks"
				width="100%"
				useHandCursor="true"
				dataProvider="{selectableAttributeNames.map(translateAttrName)}"
				itemClick="linkToObject(selectableAttributes[event.index], selectableAttributeNames[event.index], _overrideOwner);"/>
		</mx:HBox>
		<mx:VDividedBox width="100%" height="100%" id="verticalDividedBox">
			<editors:DynamicColumnEditor id="editor" width="100%" height="100%"/>
			<mx:HBox id="addColumnControls" width="100%">
				<mx:Spacer width="100%"/>
				<mx:Button
					label="{lang('Select all')}"
					click="editor.explorer.fileView.selectedItems = VectorUtils.getArrayFromCollection(editor.explorer.fileView.dataProvider as ICollectionView).reverse()"
					enabled="{editor.explorer.fileView.dataProvider.length > 0}"/>
				<mx:Button label="{lang('Add selected')}" click="addSelected()" enabled="{editor.explorer.fileView.selectedItem}"/>
			</mx:HBox>
			<ColumnListComponent id="columnList" width="100%" height="100%"/>
		</mx:VDividedBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.collections.ICollectionView;
			import mx.controls.Label;
			
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IColumnWrapper;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.getLinkableDescendants;
			import weave.api.getLinkableOwner;
			import weave.api.newDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.ISelectableAttributes;
			import weave.compiler.StandardLib;
			import weave.core.LinkableWatcher;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.editors.managers.DataSourceManager;
			import weave.menus.DataMenu;
			import weave.menus.WeaveMenuItem;
			import weave.utils.ColumnUtils;
			import weave.utils.VectorUtils;
			
			/**
			 * Used as a dummy target for the editor so it will try to find a node in the hierarchy.
			 */
			private const localDynamicColumn:DynamicColumn = newDisposableChild(this, DynamicColumn);
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				subMenuButton.data = WeaveMenuItem.createItems([
					{
						label: lang("Manage data sources"),
						click: function():void { DraggablePanel.openStaticInstance(DataSourceManager); }
					},
					subMenuButton.data
				]);
				
				minimizable.value = true;
				maximizable.value = true;
				
				closeable.value = true;
				closeable.lock();
			}
			
			override public function reposition():void
			{
				panelX.value = '' + int(22 + Math.random() * 6) + "%";
				panelY.value = '' + int(17 + Math.random() * 6) + "%";
				panelWidth.value = "50%";
				panelHeight.value = "60%";
			}
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				super.createChildren();

				registerLinkableChild(this, editor);
				registerLinkableChild(this, columnList);
				columnList.titleHBox.addChild(addColumnControls);
				getCallbackCollection(this).addImmediateCallback(this, invalidateDisplayList);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				columnList.selectorButton.visible = columnList.selectorButton.includeInLayout = false;
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (detectLinkableObjectChange(updateDisplayList, toolWatcher))
					handleTool();
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function addSelected():void
			{
				var columns:Array = editor.addMultipleColumns(columnList.hashMap, true);
				if (columns.length)
					columnList.beginEditVariableName(columns[0]);
			}
			
			private var selectableAttributes:Array = [];
			[Bindable] private var selectableAttributeNames:Array = [];
			
			private const toolWatcher:LinkableWatcher = registerLinkableChild(this, new LinkableWatcher(ISelectableAttributes), handleToolImmediately);
			
			private function handleToolImmediately():void
			{
				if (!toolWatcher.target)
					title = DEFAULT_TITLE;
			}
			
			private function handleTool():void
			{
				if (!parent)
					toolWatcher.target = null;
				
				var tool:ISelectableAttributes = toolWatcher.target as ISelectableAttributes;
				if (tool)
				{
					var attrs:Array = tool.getSelectableAttributes();
					var names:Array = tool.getSelectableAttributeNames();
					
					if (StandardLib.compare(attrs, selectableAttributes))
						selectableAttributes = attrs;
					
					if (StandardLib.compare(names, selectableAttributeNames))
						selectableAttributeNames = names;
					
					var index:int = attrs.indexOf(_linkedObject);
					if (index < 0)
						linkToObject(attrs[0], names[0], _overrideOwner);
					dimensionTypeLinks.selectedIndex = Math.max(0, index);
					
					title = ControlPanel.getControlPanelTitle(tool, TITLE_FORMAT);
				}
				else
				{
					selectableAttributes = [];
					selectableAttributeNames = [];
				}
				
				paramSelector.visible = paramSelector.includeInLayout = !!tool;
				columnList.visible = columnList.includeInLayout = !!columnList.hashMap;
			}
			
			private static function translateAttrName(name:String, i:int, a:Array):String
			{
				return lang(name);
			}
			
			private static const DEFAULT_TITLE:String = "Attribute selector";
			private static const TITLE_FORMAT:String = DEFAULT_TITLE + " for {0}";
			
			/**
			 * The last object that was passed in to linkToObject()
			 */
			private var _linkedObject:ILinkableObject = null;
			/**
			 * The last owner that was passed in to linkToObject()
			 */
			private var _overrideOwner:ISelectableAttributes;
			
			public function linkToObject(columnOrHashMap:ILinkableObject, objectTitle:String = null, owner:ISelectableAttributes = null):void
			{
				_linkedObject = columnOrHashMap;
				_overrideOwner = owner;
				
				var target:DynamicColumn = columnOrHashMap is IColumnWrapper
					? ColumnUtils.hack_findInternalDynamicColumn(columnOrHashMap as IColumnWrapper)
					: localDynamicColumn;
				editor.setTarget(target);
				columnList.hashMap = columnOrHashMap as ILinkableHashMap;
				
				editor.explorer.fileView.allowMultipleSelection = !!columnList.hashMap;
				columnList.visible = columnList.includeInLayout = !!columnList.hashMap;

				var tool:ISelectableAttributes = owner || getOwnerWithSelectableAttributes(columnOrHashMap);
				toolWatcher.target = tool;
				// make sure we call handleTool() later
				getCallbackCollection(toolWatcher).triggerCallbacks();
				if (tool)
				{
					targets = tool.getSelectableAttributes();
				}
				else
				{
					targets = columnOrHashMap ? [columnOrHashMap] : [];
					
					if (objectTitle)
						title = lang(TITLE_FORMAT, objectTitle);
					else
						title = lang(DEFAULT_TITLE);
				}
				
				if (target == localDynamicColumn)
				{
					// copy the session state from the first ReferencedColumn we find.
					var descendants:Array = getLinkableDescendants(columnOrHashMap, ReferencedColumn);
					if (!descendants.length && tool)
						descendants = getLinkableDescendants(tool);
					if (!descendants.length)
						descendants = getLinkableDescendants(WeaveAPI.globalHashMap, ReferencedColumn);
					if (descendants.length)
						localDynamicColumn.requestLocalObjectCopy(descendants[0] as ReferencedColumn);
				}
				
				columnList.label = objectTitle ? objectTitle : lang('Selected attributes');
			}
			
			override public function removePanel():void
			{
				editor.setTarget(null);
				super.removePanel();
			}
			
			///////////////////////////////////////////////////////////////////////
			
			public static function open(columnOrHashMap:ILinkableObject = null, title:String = null, showVariableNames:Boolean = false, owner:ISelectableAttributes = null):AttributeSelectorPanel
			{
				var instance:AttributeSelectorPanel = DraggablePanel.getStaticInstance(AttributeSelectorPanel);
				// if the panel is not currently visible, make sure the search input is empty
				if (!instance.parent && instance.editor && instance.editor.searchInput)
					instance.editor.searchInput.text = '';
				DraggablePanel.openStaticInstance(AttributeSelectorPanel);
				
				instance.linkToObject(columnOrHashMap, title, owner);
				instance.columnList.showVariableNames = showVariableNames;
				
				instance.reposition();
				instance.copyCoordinatesFromSessionedProperties();
				return instance;
			}
			public static function getOwnerWithSelectableAttributes(selectableAttribute:ILinkableObject, evenIfNotInSelectableAttributes:Boolean = false):ISelectableAttributes
			{
				var owner:ILinkableObject = getLinkableOwner(selectableAttribute);
				while (owner && !(owner is ISelectableAttributes))
					owner = getLinkableOwner(owner);
				
				var tool:ISelectableAttributes = owner as ISelectableAttributes;

				if (evenIfNotInSelectableAttributes)
					return tool;
				
				if (tool && tool.getSelectableAttributes().indexOf(selectableAttribute) >= 0)
					return tool;
				
				return null;
			}
		]]>
	</mx:Script>
</ControlPanel>
