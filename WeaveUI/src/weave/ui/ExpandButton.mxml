<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:LinkButton
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.ui.*"
	alpha="0.5" useHandCursor="true"
	width="20"
	height="20"
	includeInLayout="false"
	initialize="UIUtils.pad(event, 0);"
	addedToStage="handleAddedToStage(event);"
	removedFromStage="handleRemovedFromStage(event);"
	mouseDown="handleMouseDown(event);"
	>
	<mx:Script>
		<![CDATA[
			import mx.core.ScrollControlBase;
			import mx.core.UIComponent;
			
			import weave.core.UIUtils;
			
			[Bindable] public var expandedHeight:int = 96;
			[Bindable] public var unexpandedHeight:int = 22;
			
			private var _expanded:Boolean = false;
			
			[Bindable] public function get expanded():Boolean
			{
				return _expanded;
			}
			public function set expanded(value:Boolean):void
			{
				_expanded = value;
				apply();
			}
			
			private function handleAddedToStage(event:Event):void
			{
				parent.addEventListener(Event.RESIZE, handleParentResize);
				apply();
			}
			
			private function handleRemovedFromStage(event:Event):void
			{
				parent.removeEventListener(Event.RESIZE, handleParentResize);
				apply();
			}
			
			private function handleParentResize(event:Event):void
			{
				apply();
			}
			
			private function handleMouseDown(event:MouseEvent):void
			{
				expanded = !expanded;
				apply();
				callLater(focusLater);
			}
			
			private function focusLater():void
			{
				if (parent is UIComponent)
					(parent as UIComponent).setFocus();
			}
			
			public function apply():void
			{
				label = expanded ? '-' : '+';
				
				if (!parent)
					return;
				
				parent.height = expanded ? expandedHeight : unexpandedHeight;
				if (parent is ScrollControlBase)
					(parent as ScrollControlBase).verticalScrollPolicy = expanded ? 'on' : 'off';
				this.y = 1;
				this.x = parent.width - this.width - (expanded && parent is ScrollControlBase ? 16 : 1);
			}
			
			public static function makeExpandable(parent:UIComponent, expanded:Boolean = false, smallHeight:int = 22, largeHeight:int = 96):ExpandButton
			{
				var eb:ExpandButton = new ExpandButton();
				eb.expanded = expanded;
				eb.unexpandedHeight = smallHeight;
				eb.expandedHeight = largeHeight;
				parent.addChild(eb);
				return eb;
			}
		]]>
	</mx:Script>
</mx:LinkButton>
