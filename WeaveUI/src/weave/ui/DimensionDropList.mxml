<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author skolman
-->
<mx:List xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
		 dragEnabled="true"
		 dragMoveEnabled="true"
		 initialize="init();"
		 width="100%" implements="weave.api.core.ILinkableObject" dropEnabled="true">
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.List;
			import mx.core.IUIComponent;
			import mx.events.DragEvent;
			import mx.managers.DragManager;
			
			import weave.api.core.ILinkableObject;
			import weave.api.newLinkableChild;
			import weave.core.LinkableHashMap;
			import weave.data.AttributeColumns.DynamicColumn;
			
			private function init():void
			{
				hashMap.childListCallbacks.addGroupedCallback(this, updateDataProvider, true);
			}
			
			public const hashMap:LinkableHashMap = newLinkableChild(this, LinkableHashMap);
			
			private function updateDataProvider():void
			{
				this.dataProvider = hashMap.getObjects();
			}
			
			override protected function dragDropHandler(event:DragEvent):void
			{
				var items:Array = event.dragSource.dataForFormat("items") as Array;
				for each (var object:ILinkableObject in items)
					hashMap.requestObjectCopy(null, object);
			}
			
			override protected function dragEnterHandler(event:DragEvent):void
			{
				
				if(event.dragSource.hasFormat("items"))
				{
					var items:Array = event.dragSource.dataForFormat("items") as Array;
					if (items[0] is DynamicColumn)
						DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
				}
			}
			
			override protected function dragCompleteHandler(event:DragEvent):void
			{
				super.dragCompleteHandler(event);
				
				var objects:Array = hashMap.getObjects();
				
				for each (var object:ILinkableObject in objects)
				{
					if(!(this.dataProvider as ArrayCollection).contains(object))
						hashMap.removeObject(hashMap.getName(object));
				}
			}
		]]>
	</mx:Script>
</mx:List>
