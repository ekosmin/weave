<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
	@author skolman
	@author adufilie
-->
<ControlPanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml"
			  backgroundColor="#EFF4BC"
			  title="{lang('Equation Column Editor')}">
	
	<mx:HDividedBox id="equationContainer" width="100%" height="100%"
			paddingBottom="{padding}" paddingTop="{padding}" paddingRight="{padding}" paddingLeft="{padding}"
		>
		<mx:VBox width="100%" height="100%">
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:Label text="{lang('Active equation')}"/>
				<CustomComboBox id="activeEquationCombo"
								prompt="{lang('Select an equation...')}"
								labelFunction="{getActiveEquationLabel}"
								change="handleActiveEquationSelect()"
								width="100%"/>
				<mx:Button label="{lang('New...')}" click="createNewEquation()"/>
				<mx:Button label="{lang('Remove')}" enabled="{activeEquationCombo.selectedItem != null}" click="removeActiveEquation()"/>
			</mx:HBox>
			<mx:VBox width="100%" height="100%" enabled="{activeEquationCombo.selectedItem != null}">
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="{lang('Title')}"/>
					<mx:TextInput id="titleInput" toolTip="{lang('Enter a title for this column.')}" width="100%"/>
				</mx:HBox>
				<mx:VDividedBox width="100%" height="100%">
					<CustomTabNavigator initialize="UIUtils.pad(event, padding, 100, 100)">
						<mx:VBox label="{lang('Code')}" verticalGap="0">
							<CodeEditor id="textEditor"/>
							<Paragraph id="errorDisplay" condenseWhite="false" text="{textEditor.errorString}" color="#D00000" fontWeight="bold"/>
						</mx:VBox>
						<mx:Canvas label="{lang('Help')}" width="100%" height="100%" verticalScrollPolicy="on">
							<Paragraph selectable="true" translate="true">
								The Weave data framework requires that all columns provide a mapping from keys to data values.
								The Equation Column allows you to input a script that generates derived data for each record key.
								The script you enter in the Code view will be evaluated for each record with Weave's built-in
								compiler, which supports a subset of ActionScript.
								
								First add the columns you are interested in as variables below.
								It is recommended to give the variables simple names which are valid ActionScript symbol names like "a" and "b".
								To retrieve a value from a column variable, you can use the getNumber() or getString() function,
								depending on whether you need the numeric value or the text value.
								
								For example, to get the sum of the corresponding values from two column variables "a" and "b",
								you could use the following script:  return getNumber(a) + getNumber(b);
							</Paragraph>
						</mx:Canvas>
					</CustomTabNavigator>
					<ColumnListComponent label="{lang('Variables')}" showVariableNames="true" hashMap="{equationColumn.variables}" width="100%" height="100%"/>
				</mx:VDividedBox>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
			<mx:Label text="{lang('Available functions')}"/>
			<mx:Accordion id="functionLists" height="100%" width="100%"/>
		</mx:VBox>
	</mx:HDividedBox>
	<mx:Fade id="fadeIn" duration="800" alphaFrom="0.0" alphaTo="1.0"/>
	<mx:Fade id="fadeOut" duration="800" alphaFrom="1.0" alphaTo="0.0"/>
	
	<mx:Script>
		<![CDATA[
			import avmplus.DescribeType;
			
			import mx.controls.List;
			import mx.controls.TextInput;
			
			import weave.api.copySessionState;
			import weave.api.data.ColumnMetadata;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.unlinkSessionState;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.utils.EventUtils;
			
			private const padding:int = 5;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				minimizable.value = maximizable.value = closeable.value = true;
				closeable.lock();
			}
			
			override public function reposition():void
			{
				panelWidth.value = "700";
				panelHeight.value = "500";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				sessionEditorTarget = dynamicColumn.getInternalColumn;

				var constantVBox:VBox = new VBox();
				constantVBox.percentWidth = 100;
				constantVBox.percentHeight = 100;
				constantVBox.label = lang('Constants');
				var constants:Array = new Array();
				
				var libraries:Array = EquationColumn.compiler.getAllLibraries();
				for each (var library:Object in libraries)
				{
					var functions:Array = new Array();
					
					var classInfo:Object = DescribeType.getInfo(
						library,
						DescribeType.INCLUDE_TRAITS |
						DescribeType.INCLUDE_VARIABLES |
						DescribeType.INCLUDE_METHODS |
						DescribeType.INCLUDE_METADATA |
						DescribeType.HIDE_NSURI_METHODS
					);
					var item:Object;
					for each (item in classInfo.traits.variables)
					{
						if (!item.uri && item.access == 'readonly' && item.name != 'VERSION')
							constants.push(item);
					}
					for each (item in classInfo.traits.methods)
					{
						if (!item.uri)
							functions.push(item);
					}
					
					functions.sortOn("name", Array.CASEINSENSITIVE);
					
					var listVBox:VBox = new VBox();
					listVBox.percentWidth = 100;
					listVBox.percentHeight = 100;
					listVBox.label = classInfo.name;
					var lastIndex:int = listVBox.label.lastIndexOf(":");
					if(lastIndex != -1)
						listVBox.label = listVBox.label.substring(lastIndex+1,listVBox.label.length);
					var functionList:List = new List();
					functionList.dataProvider = functions; 
					functionList.labelFunction= getFunctionLabel;
					functionList.minHeight = 0;
					functionList.percentWidth = 100;
					functionList.doubleClickEnabled = true;
					functionList.rowCount = functionList.dataProvider.length;
					functionList.setStyle("borderStyle","none");
					listVBox.addChild(functionList);
					
					functionLists.addChild(listVBox);
				}
			
				constants.sortOn("name",Array.CASEINSENSITIVE);
				
				var constantsList:List = new List();
				constantsList.dataProvider = constants; 
				constantsList.labelFunction = getFunctionLabel;
				constantsList.minHeight = 0;
				constantsList.percentWidth = 100;
				constantsList.rowCount = constantsList.dataProvider.length;
				constantsList.setStyle("borderStyle", "none");
				constantVBox.addChild(constantsList);
				
				functionLists.addChild(constantVBox);
				functionLists.minHeight = 256;
				
				titleInput.text = equationColumn.getMetadata(ColumnMetadata.TITLE);
				EventUtils.addDelayedEventCallback(titleInput, Event.CHANGE, handleTitleTextEntry);
				equationColumn.addImmediateCallback(this,handleTitleSessionStateChange);
				
				
				textEditor.text = equationColumn.equation.value;
				EventUtils.addDelayedEventCallback(textEditor, Event.CHANGE, handleEquationTextEntry);
				equationColumn.equation.addImmediateCallback(this,handleEquationSessionStateChange);
				
				WeaveAPI.globalHashMap.childListCallbacks.addImmediateCallback(this, updateActiveEquationCombo, true);
				activeEquationCombo.selectedIndex = 0;
				handleActiveEquationSelect();
				if (!dynamicColumn.globalName)
					createNewEquation();
				
				this.targets = [dynamicColumn];
			}
			
			public const dynamicColumn:DynamicColumn = registerLinkableChild(this, new DynamicColumn(EquationColumn), handleGlobalColumnChange);
			private const equationColumn:EquationColumn = newLinkableChild(this, EquationColumn);
			
			private function getActiveEquationLabel(eqCol:EquationColumn):String
			{
				return eqCol.getMetadata(ColumnMetadata.TITLE) || lang('Untitled');
			}
			private function handleActiveEquationSelect():void
			{
				dynamicColumn.globalName = WeaveAPI.globalHashMap.getName(activeEquationCombo.selectedItem as EquationColumn);
			}
			private function updateActiveEquationCombo():void
			{
				var columns:Array = WeaveAPI.globalHashMap.getObjects(EquationColumn);
				activeEquationCombo.dataProvider = columns;
				activeEquationCombo.selectedItem = dynamicColumn.getInternalColumn();
				activeEquationCombo.enabled = !!columns.length;
			}
			private function createNewEquation():void
			{
				var newEquation:EquationColumn = WeaveAPI.globalHashMap.requestObject(null, EquationColumn, false);
				if (dynamicColumn.globalName) // if something is selected, create a blank column
				{
					newEquation.setMetadataProperty(ColumnMetadata.TITLE, WeaveAPI.globalHashMap.getName(newEquation));
				}
				else // when nothing is selected, copy session state to new column so nothing is lost
				{
					copySessionState(equationColumn, newEquation);
				}
				activeEquationCombo.selectedItem = newEquation;
				dynamicColumn.globalName = WeaveAPI.globalHashMap.getName(newEquation);
			}
			private function removeActiveEquation():void
			{
				WeaveAPI.globalHashMap.removeObject(dynamicColumn.globalName);
			}
			
			private var _previousGlobalColumn:EquationColumn = null;
			private function handleGlobalColumnChange():void
			{
				var shouldSave:Boolean = false;
				if (_previousGlobalColumn != dynamicColumn.getInternalColumn() as EquationColumn)
				{
					if (_previousGlobalColumn)
						unlinkSessionState(_previousGlobalColumn, equationColumn);
					_previousGlobalColumn = dynamicColumn.getInternalColumn() as EquationColumn;
					if (_previousGlobalColumn)
						linkSessionState(_previousGlobalColumn, equationColumn);
					shouldSave = true;
				}
				activeEquationCombo.selectedItem = dynamicColumn.getInternalColumn();
				handleActiveEquationSelect();
				if (shouldSave)
					save();
			}
			
			private function getFunctionLabel(item:Object):String
			{
				if (item.access == 'readonly')
					return item.name;
				var label:String = item.name + "(";
				var params:Array = item.parameters;
				for (var i:int = 0; i < params.length; i++)
				{
					if (i > 0)
						label += ',';
					label += String(params[i].type).split("::").pop();
				}
				label += ")";
				return label;
			}
			
			private function handleTitleTextEntry():void
			{
				equationColumn.setMetadataProperty(ColumnMetadata.TITLE, titleInput.text);
			}
			private function handleTitleSessionStateChange():void
			{
				// get the actual metadata string instead of the result of applying the title function
				if (equationColumn.metadata.value)
					titleInput.text = equationColumn.metadata.value[ColumnMetadata.TITLE];
			}
			
			
			private function handleEquationTextEntry():void
			{
				equationColumn.equation.value = textEditor.text;
			}
			private function handleEquationSessionStateChange():void
			{
				textEditor.text = equationColumn.equation.value;
				errorDisplay.text = equationColumn.validateEquation();
			}
		]]>
	</mx:Script>
	
</ControlPanel>
