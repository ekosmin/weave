<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				implements="weave.api.ui.IVisTool_Utility, weave.api.ui.ISelectableAttributes,weave.api.core.IDisposableObject"
				layout="vertical" xmlns:tools="weave.visualization.tools.*" xmlns:editors="weave.editors.*">
	
	<CustomViewStack id="layoutViewStack" width="100%" height="100%">
		<mx:Canvas label="{lang('List')}">
			<mx:List id="choiceList" width="100%" height="100%"
					 labelFunction="choiceLabelFunction"
					 change="handleAttrSelected(choiceList.selectedIndex);"
					 backgroundAlpha="0" borderStyle="none"
					 />
		</mx:Canvas>
		<mx:Canvas label="{lang('Combo Box')}">
			<CustomComboBox id="choiceCombo"
							width="100%" height="100%" minHeight="0"
							cornerRadius="0" highlightAlphas="{[0, 0]}" fillAlphas="{[0, 0]}"
							labelFunction="choiceLabelFunction">
				<valueCommit>
					<![CDATA[
						if (!_settingComboSelection && UIUtils.hasFocus(choiceCombo))
						{
							_settingComboSelection = true;
							var tc:int = selectedAttribute.triggerCounter;
							handleAttrSelected(choiceCombo.selectedIndex);
							if (tc == selectedAttribute.triggerCounter)
								handleSelectedAttributeChange();
							_settingComboSelection = false;
						}
					]]>
				</valueCommit>
			</CustomComboBox>
		</mx:Canvas>
		<mx:Canvas label="{lang('Vertical Slider')}">
			<mx:VSlider id="choiceVSlider" liveDragging="true" tickInterval="1"
						width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
						change="if (UIUtils.hasFocus(choiceVSlider)) handleAttrSelected(choiceVSlider.maximum - choiceVSlider.value);"
						mouseDown="choiceVSlider.setFocus()"
						/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
		</mx:Canvas>
		<mx:Canvas label="{lang('Horizontal Slider')}">
			<mx:HBox verticalAlign="middle" width="100%" height="100%">
				<mx:VBox creationComplete="UIUtils.linkVisibility(this, showPlayButton, event.target)" horizontalAlign="center">
					<mx:Button id="playButton" label="&gt;" toggle="true" toolTip="{lang('Play')}" click="handlePlayClick();"/>
					<mx:HSlider id="playSlider" fillAlphas="{[1, 1]}" width="48" minWidth="0" minimum=".5" maximum="2" tickInterval="0.5" snapInterval="0.25" value=".75" dataTipFormatFunction="{formatPlayTip}" liveDragging="true"/>
				</mx:VBox>
				<mx:HSlider id="choiceHSlider" fillAlphas="{[1, 1]}" liveDragging="true" tickInterval="1"
							width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
							change="if (UIUtils.hasFocus(choiceHSlider)) handleAttrSelected(choiceHSlider.value);"
							mouseDown="choiceHSlider.setFocus()"
							/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
			</mx:HBox>
		</mx:Canvas>
	</CustomViewStack>
	
	<editorFactory><mx:Component><ControlPanel>
		<mx:VBox width="100%" label="{lang('Settings')}">
			<Indent label="{lang('Visualization tool')}">
				<CustomComboBox prompt="{lang('Select a tool...')}" id="targetToolCombo" enabled="{targetToolCombo.dataProvider.length > 0}"
								labelFunction="{toolLabelFunction}"
								valueCommit="if (UIUtils.hasFocus(targetToolCombo)) outerDocument.targetToolPath.setSessionState(_stringToPath[targetToolCombo.selectedItem]);" />
				<HelpComponent>
					Select the visualization tool that you want the attribute menu to be linked to.
				</HelpComponent>
			</Indent>
			<Indent label="{lang('Visualization attribute')}">
				<CustomComboBox prompt="{lang('Select an attribute...')}" id="targetAttributeCombo" enabled="{targetAttributeCombo.dataProvider.length > 0}"
								initialize="targetAttributeCombo.labelFunction = lang;"
								valueCommit="if (UIUtils.hasFocus(targetAttributeCombo)) outerDocument.targetAttribute.setSessionState(targetAttributeCombo.selectedItem);"/>
				<HelpComponent>
					Select the visualization attribute that you want the menu to be linked to.
				</HelpComponent>
			</Indent>
			<Indent label="{lang('Menu layout')}">
				<CustomComboBox id="layoutCombo" prompt="{lang('Select a layout...')}" labelFunction="{AttributeMenuTool.layoutLabelFunction}"
								dataProvider="{AttributeMenuTool.layouts}"/>
				<HelpComponent>
					Select the layout for the attribute menu.
				</HelpComponent>
			</Indent>
			<Indent label="Layout options" translate="true"
					visible="{layoutCombo.selectedItem == 'HSlider'}"
					includeInLayout="{layoutCombo.selectedItem == 'HSlider'}">
				<mx:CheckBox id="showPlayButtonCheck" label="{lang('Show play button')}"
							 creationComplete="linkBindableProperty(outerDocument.showPlayButton, showPlayButtonCheck, 'selected');"/>
				<mx:CheckBox id="autoPlayRepeatCheck" label="{lang('Loop')}"
							 creationComplete="linkBindableProperty(outerDocument.autoPlayRepeat, autoPlayRepeatCheck, 'selected');"/>
			</Indent>
			<Indent label="Layout options" translate="true"
					visible="{layoutCombo.selectedItem == 'ComboBox'}"
					includeInLayout="{layoutCombo.selectedItem == 'ComboBox'}">
				<Indent label="Prompt" translate="true">
					<mx:TextInput width="100%"
								  creationComplete="linkBindableProperty(outerDocument.prompt, event.target, 'text')"/>
					<CustomCheckBox label="{lang('Always show')}"
									creationComplete="linkBindableProperty(outerDocument.alwaysShowPrompt, event.target, 'selected')"/>
				</Indent>
			</Indent>
			<ColumnListComponent id="choicesComponent" label="{lang('Attributes to appear in the menu')}" />
			<Indent label="{lang('Label function')}">
				<mx:TextInput width="100%" creationComplete="linkBindableProperty(outerDocument.labelFunction, event.target, 'text');"/>
				<mx:Button label="{lang('Reset')}" click="outerDocument.labelFunction.value = outerDocument.DEFAULT_LABEL_FUNCTION;"/>
			</Indent>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{outerDocument}"/>
		<mx:Script>
			<![CDATA[
				import weave.api.core.ILinkableHashMap;
				import weave.api.core.ILinkableObject;
				import weave.api.data.IColumnWrapper;
				import weave.api.getCallbackCollection;
				import weave.api.linkBindableProperty;
				import weave.api.ui.ISelectableAttributes;
				import weave.compiler.Compiler;
				import weave.compiler.StandardLib;
				import weave.core.SessionManager;
				import weave.core.UIUtils;
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					choicesComponent.hashMap = outerDocument.choices;
					linkBindableProperty(outerDocument.layoutMode, layoutCombo, 'selectedItem');
					(WeaveAPI.SessionManager as SessionManager).addTreeCallback(this, function():void { _recheckDescendants = true; }, true);
					getCallbackCollection(outerDocument.toolWatcher).addGroupedCallback(this, handleToolChange);
					outerDocument.targetAttribute.addImmediateCallback(this, handleTargetAttributeChange);
					handleToolChange();
					outerDocument.targetToolPath.addGroupedCallback(this, updateToolComboText, true);
					targetToolCombo.addEventListener(MouseEvent.MOUSE_DOWN, updateTargetToolComboDataProvider, true);
					targetToolCombo.addEventListener(KeyboardEvent.KEY_DOWN, updateTargetToolComboDataProvider, true);
					updateTargetToolComboDataProvider();
				}
				
				private function updateToolComboText():void
				{
					var path:Array = outerDocument.targetToolPath.getSessionState() as Array;
					if (path)
						targetToolCombo.text = toolLabelFunction(pathToString(path));
					else
						targetToolCombo.selectedIndex = -1;
				}

				private var _recheckDescendants:Boolean = true;
				private var _prevDescendants:Array;
				
				// called whenever a global object gets added/removed/reordered
				private function updateTargetToolComboDataProvider(event:Event = null):void
				{
					if (!parent)
					{
						callLater(updateTargetToolComboDataProvider);
						return;
					}
					
					if (!_recheckDescendants)
						return;
					
					// update the list of tools
					var descendants:Array = WeaveAPI.SessionManager.getLinkableDescendants(WeaveAPI.globalHashMap, ISelectableAttributes);
					
					// two filter passes because the filter function may modify the array on the first pass
					descendants = descendants.filter(outerDocument.filterDescendants).filter(outerDocument.filterDescendants).map(objectToPathString);
					
					StandardLib.sort(descendants);
					if (StandardLib.compare(_prevDescendants, descendants) != 0)
						targetToolCombo.dataProvider = _prevDescendants = descendants;
					// make sure the correct item is selected
					targetToolCombo.selectedItem = pathToString(outerDocument.targetToolPath.getSessionState() as Array);
					
					if (_prevDescendants.length)
						_recheckDescendants = false;
				}
				
				private var _stringToPath:Object = {};
				private function pathToString(path:Array, i:int = 0, a:Array = null):String
				{
					var str:String = Compiler.stringify(path);
					_stringToPath[str] = path;
					return str;
				}
				private function objectToPathString(object:ILinkableObject, i:int, a:Array):String
				{
					var path:Array = WeaveAPI.getPath(object);
					return pathToString(path);
				}
				
				private function toolLabelFunction(str:String):String
				{
					var path:Array = _stringToPath[str];
					if (!path)
						return null;
					
					if (path.length == 1)
						return path[0];
					
					// ["MapTool", "children", "visualization", "plotManager", "plotters", "Rectangles"]
					if (path.length == 6 && StandardLib.compare(path.slice(1, 5), ["children", "visualization", "plotManager", "plotters"]) == 0)
						return lang("{0} (Layer: {1})", path[0], path[5]);
					
					return str;
				}
				
				private var _attrs:Array = [];
				private var _attrNames:Array = [];
				private function handleToolChange():void
				{
					if (!parent)
					{
						callLater(handleToolChange)
						return;
					}
					// make sure the correct item is selected
					targetToolCombo.selectedItem = pathToString(outerDocument.targetToolPath.getSessionState() as Array);
					
					var tool:ISelectableAttributes = outerDocument.getTargetTool();
					// update the list of available attributes
					if (tool)
					{
						var names:Array = tool.getSelectableAttributeNames() || [];
						var attrs:Array = tool.getSelectableAttributes() || [];
						if (StandardLib.compare(names, _attrNames) || StandardLib.compare(attrs, _attrs))
						{
							_attrs = attrs;
							targetAttributeCombo.dataProvider = _attrNames = names;
						}
					}
					else if (_attrNames.length)
					{
						_attrs = [];
						targetAttributeCombo.dataProvider = _attrNames = [];
					}
					
					// after we set the data provider, we have to make sure the correct item is selected
					handleTargetAttributeChange();
				}
				
				private function handleTargetAttributeChange():void
				{
					var index:Number = outerDocument.targetAttributeIndex;
					var obj:Object = _attrs[index];
					// is it a compatible object?
					var compatible:Boolean = obj is IColumnWrapper || obj is ILinkableHashMap;
					
					// make sure the correct item is selected
					targetAttributeCombo.selectedIndex = compatible ? index : -1;
				}
			]]>
		</mx:Script>
	</ControlPanel></mx:Component></editorFactory>
	<mx:Script>
		<![CDATA[
			import weave.api.detectLinkableObjectChange;
			import weave.api.objectWasDisposed;
			import mx.core.UIComponent;
			
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.core.ISessionManager;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkableObjectIsBusy;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.ISelectableAttributes;
			import weave.api.ui.IPlotter;
			import weave.api.ui.IVisTool;
			import weave.compiler.Compiler;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableFunction;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.core.LinkableVariable;
			import weave.core.LinkableWatcher;
			import weave.core.SessionManager;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.tools.SimpleVisTool;

			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, AttributeMenuTool, "Attribute Menu Tool");

			private static const ALL_INSTANCES:Dictionary = new Dictionary(true); // AMT -> true
			
			internal const DEFAULT_LABEL_FUNCTION:String = 'column.getMetadata("title")';
			
			private function handlePlayClick():void
			{
				lastFrame = getTimer() - 1000 / playSlider.value / 2;
				
				// when play is started, repeat is off, and last attr is selected, select first attr.
				if (playButton.selected && !autoPlayRepeat.value)
				{
					var n:int = choices.getNames().length;
					if (choiceHSlider.value == n - 1)
					{
						lastFrame = getTimer();
						handleAttrSelected(0);
					}
				}
			}
			
			private var lastFrame:int = 0;
			private function enterFrame(event:Event):void
			{
				if (playButton.selected)
				{
					// wait until not busy
					if (linkableObjectIsBusy(WeaveAPI.globalHashMap))
						return;
					if (lastFrame == 0 || getTimer() > lastFrame + 1000 / playSlider.value)
					{
						if (lastFrame)
						{
							var n:int = choices.getNames().length;
							if (choiceHSlider.value == n - 1 && !autoPlayRepeat.value)
							{
								playButton.selected = false;
							}
							else
							{
								handleAttrSelected((choiceHSlider.value + 1) % n);
							}
						}
						lastFrame = getTimer();
					}
				}
			}
			private function formatPlayTip(value:Number):String
			{
				if (value == 1)
					return lang('1 frame per second');
				return value + lang(' frames per second');
			};
			
			public const prompt:LinkableString = registerLinkableChild(this, new LinkableString(lang('Select an attribute...')));
			public const alwaysShowPrompt:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), handleSelectedAttributeChange);
			public const targetToolPath:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array));
			public const targetAttribute:LinkableVariable = registerLinkableChild(this, new LinkableVariable(null, verifyTargetAttribute));
			public const choices:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const layoutMode:LinkableString = registerLinkableChild(this, new LinkableString(layouts[0], verifyLayoutMode));
			public const labelFunction:LinkableFunction = registerLinkableChild(this, new LinkableFunction(DEFAULT_LABEL_FUNCTION, true, false, ['column']), handleChoicesChange);
			public const selectedAttribute:LinkableString = newLinkableChild(this, LinkableString, handleSelectedAttributeChange);
			public const useChoiceIndex:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), handleSelectedAttributeChange, true);
			public const showPlayButton:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			public const autoPlayRepeat:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			internal const toolWatcher:LinkableWatcher = registerLinkableChild(this, new LinkableWatcher(ISelectableAttributes), handleToolChange, true);
			private var _attrNames:Array = [];
			private var _attrs:Array = [];
			private var _settingComboSelection:Boolean = false;
			
			private function verifyTargetAttribute(value:*):Boolean
			{
				return value is Number || value is String || value == null;
			}
			
			public function getSelectedLabel():String
			{
				var selected:String = selectedAttribute.value;
				var column:IAttributeColumn;
				if (useChoiceIndex.value)
					column = (choices.getObjects()[selected]) as IAttributeColumn;
				else
					column = choices.getObject(selectedAttribute.value) as IAttributeColumn;
				return choiceLabelFunction(column);
			}
			
			private function choiceLabelFunction(column:IAttributeColumn):String
			{
				var result:String = ColumnUtils.getTitle(column);
				if (labelFunction.value)
				{
					try
					{
						result = labelFunction.apply(this, [column]) || '';
					}
					catch (e:Error)
					{
						result = '';
					}
				}
				return result;
			}
			
			internal static const layouts:Array = ["List", "ComboBox", "VSlider", "HSlider"];
			internal static const layoutLabels:Array = [lang('List'), lang('Combo Box'), lang('Vertical Slider'), lang('Horizontal Slider')];
			private static function verifyLayoutMode(value:String):Boolean { return layouts.indexOf(value) >= 0; }
			
			internal static function layoutLabelFunction(inputString:String):String
			{
				return layoutLabels[layouts.indexOf(inputString)];
			}
			
			override protected function inConstructor():void
			{
				super.inConstructor();

				ALL_INSTANCES[this] = true;

				// have a default dynamic title
				panelTitle.value = lang('Attribute menu for {0}', '{targetAttributeName}');
				
				// have some default choices ready when the tool is created
				copySessionState(ProbeTextUtils.probedColumns, choices);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				var ltf:LinkableTextFormat = LinkableTextFormat.defaultTextFormat;
				var target:UIComponent = this;
				getCallbackCollection(ltf).addGroupedCallback(this, function():void {
					ltf.copyToStyle(target);
					ltf.copyToStyle(choiceCombo);
				}, true);
				
				addEventListener(Event.ENTER_FRAME, enterFrame);
				
				// Since we're adding these callbacks after the children have been created,
				// we don't have to worry about ui components being null inside the callbacks.
				(WeaveAPI.SessionManager as SessionManager).addTreeCallback(this, validateToolWatcherTarget, true);
				targetToolPath.addGroupedCallback(this, validateToolWatcherTarget, true);
				targetAttribute.addImmediateCallback(this, handleSelectedAttributeChange, true);
				choices.addGroupedCallback(this, handleChoicesChange, true);
				showPlayButton.addImmediateCallback(this, stopPlay);
				
				// backwards compatibility
				panelTitle.addImmediateCallback(this, function():void {
					panelTitle.value = StandardLib.replace(panelTitle.value || '', "targetAttribute.value", "targetAttributeName");
				});
				
				layoutMode.addImmediateCallback(this, handleLayoutMode);
				linkBindableProperty(prompt, choiceCombo, 'prompt');
			}
			
			private function stopPlay():void
			{
				if (playButton)
					playButton.selected = false;
			}
			
			private function handleLayoutMode():void
			{
				stopPlay();
				layoutViewStack.selectedIndex = layouts.indexOf(layoutMode.value);
			}
			
			// this returns the tool object corresponding to the selected item in the toolCombo
			public function getTargetTool():ISelectableAttributes
			{
				return toolWatcher.target as ISelectableAttributes;
			}
			
			public function get targetAttributeName():String
			{
				var ta:Object = targetAttribute.getSessionState();
				if (ta is Number)
					return _attrNames[ta];
				return ta as String;
			}
			
			public function get targetAttributeIndex():Number
			{
				var ta:Object = targetAttribute.getSessionState();
				if (ta is Number)
					return ta as Number;
				return _attrNames.indexOf(ta);
			}
			
			internal function filterDescendants(that:ISelectableAttributes, i:int, all:Array):Boolean
			{
				if (!that || that == this)
					return false;
				if (that.getSelectableAttributes().length == 0)
					return false;
				if (that is SimpleVisTool)
				{
					// skip the main plotter of a SimpleVisTool
					var mainPlotter:IPlotter = (that as SimpleVisTool).visualization.getMainPlotter();
					var indexOfMainPlotter:int = all.indexOf(mainPlotter);
					if (mainPlotter && indexOfMainPlotter >= 0)
						all[indexOfMainPlotter] = this; // skip the main plotter
					
					if (hack_skipToolTargets[that])
						return false;
				}
				return true;
			}
			
			/**
			 * Temporary solution for excluding objects from the tool selector combo.
			 */
			public static const hack_skipToolTargets:Dictionary = new Dictionary(true);
			
			private function validateToolWatcherTarget():void
			{
				toolWatcher.targetPath = targetToolPath.getSessionState() as Array;
				
				// backwards compatibility
				var tool:ISelectableAttributes = getTargetTool();
				if (tool)
				{
					var attrNames:Array = tool.getSelectableAttributeNames();
					if (attrNames.length == 0 || attrNames.indexOf(targetAttributeName) < 0)
					{
						var sm:ISessionManager = WeaveAPI.SessionManager;
						var descendants:Array = sm.getLinkableDescendants(tool, ISelectableAttributes);
						descendants = descendants.filter(filterDescendants).filter(filterDescendants);
						if (descendants.length)
						{
							tool = descendants[0];
							if (tool.getSelectableAttributeNames().indexOf(targetAttributeName) >= 0)
							{
								var path:Array = sm.getPath(WeaveAPI.globalHashMap, tool);
								targetToolPath.setSessionState(path);
								toolWatcher.targetPath = path;
							}
						}
					}
				}
			}
			
			// called when the tool triggers callbacks
			private function handleToolChange():void
			{
				if (!parent)
				{
					callLater(handleToolChange)
					return;
				}
				
				var tool:ISelectableAttributes = getTargetTool();
				// update the list of available attributes
				if (tool)
				{
					_attrNames = tool.getSelectableAttributeNames() || [];
					_attrs = tool.getSelectableAttributes() || [];
				}
				else if (_attrNames.length)
				{
					_attrNames = [];
					_attrs = [];
				}
				
				// after we set the data provider, we have to make sure the correct item is selected
				handleSelectedAttributeChange();
			}
			
			// called when the admin alters the choices through the control panel
			private function handleChoicesChange():void
			{
				if (!parent)
				{
					callLater(handleChoicesChange);
					return;
				}
				
				// update the list of column objects available through the main window combo box
				choiceCombo.dataProvider = choices.getObjects();
				choiceList.dataProvider = choices.getObjects();
				
				// get a list of labels
				var columns:Array = choices.getObjects();
				var names:Array = [];
				for (var i:uint = 0; i < columns.length; i++)
					names[i] = choiceLabelFunction(columns[i]);
				
				// special case for VSlider -- reverse order
				choiceVSlider.labels = names.concat().reverse();
				choiceHSlider.labels = names;
				choiceVSlider.maximum = names.length - 1;
				choiceHSlider.maximum = names.length - 1;
			}
			
			// called when the user clicks on the combo in the main AttributeMenuTool window
			private function handleAttrSelected(selectedIndex:int):void
			{
				// get the column object the user clicked on
				var choiceNames:Array = choices.getNames(IAttributeColumn);
				var selectedName:String = choiceNames[selectedIndex];
				
				if (useChoiceIndex.value && selectedAttribute.value != selectedIndex.toString())
				{
					// setting this will cause a recursive call, so we can return afterwards
					selectedAttribute.value = selectedIndex.toString();
					return;
				}
				if (!useChoiceIndex.value && selectedAttribute.value != selectedName)
				{
					// setting this will cause a recursive call, so we can return afterwards
					selectedAttribute.value = selectedName;
					return;
				}
				
				var selectedAttr:IAttributeColumn = choices.getObject(selectedName) as IAttributeColumn;
				
				var tool:ISelectableAttributes = getTargetTool();
				// do nothing if there is no tool
				if (!tool)
					return;
				
				// find the index of the tool attribute selected in the control panel
				var index:Number = targetAttributeIndex;
				
				// stop if target attribute is not configured properly or session state is not initialized yet
				if (index < 0 || index >= _attrs.length)
					return;
				
				// Note that this is not a complete solution since restarting Weave may cause
				// the selected attribute from multiple AttributeMenuTools to apply in a
				// different order on startup.
				if (!detectLinkableObjectChange(handleAttrSelected, targetToolPath, targetAttribute, selectedAttribute, useChoiceIndex, choices))
					return;
				
				// using the index, get the corresponding "SelectableAttribute" from the tool
				var dynamicColumn:DynamicColumn = ColumnUtils.hack_findInternalDynamicColumn(_attrs[index] as IColumnWrapper);
				var hashMap:ILinkableHashMap = _attrs[index] as ILinkableHashMap;
				
				if (hashMap)
				{
					ColumnUtils.forceFirstColumnDynamic(hashMap);
					dynamicColumn = hashMap.getObjects(IAttributeColumn)[0];
				}
				
				// use the same hack used by the AttributeSelectorPanel to find a nested dynamic column.
				dynamicColumn = ColumnUtils.hack_findInternalDynamicColumn(dynamicColumn);
				
				if (dynamicColumn)
				{
					if (selectedAttr)
						dynamicColumn.requestLocalObjectCopy(selectedAttr);
				}
				else
				{
					reportError('This option is not supported for the attribute "' + targetAttributeName + '"');
				}
			}
			
			private function handleSelectedAttributeChange():void
			{
				if (!parent)
				{
					callLater(handleSelectedAttributeChange)
					return;
				}
				
				// if the two AMTs target the same tool and attribute, clear the selection of the other AMT
				// note that this is mostly cosmetic and does not take care of all cases
				if (selectedAttribute.getSessionState() != null)
				{
					for (var key:* in ALL_INSTANCES)
					{
						var other:AttributeMenuTool = key;
						if (other === this)
							continue;
						if (StandardLib.compare(this.targetToolPath.getSessionState(), other.targetToolPath.getSessionState()) == 0
							&& StandardLib.compare(this.targetAttribute.getSessionState(), other.targetAttribute.getSessionState()) == 0)
						{
							other.selectedAttribute.setSessionState(null);
						}
					}
				}
				
				var names:Array = choices.getNames();
				var selectedIndex:int = useChoiceIndex.value ? StandardLib.asNumber(selectedAttribute.value) : names.indexOf(selectedAttribute.value);
				choiceCombo.selectedIndex = alwaysShowPrompt.value ? -1 : selectedIndex;
				choiceList.selectedIndex = selectedIndex;
				if (selectedIndex >= 0)
				{
					choiceHSlider.value = selectedIndex;
					choiceVSlider.value = names.length - 1 - selectedIndex;
					handleAttrSelected(selectedIndex);
				}
			}
			
			public function getSelectableAttributes():Array
			{
				return [choices];
			}
			public function getSelectableAttributeNames():Array
			{
				return ["Choices"];
			}
			
			override public function dispose():void
			{
				delete ALL_INSTANCES[this];
				super.dispose();
			}
			
			override public function sendWindowToForeground():void
			{
				super.sendWindowToForeground();
				// Note that this is not a complete solution since replaying session state and then
				// reloading it may cause selected attribute to apply in different order on startup.
//				handleSelectedAttributeChange();
			}
			
			//----------------------------------------------
			// backwards compatibility
			[Deprecated(replacement="targetAttribute")] public function set targetAttributeNumber(value:Number):void
			{
				targetAttribute.setSessionState(value);
			}
			[Deprecated] public function set hack_showPlayButton(value:Boolean):void
			{
				showPlayButton.value = value;
				panelTitle.value = StandardLib.replace(panelTitle.value, "{hack_showPlayButton=true;''}", "");
			}
			[Deprecated] public function set targetTool(name:String):void
			{
				targetToolPath.setSessionState([name]);
			}
		]]>
	</mx:Script>
</DraggablePanel>
