<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<!---
@author sanbalagan
@author adufilie
@author skolman
-->
<mx:HBox xmlns:ui ="weave.ui.*"
		 xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.*"
		 width="100%"
		 implements="weave.api.core.ILinkableObject,weave.api.ui.ILinkableObjectEditor"
		 creationComplete="handleCreationComplete()"
		 creationPolicy="all">
	<mx:VBox>
		<mx:HBox verticalAlign="middle" height="22">
			<mx:Label text="{lang('Binning type:')}"/>
		</mx:HBox>
		<mx:VBox id="radioVBox" paddingLeft="20">
			
			<mx:RadioButtonGroup id="typeGroup" change="handleTypeRadio()"/>
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="simpleRadio" label="{lang('Equally spaced')}" groupName="typeGroup" selected="true" width="100%" data="{_simple}"/>
				<ui:Indent enabled="{simpleRadio.selected}" label="{lang('Number of bins:')}" percentWidth="NaN">
					<mx:NumericStepper minimum="1" maximum="100" stepSize="1" id="numOfBins" width="{inputWidth}"/>
				</ui:Indent>
				<ui:HelpComponent label="{simpleRadio.label}">
					Example: If your data is between 0 and 100 and you specify 4 bins,
					the following bins will be created: [0,25] [25,50] [50,75] [75,100]
				</ui:HelpComponent>
			</mx:HBox>
			
			<!--<mx:HRule width="100%"/>-->
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="customRadio" label="{lang('Custom breaks')}" groupName="typeGroup" data="{_customSplit}"/>
				<mx:TextInput enabled="{customRadio.selected}" id="splitValues" width="100%"/>
				<ui:HelpComponent label="{customRadio.label}">
					Enter comma-separated custom break values for dividing the data into bins.
					Example: 0,50,100 will create two bins: [0,50] and [50,100]
				</ui:HelpComponent>
			</mx:HBox>
			
			<!--<mx:HRule width="100%"/>-->
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="equalIntervalRadio" label="{lang('Equal interval')}" groupName="typeGroup" width="100%" data="{_equalInterval}"/>
				<ui:IndentTextInput id="dataInterval" enabled="{equalIntervalRadio.selected}" label="{lang('Data interval:')}" percentWidth="NaN" inputWidth="{inputWidth}"/>
				<ui:HelpComponent label="{equalIntervalRadio.label}">
					Example: If your data is between 0 and 100 and you specify an interval of 25,
					four bins will be created: [0,25] [25,50] [50,75] [75,100]
				</ui:HelpComponent>
			</mx:HBox>
			
			<!--<mx:HRule width="100%"/>-->
			
			<mx:HBox width="100%" verticalAlign="middle">
				<mx:RadioButton id="catRadio" label="{lang('All categories (string values)')}" groupName="typeGroup" width="100%" data="{_category}"/>
				<ui:HelpComponent label="{catRadio.label}">
					One bin will be created for each unique string value in the column.
				</ui:HelpComponent>
			</mx:HBox>
			
			<!--<mx:HRule width="100%" visible="{showNoneOption}" includeInLayout="{showNoneOption}"/>-->
			
			<mx:HBox width="100%" verticalAlign="middle" visible="{showNoneOption}" includeInLayout="{showNoneOption}">
				<mx:RadioButton id="noneRadio" label="{lang('None')}" groupName="typeGroup" width="100%" data="{null}"/>
				<ui:HelpComponent label="{noneRadio.label}">
					The data will not be binned.
				</ui:HelpComponent>
			</mx:HBox>
		</mx:VBox>
	</mx:VBox>
	<mx:VBox width="100%" height="100%">
		<mx:HBox id="overrideInputRangeBox" width="100%" verticalAlign="middle">
			<mx:Label text="{lang('Override data range:')}"/>
			<ui:TextInputWithPrompt id="overrideInputMin" prompt="{lang('min')}" width="100%"/>
			<ui:TextInputWithPrompt id="overrideInputMax" prompt="{lang('max')}" width="100%"/>
		</mx:HBox>
		<mx:DataGrid id="binNameEditor"
					 width="100%" height="100%" minWidth="0"
					 draggableColumns="false" sortableColumns="false"
					 selectable="{overrideNamesCheckBox.selected}"
					 editable="{overrideNamesCheckBox.selected}"
					 itemEditEnd="handleItemEdited(event)"
					 dataProvider="{gridSource}">
			<mx:columns>
				<mx:DataGridColumn headerText="{lang('Bin names')}"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:CheckBox id="overrideNamesCheckBox" label="{lang('Edit and override names')}" change="handleOverrideCheckbox()"/>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			
			import weave.api.core.ILinkableObject;
			import weave.api.data.IBinningDefinition;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.newLinkableChild;
			import weave.core.LinkableString;
			import weave.core.LinkableWatcher;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.data.BinningDefinitions.AbstractBinningDefinition;
			import weave.data.BinningDefinitions.CategoryBinningDefinition;
			import weave.data.BinningDefinitions.CustomSplitBinningDefinition;
			import weave.data.BinningDefinitions.EqualIntervalBinningDefinition;
			import weave.data.BinningDefinitions.NaturalJenksBinningDefinition;
			import weave.data.BinningDefinitions.QuantileBinningDefinition;
			import weave.data.BinningDefinitions.SimpleBinningDefinition;
			import weave.data.BinningDefinitions.StandardDeviationBinningDefinition;
			
			[Bindable] public var showNoneOption:Boolean = true;
			
			public function setTarget(object:ILinkableObject):void
			{
				_binnedColumnWatcher.target = object as BinnedColumn;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
			
			private const _binnedColumnWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleBinnedColumnChange, true);
			
			private function get binnedColumn():BinnedColumn { return _binnedColumnWatcher.target as BinnedColumn; }
			
			private const inputWidth:int = 64;
			private const gridSource:ArrayCollection = new ArrayCollection();
			public const _simple:SimpleBinningDefinition = newLinkableChild(this, SimpleBinningDefinition);
			private const _customSplit:CustomSplitBinningDefinition = newLinkableChild(this, CustomSplitBinningDefinition);
			private const _quantile:QuantileBinningDefinition = newLinkableChild(this, QuantileBinningDefinition);
			private const _equalInterval:EqualIntervalBinningDefinition = newLinkableChild(this, EqualIntervalBinningDefinition);
			private const _stdDev:StandardDeviationBinningDefinition = newLinkableChild(this, StandardDeviationBinningDefinition);
			private const _category:CategoryBinningDefinition = newLinkableChild(this, CategoryBinningDefinition);
			private const _jenks:NaturalJenksBinningDefinition = newLinkableChild(this, NaturalJenksBinningDefinition);
			
			private function get overrideBinNames():LinkableString
			{
				if (!binnedColumn)
					return null;
				var abstractDef:AbstractBinningDefinition = binnedColumn.binningDefinition.internalObject as AbstractBinningDefinition;
				if (abstractDef)
					return abstractDef.overrideBinNames;
				return null;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				var delay:int = 500;
				linkBindableProperty(_simple.numberOfBins, numOfBins, 'value', delay);
				linkBindableProperty(_customSplit.splitValues, splitValues, 'text', delay);
				linkBindableProperty(_equalInterval.dataInterval, dataInterval, 'text', delay);
				
				for each (var def:IBinningDefinition in [_simple, _customSplit, _quantile, _equalInterval, _stdDev, _category, _jenks])
				{
					var abd:AbstractBinningDefinition = def as AbstractBinningDefinition;
					if (abd && abd.overrideInputMin)
					{
						linkBindableProperty(abd.overrideInputMin, overrideInputMin, 'text', delay);
						linkBindableProperty(abd.overrideInputMax, overrideInputMax, 'text', delay);
					}
				}
			}
			
			private function handleCreationComplete():void
			{
				handleBinnedColumnChange();
			}
			
			// called when a radio button is selected
			private function handleTypeRadio():void
			{
				// from the selected radio button, get the local binning definition
				var localDef:IBinningDefinition = typeGroup.selection.data as IBinningDefinition;
				// create a copy of the selected local binning definition
				if (binnedColumn)
					binnedColumn.binningDefinition.requestLocalObjectCopy(localDef);
			}
			
			// called when the binned column changes
			private function handleBinnedColumnChange():void
			{
				if (typeGroup.numRadioButtons == 0) // this may be zero even if children are created.
				{
					callLater(handleBinnedColumnChange);
					return;
				}

				if (!binnedColumn)
					return;
				
				var binsOverridden:Boolean = binnedColumn.binningDefinition.binsOverridden;
				
				// find the radio button with the same binning definition type
				var def:IBinningDefinition = binnedColumn.binningDefinition.internalObject as IBinningDefinition;
				var foundType:Boolean = false;
				for (var i:int = 0; i < typeGroup.numRadioButtons; i++)
				{
					var radioButton:RadioButton = typeGroup.getRadioButtonAt(i);
					var localDef:IBinningDefinition = radioButton.data as IBinningDefinition;
					if (getQualifiedClassName(localDef) == getQualifiedClassName(def))
					{
						// link the session state, giving priority to the binned column binning definition
						if (localDef)
							linkSessionState(def, localDef);
						// select the radio button
						typeGroup.selection = radioButton;
						foundType = true;
						break;
					}
				}
				radioVBox.enabled = foundType && !binsOverridden;
				binNameEditor.alpha = foundType && localDef ? 1 : .5; // translucent when no binning definition is given
				var abd:AbstractBinningDefinition = def as AbstractBinningDefinition;
				overrideNamesCheckBox.includeInLayout = overrideNamesCheckBox.visible = abd && abd.overrideBinNames && !binsOverridden;
				overrideInputRangeBox.includeInLayout = overrideInputRangeBox.visible = abd && abd.overrideInputMin && !binsOverridden;
				
				// update bin names
				gridSource.source = binnedColumn.binningDefinition.getBinNames();
				if (overrideBinNames && overrideBinNames.value)
					overrideNamesCheckBox.selected = true;
				else
					overrideNamesCheckBox.selected = false;
				
				if (binsOverridden)
					radioVBox.toolTip = lang('The binning cannot be changed because this attribute column specifies the "overrideBins" metadata.');
				else
					radioVBox.toolTip = null;
			}
			
			// called when the 'bin name override' checkbox is clicked
			private function handleOverrideCheckbox():void
			{
				// when unchecked, erase existing override names
				if (!overrideNamesCheckBox.selected)
				{
					if (overrideBinNames)
						overrideBinNames.value = '';
					// clear any existing list selection
					binNameEditor.selectedIndex = -1;
				}
			}
			
			private function handleItemEdited(event:DataGridEvent):void
			{
				if (!overrideBinNames)
					return;

				var input:TextInput = binNameEditor.itemEditorInstance as TextInput;
				
				input.errorString = '';
				
				if (input.text == event.itemRenderer.data as String)
					return;
				
				if (!binnedColumn)
					return;
				
				if (binnedColumn.binningDefinition.getBinNames().indexOf(input.text) >= 0)
				{
					input.errorString = lang('Name already exists.');
					
					// don't save the new value
					event.preventDefault();
					return;
				}
				
				var source:Array = gridSource.source;
				var names:Array = WeaveAPI.CSVParser.parseCSVRow(overrideBinNames.value) || [];
				names.length = source.length;
				names[event.rowIndex] = input.text;
				overrideBinNames.value = WeaveAPI.CSVParser.createCSVRow(names);
			}
		]]>
	</mx:Script>
</mx:HBox>
