<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel xmlns="weave.ui.annotation.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*"
				   width="25%" height="25%" backgroundAlpha="0" borderThickness="0"
				   implements="weave.api.ui.IVisTool_Utility"
				   title="Text"
				   horizontalScrollPolicy="off" layout="absolute" verticalScrollPolicy="off" xmlns:editors="weave.editors.*">
	<mx:TextArea id="textArea" width="100%" height="100%" minWidth="5" minHeight="5"
				 borderStyle="solid" editable="false" wordWrap="true"/>
	<ui:ControlPanel added="if (event.target == controlPanel) updateTextArea()"
					 removed="if (event.target == controlPanel) callLater(updateTextArea)">
		<mx:VBox id="toolbar" width="100%" height="100%"
				 horizontalScrollPolicy="off" paddingBottom="2" paddingLeft="2" paddingRight="2"
				 paddingTop="2" verticalScrollPolicy="off">
			<mx:creationComplete>
				<![CDATA[
					windowSettings.removeChild(windowSettings.backgroundColorIndent);
					windowSettings.showBordersCheckBox.label = lang('Show window borders');
					windowSettings.borderColorIndent.label = lang('Window border color');
				]]>
			</mx:creationComplete>
			<mx:HBox width="100%" horizontalScrollPolicy="off" paddingBottom="2" paddingLeft="2"
					 paddingRight="2" paddingTop="2" verticalScrollPolicy="off">
				<ui:FontControl id="fontControls" />
			</mx:HBox>
			
			<mx:Grid width="100%">
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label text="{lang('Paragraph style:')}"/>
					</mx:GridItem>
					<mx:GridItem>
						<ui:CustomComboBox id="paragraphCombo" change="applyParagraphFormat(event);"
										   dataProvider="{[lang('Left align'),lang('Right align'),lang('Center'),lang('Justify'),lang('Bullet')]}"
										   selectedIndex="0"/>
						<mx:Label text="(Resets all font settings)"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="roundingLabel" text="{lang('Corner rounding:')}"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HSlider id="cornerRadiusSlider" width="100%" liveDragging="true"
									maximum="30" minimum="0" snapInterval="1"
									toolTip="{lang('Change the editing text area\'s corner rounding.')}"
									value="0"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="paddingLabel" text="{lang('Padding around text:')}"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HSlider id="paddingSlider" width="100%" liveDragging="true" maximum="25"
									minimum="0" snapInterval="1"
									toolTip="{lang('Set the space between the text and the text box.')}"
									value="0"/>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="backgroundLabel" text="{lang('Background properties:')}"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HBox width="100%">
							<ui:CustomColorPicker id="backgroundColorPicker"
											toolTip="{lang('Change the editing text area\'s background color.')}"/>
							<mx:HSlider id="backgroundAlphaSlider" width="100%" liveDragging="true"
										maximum="1" minimum="0"
										toolTip="{lang('Change the editing text area\'s background transparency.  A value of 1 (slider to the right) is fully opaque, 0 (slider to the left) is fully transparent.')}"
										value="1.0"/>
							<mx:Button label="{lang('Default color')}" click="panelBackgroundColor.value = NaN;"/>
						</mx:HBox>
					</mx:GridItem>
				</mx:GridRow>
				<mx:GridRow>
					<mx:GridItem>
						<mx:Label id="borderLabel" text="{lang('Text border properties:')}"/>
					</mx:GridItem>
					<mx:GridItem>
						<mx:HBox width="100%">
							<ui:CustomColorPicker id="borderColorPicker"
											enabled="{borderThicknessSlider.value &gt; 0}"
											toolTip="{lang('Change the editing text area\'s border color.')}"/>
							
							<mx:HSlider id="borderThicknessSlider"
										value="1" minimum="0" maximum="25" snapInterval="1" 
										toolTip = "{lang('Change the editing text area\'s border thickness.')}"
										width="100%" liveDragging="true"/>
						</mx:HBox>
					</mx:GridItem>
				</mx:GridRow>
			</mx:Grid>
			<editors:WindowSettingsEditor id="windowSettings" target="{this}" width="100%"/>
		</mx:VBox>
	</ui:ControlPanel>
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			import mx.core.IUITextField;
			import mx.core.mx_internal;
			
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.ILinkableContainer;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableFunction;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.utils.LinkableTextFormat;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, TextTool, "Text");
			
			public const htmlText:LinkableString        = registerLinkableChild(this, new LinkableString(''), handleLinkableHtmlText, true);
			public const backgroundAlpha:LinkableNumber = registerLinkableChild(this, new LinkableNumber(1, isFinite), applyStyle, true);
			public const cornerRadius:LinkableNumber    = registerLinkableChild(this, new LinkableNumber(0, isFinite), applyStyle, true);
			public const borderColor:LinkableNumber     = registerLinkableChild(this, new LinkableNumber(0x000000, isFinite), applyStyle, true);
			public const borderThickness:LinkableNumber = registerLinkableChild(this, new LinkableNumber(1.0, isFinite), applyStyle, true);
			public const padding:LinkableNumber         = registerLinkableChild(this, new LinkableNumber(10, isFinite), applyStyle, true);
			private const linkableTextFormat:LinkableTextFormat = newDisposableChild(this, LinkableTextFormat);
			
			[Deprecated] override public function set backgroundColor(value:Number):void
			{
				panelBackgroundColor.value = value;
			}
			
			private const htmlTextFunction:LinkableFunction = newDisposableChild(this, LinkableFunction);
			
			override public function onUserCreation():void
			{
				toggleControlPanel();
			}

			override protected function inConstructor():void
			{
				super.inConstructor();
				
				copySessionState(Weave.properties.visTextFormat, linkableTextFormat);
				linkableTextFormat.font.value = '_sans';
				// when the user changes the text format, make sure selected text gets updated
				getCallbackCollection(linkableTextFormat).addImmediateCallback(this, applyTextFormat);
				
				//panelBackgroundColor.value = 0xFFFFFF;
				Weave.properties.panelBackgroundColor.addGroupedCallback(this, applyStyle, true);
				panelBackgroundColor.addGroupedCallback(this, applyStyle);
				
				enableBorders.addImmediateCallback(this, updateBorders);
			}
			
			override protected function childrenCreated():void
			{
				fontControls.initialize();
				super.childrenCreated();
				
				if (!WeaveAPI.globalHashMap.getName(this))
					enableZOrder.value = false;
				
				linkBindableProperty(backgroundAlpha, backgroundAlphaSlider, "value");
				linkBindableProperty(panelBackgroundColor, backgroundColorPicker, "selectedColor", 0, true);
				linkBindableProperty(cornerRadius,    cornerRadiusSlider, "value" );
				linkBindableProperty(borderColor,     borderColorPicker, "selectedColor");
				linkBindableProperty(borderThickness, borderThicknessSlider, "value");
				linkBindableProperty(padding,         paddingSlider, "value");
				BindingUtils.bindSetter(handleTextAreaChange, textArea, 'htmlText');
				// before each key gets handled, set defaultTextFormat
				textArea.addEventListener(KeyboardEvent.KEY_DOWN, function(e:Event):void { applyTextFormat(); }, true);
				getCallbackCollection(Weave.root).addGroupedCallback(this, handleWeaveRootChange);

				getTextField().alwaysShowSelection = true;
				textArea.setStyle("focusAlpha", 0);
				getTextField().embedFonts = true;
				textArea.setStyle("embedFonts", true);
				
				fontControls.setTarget(linkableTextFormat);
				
				applyStyle();
			}

			private function handleTextAreaChange(value:String):void
			{
				// we only want to save the session state if the control panel is open (the user is editing the text).
				if (controlPanel.parent)
					htmlText.value = value;
			}
			
			private function handleLinkableHtmlText():void
			{
				if (!parent)
				{
					callLater(handleLinkableHtmlText);
					return;
				}
				
				// use internal text field because the real _tempTextField loses formatting.
				var _tempTextField:IUITextField = textArea.mx_internal::getTextField();
				
				if (!_tempTextField)
				{
					reportError("Unexpected: textArea.mx_internal::getTextField() is null");
					return;
				}
				
				var selBegin:int = _tempTextField.selectionBeginIndex;
				var selEnd:int = _tempTextField.selectionEndIndex;
				
				_tempTextField.htmlText = htmlText.value; // use the textField temporarily for getTextFormat,setTextFormat
				
				// make sure the text between each pair of { and } brackets only has a single format.
				var begin:int;
				var end:int = 0;
				while (true)
				{
					// find a pair of { and } brackets
					begin = _tempTextField.text.indexOf("{", end);
					if (begin < 0)
						break;
					end = _tempTextField.text.indexOf("}", begin);
					if (end < 0)
						break;
					
					// make sure the text between begin & end only has a single format
//				 	var f:TextFormat = _tempTextField.getTextFormat(begin, end + 1);
//					_tempTextField.setTextFormat(f, begin, end + 1);
				 	_tempTextField.setSelection(begin, end + 1);
					_tempTextField.replaceSelectedText(_tempTextField.text.substring(begin, end + 1));
					
//					// replace the text from { to }
//					var script:String = _tempTextField.text.substring(begin + 1, end);
//					htmlTextFunction.value = script;
//					_tempTextField.replaceText(begin, end + 1, String(htmlTextFunction.apply()));
				}
			 	_tempTextField.setSelection(selBegin, selEnd);
				
				var ht:String = _tempTextField.htmlText;
				ht = ht.split('&apos;').join("'");
				ht = ht.split('&quot;').join('"');
				htmlTextFunction.value = '`' + ht.split('`').join('\\`') + '`';
				
				updateTextArea();
			}
			
			/**
			 * This function gets called when anything in Weave changes so that inline code within brackets can be re-evaluated.
			 */
			private function handleWeaveRootChange():void
			{
				// while the control panel is closed, update the text area in case inline code needs to be re-evaluated
				if (!controlPanel.parent)
					updateTextArea();
			}
			
			private function updateTextArea():void
			{
				if (!parent)
				{
					callLater(updateTextArea);
					return;
				}
				
				// if control panel is closed, evaluate inline code
				if (!controlPanel.parent)
				{
					textArea.editable = false;
					try
					{
						textArea.htmlText = htmlTextFunction.apply();
					}
					catch (e:Error)
					{
						reportError(e);
						textArea.htmlText = htmlText.value; // show literally what the user has typed
					}
				}
				else
				{
					textArea.editable = true;
					textArea.htmlText = htmlText.value; // show literally what the user has typed
				}
			}
			
			private function applyStyle():void
			{
				if (!parent)
					return;
				textArea.setStyle("backgroundAlpha", backgroundAlpha.value);
				textArea.setStyle("backgroundColor", getStyle('backgroundColor'));
				textArea.setStyle("cornerRadius", cornerRadius.value);
				textArea.setStyle("paddingLeft", padding.value);
				textArea.setStyle("paddingRight", padding.value);
				textArea.setStyle("borderColor", borderColor.value);
				textArea.setStyle("borderThickness", borderThickness.value);
				
				if (isNaN(panelBackgroundColor.value))
					backgroundColorPicker.selectedColor = Weave.properties.panelBackgroundColor.value;
				else
					backgroundColorPicker.selectedColor = panelBackgroundColor.value;
			}

			/**
			 * This function is called when the user presses the tool button.
			 */
			override public function toggleControlPanel():void
			{
				super.toggleControlPanel();
			}
			
 			private function getTextField():TextField
			{
				return textArea.mx_internal::getTextField();
			}
 			
			private function applyParagraphFormat(e:Event):void
			{
				if (false)
				{
					//TODO: fix this buggy code
					
					// Apply the paragraph styles to the whole paragraph instead of just the selected text
					var beginIndex:int = getTextField().selectionBeginIndex;
					var endIndex:int = getTextField().selectionEndIndex;
					
					beginIndex = getTextField().getFirstCharInParagraph(beginIndex) - 1;
					beginIndex = Math.max(0, beginIndex);
					endIndex = getTextField().getFirstCharInParagraph(endIndex);
					if (endIndex >= 0)
						endIndex += getTextField().getParagraphLength(endIndex) - 1;
					else
						endIndex = beginIndex + getTextField().getParagraphLength(beginIndex);
					applyTextFormat(beginIndex, endIndex);
				}
				else
				{
					applyTextFormat(0, getTextField().length);
				}
			}
			
			private function applyTextFormat(beginIndex:int = -1, endIndex:int = -1):void
			{
				if (!parent)
				{
					callLater(applyTextFormat, arguments);
					return;
				}
				
				// save selection & scroll position
				var selectionBeginIndex:int = getTextField().selectionBeginIndex;
				var selectionEndIndex:int = getTextField().selectionEndIndex;
				var vsp:int = textArea.verticalScrollPosition;
				if (beginIndex < 0)
					beginIndex = selectionBeginIndex;
				if (endIndex < 0)
					endIndex = selectionEndIndex;
				
				// get text format from gui
				var f:TextFormat = new TextFormat();
				linkableTextFormat.copyTo(f);
				if (UIUtils.hasFocus(paragraphCombo))
				{
					if (paragraphCombo.selectedIndex == 4)
					{
						f.bullet = true;
					}
					else
					{
						f.bullet = false;
						f.align = ['left','right','center','justify'][paragraphCombo.selectedIndex];
					}
				}
				
				// set text format using temporary text field
				if( beginIndex == getTextField().caretIndex && endIndex == getTextField().caretIndex )
				{
					getTextField().defaultTextFormat = f;
				}
				else
				{
					getTextField().setTextFormat(f, beginIndex, endIndex);
				}
/* 				if (beginIndex >= 0 && beginIndex < getTextField().length)
				{
					// compute new htmlText using temporary text field
					_tempTextField.htmlText = textArea.htmlText;
					// extra newline may get removed from htmlText, so make sure endIndex <= length
					endIndex = Math.min(endIndex, _tempTextField.length);
					if (beginIndex < endIndex)
						_tempTextField.setTextFormat(f, beginIndex, endIndex);
					htmlText.value = _tempTextField.htmlText;
				} */
				
				textArea.setFocus();
				textArea.validateNow();
				
				// restore selection & scroll position
				selectionEndIndex = Math.min(selectionEndIndex, getTextField().length);
				getTextField().setSelection(selectionBeginIndex, selectionEndIndex);
				textArea.verticalScrollPosition = vsp;
			}
			
			private static const _tempTextField:TextField = new TextField(); // temporary reusable object
			
			
			
			/*************************************************
			 *                static section                 *
			 *************************************************/
			
		
		
			/**
			 * This function is called whenever the context menu is opened.
			 * The function will change the caption displayed depending upon where the context menu was opened.
			 */
			private static var _textToolEditContextMenuItem:ContextMenuItem 	= null;
			private static var _textToolAddRemoveContextMenuItem:ContextMenuItem = null;
			private static const ADD_CAPTION:String           = lang("Add Annotation");
			private static const REMOVE_CAPTION:String        = lang("Remove Annotation");
			private static const EDIT_TEXT_CAPTION:String     = lang("Edit Annotation");
			private static const fontSizeArray:Array = [8,9,10,11,12,14,16,18,20,22,24,26,28,36,48,72];
			private static const fontFamilyArray:Array = ['_sans','_serif','_typewriter','Arial','Courier','Courier New', 'Geneva', 'Georgia', 'Helvetica', 'Times New Roman', 'Times', 'Verdana'];
			
			private static function handleContextMenuOpened(e:ContextMenuEvent):void
			{	
				var tt:TextTool = getTextToolFromTarget(e.mouseTarget);	
				
				if (getLinkableContainer(e.mouseTarget))
				{
					_textToolAddRemoveContextMenuItem.enabled = true;
				}
				else
				{
					_textToolAddRemoveContextMenuItem.enabled = false;
				}
				
				if (tt == null)
				{ 
					_textToolAddRemoveContextMenuItem.caption = ADD_CAPTION;
					_textToolEditContextMenuItem.enabled = false;
				}
				else
				{
					_textToolAddRemoveContextMenuItem.caption = REMOVE_CAPTION;
					_textToolEditContextMenuItem.enabled = true;
				}
			}
			
			public static function createContextMenuItems(destination:DisplayObject):Boolean
			{
				if(!destination.hasOwnProperty("contextMenu") )
					return false;
				
				
				// Add a listener to this destination context menu for when it is opened
				var contextMenu:ContextMenu = destination["contextMenu"] as ContextMenu;
				contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, handleContextMenuOpened);
				
				// Create a context menu item for printing of a single tool with title and logo
				_textToolAddRemoveContextMenuItem   = CustomContextMenuManager.createAndAddMenuItemToDestination(ADD_CAPTION,destination,handleAddRemove,"2.1 textBoxMenuItem");
				_textToolEditContextMenuItem        = CustomContextMenuManager.createAndAddMenuItemToDestination(EDIT_TEXT_CAPTION,destination,handleEdit,"2.1 textBoxMenuItem");
				
				return true;
			}
			
			
			/**
			 * This will add a TextTool to whatever parent has been indicated.
			 * If the container passed is not an ILinkableContainer the Text Box is automatically placed on the visdesktop.
			 */
			private static function addTextTool(container:*):void
			{	
				var linkableContainer:ILinkableContainer = container as ILinkableContainer;
				
				if (linkableContainer)
				{
					var name:String = linkableContainer.getLinkableChildren().generateUniqueName("Text");
					var tt:TextTool = linkableContainer.getLinkableChildren().requestObject(name, TextTool, false);
					if (linkableContainer.getLinkableChildren() == WeaveAPI.globalHashMap)
						tt.minimizable.value = tt.maximizable.value = true;
					tt.toggleControlPanel();
				}
			}
			
			/**
			 * This function is called when Remove is selected in the Context Menu.
			 * It checks for a TextTool, and if found will attempt to remove the TextTool and associated TextBox. 
			 */
			private static function removeWindows(e:ContextMenuEvent):void
			{
				var parent:ILinkableContainer = getLinkableContainer(getTextToolFromTarget(e.mouseTarget));
				
				if (getTextToolFromTarget(e.mouseTarget) != null)
				{				
					if (parent is ILinkableContainer)
					{
						var tt:TextTool = getTextToolFromTarget(e.mouseTarget);
						var name:String = parent.getLinkableChildren().getName(tt);
						parent.getLinkableChildren().removeObject(name);
					}
				}
			}
			/**
			 * This function is passed a target and checks to see if the target was a TextBox.
			 * Either a TextBox or null will be returned.
			 */
			private static function getTextToolFromTarget(target:*):TextTool
			{
				var targetComponent:* = target;
				
				while (targetComponent)
				{
					if (targetComponent is TextTool)
						return targetComponent as TextTool;
					targetComponent = targetComponent.parent;
				}
				
				return targetComponent;
			}
			
			/**
			 * This function is passed a target and checks to see if the target is an ILinkableContainer.
			 * Either a ILinkableContainer or null will be returned.
			 */
			private static function getLinkableContainer(target:*):*
			{
				var targetComponent:* = target;
				
				while(targetComponent)
				{
					if(targetComponent is ILinkableContainer)
						return targetComponent as ILinkableContainer;
					
					targetComponent = targetComponent.parent;
				}
				
				return targetComponent;
			}
			
			/**
			 * This function handles what occurs when an option in the context menu involving the Text Box tool is selected.
			 * It is linked to the Text Box tool options by the createContextMenuItems function.
			 */
			private static function handleAddRemove(e:ContextMenuEvent):void
			{
				var parent:ILinkableContainer = getLinkableContainer(e.mouseTarget);
				var tt:TextTool = getTextToolFromTarget(e.mouseTarget);
				
				// if the user did not right click on a TextBox or the editor for one
				if ( tt == null) 
				{
					// add text Tool to this container
					addTextTool(parent);
				}
				else
				{
					tt.removePanel();
				}
			}
			
			private static function handleEdit(e:ContextMenuEvent):void
			{
				var tt:TextTool = getTextToolFromTarget(e.mouseTarget);
				if (tt)
				{
					tt.sendWindowToForeground();
					tt.toggleControlPanel();
				}
			}
			
			[Deprecated(replacement="htmlText")] public function set textAreaString(value:String):void { htmlText.value = value; }
			[Deprecated(replacement="panelX")] public function set textAreaWindowX(value:String):void { panelX.value = value; }
			[Deprecated(replacement="panelY")] public function set textAreaWindowY(value:String):void { panelY.value = value; }
		]]>
	</mx:Script>
</ui:DraggablePanel>
