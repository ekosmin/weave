<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
	This is a control for setting two text alignment values:  horizontalAlign and verticalAlign.

	@author adufilie
-->
<mx:Canvas xmlns="weave.ui.*"
		xmlns:mx="http://www.adobe.com/2006/mxml"
		creationPolicy="all" clipContent="false"
		horizontalScrollPolicy="off" verticalScrollPolicy="off" toolTip="Alignment">
	<mx:VBox verticalGap="0">
		<mx:HBox horizontalGap="0">
			<mx:Button id="bottom_right"/>
			<mx:Button id="bottom_center"/>
			<mx:Button id="bottom_left"/>
		</mx:HBox>
		<mx:HBox horizontalGap="0">
			<mx:Button id="middle_right"/>
			<mx:Button id="middle_center"/>
			<mx:Button id="middle_left"/>
		</mx:HBox>
		<mx:HBox horizontalGap="0">
			<mx:Button id="top_right"/>
			<mx:Button id="top_center"/>
			<mx:Button id="top_left"/>
		</mx:HBox>
	</mx:VBox>
	<mx:Image source="@Embed(source='/weave/resources/images/alignment-control.png')"
			  x="0" y="0" includeInLayout="false" mouseChildren="false" mouseEnabled="false"/>
	
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			[Bindable] public var verticalAlign:String = 'middle';
			[Bindable] public var horizontalAlign:String = 'center';
			
			private var buttons:Array;
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				buttons = [
					top_left, top_center, top_right,
					middle_left, middle_center, middle_right,
					bottom_left, bottom_center, bottom_right
				];
				for each (var button:Button in buttons)
				{
					button.setStyle('cornerRadius', 0);
					button.width = 20;
					button.height = 20;
					button.toggle = true;
					button.addEventListener(MouseEvent.CLICK, handleButtonClick);
				}
				BindingUtils.bindSetter(_invalidateProperties, this, ['verticalAlign']);
				BindingUtils.bindSetter(_invalidateProperties, this, ['horizontalAlign']);
			}
			
			private function _invalidateProperties(..._):void
			{
				invalidateProperties();
			}
			
			override public function validateProperties():void
			{
				super.validateProperties();
				selectButton(verticalAlign + '_' + horizontalAlign);
			}
			
			private function handleButtonClick(event:MouseEvent):void
			{
				selectButton((event.currentTarget as Button).id);
			}
			
			private function selectButton(buttonId:String):void
			{
				for each (var button:Button in buttons)
				{
					if (button.id == buttonId)
					{
						var values:Array = button.id.split('_');
						if (verticalAlign != values[0])
							verticalAlign = values[0];
						if (horizontalAlign != values[1])
							horizontalAlign = values[1];
						button.selected = true;
					}
					else
					{
						button.selected = false;
					}
				}
			}
		]]>
	</mx:Script>
</mx:Canvas>
