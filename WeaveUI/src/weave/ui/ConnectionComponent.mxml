<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author skolman
-->
<mx:Image xmlns:mx="http://www.adobe.com/2006/mxml"
		  xmlns="weave.ui.*"
		  mouseDown="initDrag(event)"
		  rollOver="handleMouseOver(event)"
		  rollOut="handleMouseOut(event)"
		  toolTip="not connected"
		  dragEnter="handleDragEnter(event)"
		  dragComplete="handleDragComplete(event)"
		  dragDrop="handleDragDrop(event)"
		  dragOver="handleDragEnter(event)"
		  source="{_notConnected}"
		  >

<mx:Script>
	<![CDATA[
		import mx.core.DragSource;
		import mx.core.IUIComponent;
		import mx.events.DragEvent;
		import mx.managers.DragManager;
		
		import weave.Weave;
		import weave.api.core.ILinkableDynamicObject;
		import weave.api.getCallbackCollection;
		
		[Embed(source= "/weave/resources/images/green-circle.png")]
		private var _connected:Class;
		
		[Embed(source= "/weave/resources/images/red-circle.png")]
		private const _notConnected:Class;
		
		private static const staticNameToConnectionComp:Object = new Object();
		
		private var _dynamicObj:ILinkableDynamicObject = null;
		[Inspectable]
		public function set dynamicObject(value:ILinkableDynamicObject):void
		{
			
			if(_dynamicObj)
			{
				getCallbackCollection(_dynamicObj).removeCallback(handleDynamicObjChange);
			}

			_dynamicObj = value;
			_prevStaticName = null;
			if (_dynamicObj)
				getCallbackCollection(_dynamicObj).addImmediateCallback(this,handleDynamicObjChange,true);
		}
		public function get dynamicObject():ILinkableDynamicObject
		{
			return _dynamicObj;
		}
		
		private function initDrag(event:MouseEvent):void
		{
			WeaveAPI.StageUtils.addEventCallback(MouseEvent.MOUSE_MOVE, this, handleMouseMove, true);
			
			var itemsArray:Array = new Array();
			itemsArray.push(this);
			
			var ds:DragSource = new DragSource();
			ds.addData(itemsArray,"cc");
			
			var dragImage:Image = new Image();
			dragImage.source = this.source;
			dragImage.width = 16;
			dragImage.height = 16;
			
			var dragInitiator:IUIComponent = this;
			if (dragInitiator)
			{
				DragManager.showFeedback(DragManager.COPY);
				DragManager.doDrag(dragInitiator,ds,event);
			}
			
			trace(this, DragManager.getFeedback());
			
		}
		
		private function handleDragEnter(event:DragEvent):void
		{
			if(event.dragInitiator == this)
				return;
			if (event.dragSource.hasFormat("cc"))
			{
				var items:Array = event.dragSource.dataForFormat("cc") as Array;
				if (items[0] is ConnectionComponent)
					DragManager.acceptDragDrop(event.currentTarget as IUIComponent);
			}
		}
	
		private function handleDragDrop(event:DragEvent):void
		{
			var ccArray:Array = event.dragSource.dataForFormat("cc") as Array;
			// HACK: Assume Application has this function.
			// TODO: Stop relying on any particular Application implementation.
			WeaveAPI.topLevelApplication.drawConnection(ccArray[0],this);
//			this.removeEventListener(MouseEvent.ROLL_OUT,handleMouseOut);
//			(ccArray[0] as ConnectionComponent).removeEventListener(MouseEvent.ROLL_OUT,handleMouseOut);
		}
		
		private function handleDragComplete(event:DragEvent):void
		{
			WeaveAPI.StageUtils.removeEventCallback(MouseEvent.MOUSE_MOVE,handleMouseMove);
		}
		
		private var _prevStaticName:String = null;
		private function handleDynamicObjChange():void
		{
			/*
			var newName:String = dynamicObject.globalName
			if(_prevStaticName != newName)
			{
				if (staticNameToConnectionComp[newName] == undefined)
					staticNameToConnectionComp[newName] = new Dictionary(true); // weak keys
				
				// remove mapping from old static name to this component
				delete staticNameToConnectionComp[_prevStaticName][this];
				_prevStaticName = newName;
				
				if (newName == null)
					return;
				
				// add mapping from new static name to this component
				staticNameToConnectionComp[newName][this] = true; // save weak link in dictionary to this component
			}
			*/
		}
		
		public function getConnectedComponents():Array
		{
			var result:Array = [];
			for(var object:Object in staticNameToConnectionComp[_prevStaticName])
			{
				if(object != this)
					result.push(object);
			}
			
			return result;
		}
		
		private function handleMouseMove():void
		{
			// HACK: Assume Application has this function.
			// TODO: Stop relying on any particular Application implementation.
			WeaveAPI.topLevelApplication.drawConnection(this);
		}
		
		private function addConnection(cc:ConnectionComponent):void
		{
			/*
			// link to new static name if not static already
			if (this.dynamicObject.globalName == null)
				this.dynamicObject.globalName = Weave.root.generateUniqueName(className).split("::").pop();
			// link other object to the same static name
			cc.dynamicObject.globalName = this.dynamicObject.globalName;
			
			this.source = _connected;
			toggleToolTip();
			*/
		}
		
		private function removeConnections():void
		{
			/*
			// unlink from static name
			dynamicObject.globalName = null;
			
//			this.source = _connected;
//			toggleToolTip();
			*/
		}
		
		
		
		private function handleMouseOver(event:MouseEvent):void
		{
			// HACK: Assume Application has this function.
			// TODO: Stop relying on any particular Application implementation.
//			WeaveAPI.topLevelApplication.drawConnections(this,getConnectedComponents());
		}
		
		private function handleMouseOut(event:MouseEvent):void
		{
			// HACK: Assume Application has this function.
			// TODO: Stop relying on any particular Application implementation.
//			WeaveAPI.topLevelApplication.removeConnections();
		}
		
		private function toggleToolTip():void
		{
			if(this.source == _connected)
				this.toolTip = lang('connected');
			else
				this.toolTip = lang('not connected');
		}
		
		
	]]>
</mx:Script>
	
	
</mx:Image>