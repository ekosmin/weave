<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HDividedBox
		xmlns:ui ="weave.ui.*"
	    xmlns:mx="http://www.adobe.com/2006/mxml"
		width="100%" height="100%"
    	label="{lang('Metadata Editor')}"
		implements="weave.api.ui.ILinkableObjectEditor">
	<mx:VBox height="100%">
		<mx:Label text="{lang('Columns')}"/>
		<mx:List id="columnList" width="100%" height="100%" change="synchronize()" allowMultipleSelection="true"/>
	</mx:VBox>
	<ui:MetadataGrid id="metaGrid" metaChanged="saveChanges()" propertyIgnoreList=""/>
<mx:Script>
<![CDATA[
	import mx.utils.ObjectUtil;
	
	import weave.api.core.ILinkableObject;
	import weave.api.data.ColumnMetadata;
	import weave.api.getCallbackCollection;
	import weave.api.services.beans.EntityMetadata;
	import weave.data.DataSources.CSVDataSource;
	import weave.utils.VectorUtils;

	override protected function createChildren():void
	{
		super.createChildren();

		metaGrid.propertyIgnoreList = [CSVDataSource.METADATA_COLUMN_INDEX, CSVDataSource.METADATA_COLUMN_NAME, ColumnMetadata.KEY_TYPE];
		metaGrid.selectablePropertyNames = VectorUtils.subtract(EntityMetadata.getSuggestedPublicPropertyNames(), [ColumnMetadata.PROJECTION]);
	}

	private var target:CSVDataSource = null;
	private var prevSelectedColumns:Array = null;
	
	public function setTarget(value:ILinkableObject):void
	{
		if (!parent)
		{
			callLater(setTarget, arguments);
			return;
		}
		target = value as CSVDataSource;
		target.metadata.addGroupedCallback(this, displaySelectedMeta, true);
		getCallbackCollection(target).addGroupedCallback(this, function():void {
			var selectedItems:Array = columnList.selectedItems;
			columnList.dataProvider = target.getColumnIds();
			columnList.selectedItems = selectedItems;
		}, true);
		columnList.labelFunction = target.getColumnTitle;
	}
	public function hasPendingChanges():Boolean { return false; }
	public function applyChanges():void { }
	
	private function synchronize():void
	{
		saveChanges();
		prevSelectedColumns = columnList.selectedItems;
		displaySelectedMeta();
	}
	
	private function saveChanges():void
	{
		metaGrid.validateProperties();
		if (metaGrid.metadataChanged)
		{
			var newState:Object = target.metadata.getSessionState() || {};
			var newMeta:Object = metaGrid.metadata;
			for each (id in prevSelectedColumns)
			{
				var currentMeta:Object = target.generateMetadataForColumnId(id); // already considers current session state values
				newState[id] = WeaveAPI.SessionManager.combineDiff(currentMeta, newMeta);
				
				// remove missing values
				var keys:Array = VectorUtils.getKeys(newState[id]);
				for each (var key:String in keys)
					if (!newState[id][key])
						delete newState[id][key];
			}
			target.metadata.setSessionState(newState);
		}
	}
	
	private function displaySelectedMeta():void
	{
		// load from allMeta into grid, combining metadata for all selected columns
		var id:String;
		var metaCombined:Object;
		for each (id in columnList.selectedItems)
		{
			var newMeta:Object = target.generateMetadataForColumnId(id);
			if (!metaCombined)
				metaCombined = newMeta;
			else
				MetadataGrid.combineMetadata(newMeta, metaCombined);
		}
		metaGrid.metadata = metaCombined;
	}

]]>
</mx:Script>
</mx:HDividedBox>
