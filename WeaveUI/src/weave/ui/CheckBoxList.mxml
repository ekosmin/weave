<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
A public bindable "selection" property is provided which is an Array of Boolean
values denoting the state of the checkboxes. The items in the selection Array
correspond to the items in the dataProvider and the selection Array will
automatically be updated to correspond to changes in dataProvider item order.
-->
<mx:List xmlns:mx="http://www.adobe.com/2006/mxml"
		 width="100%"
		 paddingLeft="0"
		 paddingRight="0"
		 backgroundAlpha="0"
		 borderStyle="none"
		 selectable="false"
		 rowCount="{dataProvider.length || 1}"
		 xmlns:ui="weave.ui.*">
	<mx:Script>
		<![CDATA[
			import mx.collections.ICollectionView;
			
			import weave.compiler.StandardLib;
			import weave.utils.VectorUtils;
			
			private var _prevData:Array = [];
			
			/**
			 * Setting this to true will set labelFunction = lang.
			 */
			public function set translate(value:Boolean):void
			{
				if (value)
					labelFunction = lang;
				else if (labelFunction == lang)
					labelFunction = null;
			}
			
			/**
			 * This value will be used for each new CheckBox's "selected" state as they are
			 * created when new items are added to the dataProvider.
			 */
			public var defaultSelectedState:Boolean = false;
			
			override protected function collectionChangeHandler(event:Event):void
			{
				super.collectionChangeHandler(event);
				
				// when data changes, reorder selection booleans to match the new order of the data items.
				var newData:Array = VectorUtils.getArrayFromCollection(collection);
				if (StandardLib.compare(_prevData, newData))
				{
					var newSelection:Array = new Array(newData.length);
					for (var newIndex:int = 0; newIndex < newData.length; newIndex++)
					{
						var oldIndex:int = _prevData.indexOf(newData[newIndex]);
						newSelection[newIndex] = getSelectedState(oldIndex);
					}
					_prevData = newData;
					selection = newSelection;
				}
			}
			
			private var _selection:Array = [];
			
			[Bindable("change")]
			[Bindable("valueCommit")]
			[Inspectable(category="General")]
			
			/**
			 * This array stores the list of Boolean values for the checkboxes.
			 * If items in the selection Array are undefined, defaultSelectedState will be used.
			 */
			public function set selection(value:Array):void
			{
				_selection = value || [];
				var n:int = _selection.length;
				if (dataProvider is ICollectionView)
					n = (dataProvider as ICollectionView).length;
				for (var i:int = 0; i < n; i++)
				{
					var checkBox:CustomCheckBox = indexToItemRenderer(i) as CustomCheckBox;
					if (checkBox)
						checkBox.selected = getSelectedState(i);
				}
				
				super.selectedItems = []; // causes event dispatch
			}
			
			public function get selection():Array
			{
				return _selection;
			}
			
			[Bindable("change")]
			[Bindable("valueCommit")]
			[Inspectable(category="General")]
			
			override public function get selectedItems():Array
			{
				var items:Array = VectorUtils.getArrayFromCollection(collection, false);
				return items.filter(function(item:Object, i:int, a:Array):Boolean { return getSelectedState(i); }); 
			}
			
			override public function set selectedItems(items:Array):void
			{
				var allItems:Array = VectorUtils.getArrayFromCollection(collection, false);
				selection = allItems.map(function(item:Object, i:int, a:Array):Boolean { return items && items.indexOf(item) >= 0; });
				
				super.selectedItems = []; // causes event dispatch
			}
			
			/**
			 * Gets the selected state of a single CheckBox.
			 */
			public function getSelectedState(index:int):Boolean
			{
				var value:* = _selection[index];
				if (value === undefined)
					return defaultSelectedState;
				return value;
			}
			
			/**
			 * Sets the selected state of a single CheckBox.
			 */
			public function setSelectedState(index:int, value:Boolean):void
			{
				if (getSelectedState(index) == value)
					return;
				var newSelection:Array = selection.concat();
				newSelection[index] = value;
				selection = newSelection;
			}
		]]>
	</mx:Script>
	<mx:itemRenderer>
		<mx:Component>
			<ui:CustomCheckBox change="outerDocument.setSelectedState(outerDocument.itemRendererToIndex(this), this.selected)">
				<mx:Script>
					<![CDATA[
						override public function set data(value:Object):void
						{
							super.data = value;
							selected = outerDocument.getSelectedState(outerDocument.itemRendererToIndex(this));
						}
					]]>
				</mx:Script>
			</ui:CustomCheckBox>
		</mx:Component>
	</mx:itemRenderer>
</mx:List>
