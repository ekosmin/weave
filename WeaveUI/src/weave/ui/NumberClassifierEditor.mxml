<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---	Number Classifier Editor
*  @author sanbalag
*  
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		   xmlns="weave.ui.*"
		   implements="weave.api.core.ILinkableObject" creationPolicy="all"
		   xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
		   width="100%" height="100%" xmlns:utils="weave.utils.*">
		
		   
	<!-- match 'real numbers, (optional space) real numbers', etc 
		 This allows optional negative sign before a number, integers and real numbers, with optional extra 
		 numbers following with a comma and optional spaces separating numbers-->
	<!--<mx:RegExpValidator 
		id="splitValuesValidator"
		source="{splitsInput}" property="text"
		expression="^\-?[1-9][0-9]*(\.[0-9]+)?(,\s*\-?[1-9][0-9]*(\.[0-9]+)?)*$"
		trigger="{splitsInput}" triggerEvent="keyUp"
		noMatchError="Please be sure the input is in the form 'number, number' etc."/>-->
	<!--	<utils:CommaSeparatedNumbersValidator 
			id="splitValuesValidator"
			minNumberAllowed="{dataMin}" maxNumberAllowed="{dataMax}"
			source="{splitsInput}" property="text"
			trigger="{splitsInput}" triggerEvent="keyUp"/>-->
			
						
		<mx:HBox id="valuesModule">
			<mx:VBox verticalGap="0">
				<mx:Label text="min:"/>
				<mx:TextInput text="{dataMin}" width="60" editable="false"/>
			</mx:VBox>
			
			<mx:VBox verticalGap="0">
				<mx:Label text="split values (comma separated):" width="190"/>
				<!-- restrict the input to only accept digits, space, comma, period, and minus sign only -->
				<mx:TextInput id="splitsInput" width="190" borderThickness="4"/>
			</mx:VBox>
	
			<mx:VBox verticalGap="0">
				<mx:Label text="max:"/>
				<mx:TextInput text="{dataMax}" width="60" editable="false"/>
			</mx:VBox>
		</mx:HBox>
			
		<mx:Script>
			<![CDATA[
				import mx.controls.Label;
				import mx.controls.TextInput;
				import mx.events.ListEvent;
				
				import weave.api.copySessionState;
				import weave.api.core.ILinkableObject;
				import weave.api.getCallbackCollection;
				import weave.api.newLinkableChild;
				import weave.data.BinClassifiers.NumberClassifier;
				import weave.data.BinningDefinitions.ExplicitBinningDefinition;
				
				[Bindable] private var dataMin:Number = 0;
				[Bindable] private var dataMax:Number = 1;
				
				private function createNewValueBox():void
				{
					var vbox:VBox = new VBox();
					vbox.setStyle("verticalGap", 0);
					
					var label:Label = new Label();
					label.text = "split " + (valuesModule.numChildren-1) + ":";
					
					var newTextInput:TextInput = new TextInput();
					
					//newTextInput.text = (dataMax - dataMin)
					
					newTextInput.width = 60;
					
					vbox.addChild(label);
					vbox.addChild(newTextInput);
					
					// add the new text input to the end of module that holds them, if the module is empty, add it at 0, otherwise add it at the
					// end of the module
					valuesModule.addChildAt(vbox, Math.max(0, valuesModule.numChildren-1) );
				}
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();

					//dynamicList.addEventListener(ListEvent.CHANGE, listElementHandler);
					
					/*linkBindableProperty(numClassifier.min,minNum,"text");
					linkBindableProperty(numClassifier.max,maxNum,"text");
					linkBindableProperty(numClassifier.minInclusive,minInclusive,"selected");
					linkBindableProperty(numClassifier.maxInclusive,maxInclusive,"selected");*/
					
					getCallbackCollection(numClassifier).addImmediateCallback(this, handleNumClassifierChange);
					handleBinClassifiersChange();
				}
				private function addButtonHandler():void{
					binClassifiers.requestObject(null, NumberClassifier, false);
					// select the newly created classifier
					//dynamicList.selectedIndex = binClassifiers.getNames().length - 1;
					handleBinClassifiersChange();
				}				
				private function removeButtonHandler():void
				{
					binClassifiers.removeObject(binClassifiers.getName(selectedNC));
				}
				
				
				private function listElementHandler(event:ListEvent):void
				{
					handleBinClassifiersChange();
				}
				
				
				private function get selectedNC():NumberClassifier
				{
					var objIndex:Number = -1;//dynamicList.selectedIndex;
					if (objIndex < 0)
						return null;
					return binClassifiers.getObjects()[objIndex];
				}

				private function handleBinClassifiersChange():void
				{
					//PropertyCanvas.enabled = dynamicList.selectedIndex >= 0;

					if (selectedNC)
						copySessionState(selectedNC, numClassifier);
				}
				
				private function handleNumClassifierChange():void
				{
					if (selectedNC)
						copySessionState(numClassifier, selectedNC);
				}
				
				
				private var _previouslySelectedNC:NumberClassifier = null;
				public const binClassifiers:ExplicitBinningDefinition = newLinkableChild(this, ExplicitBinningDefinition, handleBinClassifiersChange);
				private const numClassifier:NumberClassifier = newLinkableChild(this, NumberClassifier);
			]]>
		</mx:Script>
		
</mx:VBox>