<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<CustomComboBox xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns="weave.ui.*"
		textDecoration="none"
		fontStyle="normal"
		fontWeight="normal"
		rowCount="12"
		dropdownWidth="250"
		creationComplete="creationComplete();">
	<mx:Script>
		<![CDATA[
			import weave.WeaveProperties;
			
			private function creationComplete():void
			{
				dropdown.variableRowHeight = true;
			}
			
			private var _embeddedOnly:Boolean = false;
			private var _fontsInvalid:Boolean = true;
			
			public function set embeddedFontsOnly(value:Boolean):void
			{
				if (_embeddedOnly != value)
				{
					_embeddedOnly = value;
					_fontsInvalid = true;
					invalidateProperties();
				}
			}
			
			private static var _allFonts:Array = null;
			private static const baseFonts:Array = ['_sans', '_serif', '_typewriter'];
			
			override public function validateProperties():void
			{
				if (_fontsInvalid)
				{
					_fontsInvalid = false;
					if (_embeddedOnly)
					{
						dataProvider = WeaveProperties.embeddedFonts;
					}
					else
					{
						if (!_allFonts)
							_allFonts = baseFonts.concat(Font.enumerateFonts(true).sortOn("fontName"));
						dataProvider = _allFonts;
						labelField = "fontName";
					}
				}
				super.validateProperties();
			}
		]]>
	</mx:Script>
	<itemRenderer>
		<mx:Component>
			<mx:Label>
				<mx:Script>
					<![CDATA[
						override public function set data(value:Object):void
						{
							var font:Font = value as Font;
							var fontName:String = font ? font.fontName : String(value);
							setStyle("fontFamily", fontName);
							setStyle("fontSize", 15);
							text = fontName;
							super.data = value;
						}
					]]>
				</mx:Script>
			</mx:Label>
		</mx:Component>
	</itemRenderer>
</CustomComboBox>
