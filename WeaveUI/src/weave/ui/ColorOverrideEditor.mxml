<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<!---
@author adufilie
-->
<mx:VBox xmlns:ui ="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns="weave.ui.*"
	implements="weave.api.core.ILinkableObject"
	width="{NaN}" height="{NaN}"
	>
		<mx:Label text="{lang('Override colors for specific records')}" fontWeight="bold"/>
		<mx:HBox width="100%">
			<ui:Indent label="{lang('Select records in a tool, then click here to change their color:')}">
				<ui:CustomColorPicker id="colorPicker" change="overrideColor(getGlobalSelection().keys, colorPicker.selectedColor);"/>
				<ui:HelpComponent>
					Make a selection on a visualization tool and then use this color picker
					to override the color for the selected records.
				</ui:HelpComponent>
			</ui:Indent>
			<mx:Spacer width="100%"/>
			<mx:Button label="{lang('Reset selected records')}" click="removeSelectedColors()"/>
		</mx:HBox>
		<mx:List id="colorOverrideList" allowMultipleSelection="true" width="100%" height="100%" change="handleSelectedItems()" horizontalScrollPolicy="auto">
			<mx:itemRenderer>
				<mx:Component>
					<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
						<ui:CustomColorPicker id="colorPicker" change="handleColor()"/>
						<mx:Label id="lbl" width="100%"/>
						<mx:Script>
							<![CDATA[
								import weave.api.data.IQualifiedKey;
								import weave.utils.ProbeTextUtils;
								
								private function handleColor():void
								{
									if (data)
										outerDocument.overrideColor([data], colorPicker.selectedColor);
								}
								
								override public function set data(value:Object):void
								{
									super.data = value;
									
									var key:IQualifiedKey = value as IQualifiedKey;
									if (key)
									{
										var probeText:String = ProbeTextUtils.getProbeText([key]);
										if (!probeText)
											probeText = key.keyType + '#' + key.localName;
										else if (probeText.indexOf(lang('Record Identifier:')) == 0)
											probeText = probeText.split('\n').join('');
										
										toolTip = probeText;
										lbl.text = probeText.split('\n')[0]; // first line only
											
										colorPicker.selectedColor = outerDocument.getColor(key);
									}
									else
									{
										lbl.text = 'null';
										colorPicker.selectedColor = 0;
									}
								}
							]]>
						</mx:Script>
					</mx:HBox>
				</mx:Component>
			</mx:itemRenderer>
		</mx:List>
	<mx:Script>
		<![CDATA[
			import weave.api.registerLinkableChild;
			import weave.core.LinkableVariable;
			import weave.utils.VectorUtils;
			import weave.utils.AsyncSort;
			import mx.collections.ICollectionView;
			import weave.data.KeySets.KeySet;
			import weave.api.getCallbackCollection;
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.newLinkableChild;
			import weave.compiler.StandardLib;
			import weave.core.LinkableString;
			
			private function getGlobalSelection():KeySet
			{
				return Weave.defaultSelectionKeySet;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				getCallbackCollection(getGlobalSelection()).addGroupedCallback(this, handleGlobalSelection);
			}
			
			// called when global selection changes
			private function handleGlobalSelection():void
			{
				var keys:Array = getGlobalSelection().keys
				colorOverrideList.selectedItems = keys;
				for each (var key:IQualifiedKey in keys)
				{
					var color:Number = Number(_keyToColorMap[key]);
					if (isFinite(color))
					{
						colorPicker.selectedColor = color;
						break;
					}
				}
			}
			
			// called when list selection changes
			private function handleSelectedItems():void
			{
				getGlobalSelection().replaceKeys(colorOverrideList.selectedItems);
			}
			
			/**
			 * This is an Array of Arrays containing specific colors associated with record keys.
			 * The format for each item in the Array is:  [keyType,localName,color]
			 */
			public const recordColors:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, verifyTable), handleRecordColors);
			
			private function verifyTable(value:Array):Boolean
			{
				return StandardLib.arrayIsType(value, Array);
			}

			private var _recordColorTable:Array = []; // parsed CSV
			private var _keyToColorMap:Dictionary = new Dictionary(); // IQualifiedKey -> CSV row index
			
			// called when recordColors change
			private function handleRecordColors():void
			{
				_recordColorTable = recordColors.getSessionState() as Array || [];
				_keyToColorMap = new Dictionary();
				var keys:Array = new Array(_recordColorTable.length);
				var duplicatesFound:Boolean = false;
				for (var i:int = _recordColorTable.length; i--;)
				{
					var row:Array = _recordColorTable[i] as Array; // keyType,localName,color
					var key:IQualifiedKey = WeaveAPI.QKeyManager.getQKey(row[0], row[1]);
					if (_keyToColorMap[key] === undefined)
					{
						keys[i] = key;
						_keyToColorMap[key] = StandardLib.asNumber(row[2]);
					}
					else
					{
						duplicatesFound = true;
						_recordColorTable.splice(i, 1);
						keys.splice(i, 1);
					}
				}
				colorOverrideList.dataProvider = keys;
				handleGlobalSelection();
				
				// remove duplicates from session state
				if (duplicatesFound)
					recordColors.setSessionState(_recordColorTable);
			}
			
			internal function getColor(key:IQualifiedKey):Number
			{
				var color:Number = Number(_keyToColorMap[key]); // undefined will be NaN
				return color;
			}
			
			internal function overrideColor(keys:Array, color:uint):void
			{
				for (var i:int = 0; i < keys.length; i++)
				{
					var key:IQualifiedKey = keys[i] as IQualifiedKey;
					_recordColorTable.push([key.keyType, key.localName, '0x' + StandardLib.numberToBase(color, 16, 6).toUpperCase()]);
				}
				recordColors.setSessionState(_recordColorTable);
			}
			
			private function removeSelectedColors():void
			{
				VectorUtils.removeByIndex(_recordColorTable, colorOverrideList.selectedIndices);
				recordColors.setSessionState(_recordColorTable);
			}
		]]>
	</mx:Script>
</mx:VBox>
