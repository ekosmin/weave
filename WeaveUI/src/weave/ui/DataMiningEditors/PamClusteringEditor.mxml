<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author spurushe
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="K Means Clustering Editor"
				
				backgroundColor="#EFF4BC" width="300" height="400"
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool" xmlns:DataMiningEditors="weave.ui.DataMiningEditors.*"
				>
	<mx:HBox id="hb" width="100%" height="100%">
		<mx:VBox width="50%" paddingLeft="5" paddingBottom="5" paddingRight="5" height="100%">
		<mx:Label text="1.Select the input Columns" fontWeight="bold"/>	
		<ColumnListComponent id="kMeansColumns" hashMap="{inputColumns}"/>
		</mx:VBox>
		
		<mx:VBox id="inputUI" paddingBottom="5" paddingLeft="5" paddingRight="5" paddingTop="5" height="100%">
			
			
		</mx:VBox>
	
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Button;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableHashMap;
			import weave.services.WeaveRServlet;
			import weave.services.beans.PartitionAroundMedoidsClusteringResult;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;
			
			//to do: take input as columns and as subsets from vizs
			public const inputColumns:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			private var assignNames: Array = new Array();
			public var latestColumnKeys:Array = new Array();
			public var finalColumns:Array = new Array();
			//private var _initialing:* = constructor();
			 
			private var pam:PartitionAroundMedoidsClustering = new PartitionAroundMedoidsClustering(this);
			public var pamResult:PartitionAroundMedoidsClusteringResult;
			//initializing the input UI
			private var pamClusterInput:NumberInputComponent;
			private var pamMteric:ChoiceInputComponent;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				var columns:Array = ColumnUtils.getColumnsWithCommonKeyType();
				for (var i:int = 0; i < columns.length; i++)
					inputColumns.requestObjectCopy(null, columns[i]);
			}
			
			/* private function fillingResult():void
			{
				kMeansResult = kMeans.finalResult;
			} */
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				super.createChildren();
				pamClusterInput = new NumberInputComponent("pamClusterNumber", "5");
				pamClusterInput.label = "Enter the number of clusters";
				pamMteric = new ChoiceInputComponent("pamMetric", ["Choose a metric","manhattan", "euclidean"]);
				pamMteric.label = "Select a metric";
				
				var doPamButton:Button = new Button();
				doPamButton.label = "Run Script"; 
				doPamButton.addEventListener(MouseEvent.CLICK, doKMeansButton_clickHandler);
				
				
				inputUI.addChild(pamClusterInput);
				inputUI.addChild(pamMteric); 
				inputUI.addChild(doPamButton);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				preprocessingColumns();
				inputColumns.addGroupedCallback(this, preprocessingColumns);
			}
			
			// we need only numerical columns for clustering
			 private function preprocessingColumns():void
			{
				var colObjects:Array = inputColumns.getObjects(IAttributeColumn);
				var attributeColumns :Array = new Array();
				for (var i:int = 0; i < colObjects.length; i++)
				{
					var col:IAttributeColumn = colObjects[i] as IAttributeColumn;
					var datatype:String = ColumnUtils.getDataType(col);
					if(datatype == "number")
					{
						attributeColumns.push(col);
					}
					
					var joinedColumns:Array = ResultUtils.joinColumns(attributeColumns);
					latestColumnKeys = joinedColumns[0];
					finalColumns = joinedColumns[1];
				}
			} 
		
			
			/*  protected function editScript_clickHandler(event:MouseEvent):void
			{
				//to do: Make script change accoring to user inputs of parameters
				displayScriptTA.text = "frame <- data.frame(inputColumns)\n" +
				"kMeansResult <- kmeans(frame,"+ kMeansClusterInput.numberInput.text + "," + kMeansIterationsInput.numberInput.text + "," + kMeansRandomSets.numberInput.text +"," + kMeansAlgo.choiceBox.selectedLabel+")";
			}  */
			
			protected function doKMeansButton_clickHandler(event:MouseEvent):void
			{
				var clusterNumber:Number = Number(pamClusterInput.numberInput.text);
				
				if(!(pamMteric.choiceBox.selectedLabel == "Choose metric"))
				{
					pam.doPAM(finalColumns,latestColumnKeys,clusterNumber,pamMteric.choiceBox.selectedLabel);
					
				}
				else
				{
					pam.doPAM(finalColumns,latestColumnKeys,clusterNumber,"euclidean" );
				}
				
			}
			
		]]>
	</mx:Script>

</DraggablePanel>
