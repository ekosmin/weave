<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author spurushe
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="K Means Clustering Editor"
				
				backgroundColor="0x87CEFF" width="300" height="400"
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool"
				>
	<mx:VBox id="algoLayout" width="100%" height="100%" 
			 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10">
		<mx:VBox id="kMeansSection" width="100%" height="20%" >
			<mx:Label text="KMeans Clustering" fontWeight="bold"/>
			
			<!--1-->
			<mx:HBox paddingBottom="10">
			<mx:Label text="Iterations" color="0x003366" fontThickness="10"/>
			<TextInputWithPrompt id="kMeansiterations" width="10%" height="10%"/>
		    <mx:Label text="Cluster Number" color="0x003366"/>
			 <TextInputWithPrompt id="kMeansclusterNumber" width="10%" height="10%"/>
			<mx:Label text="Algorithm" color="0x003366"/>
			<mx:ComboBox id="kMeansAlgo" width="10%" height="10%">
				<mx:String>Choose algorithm</mx:String>
				<mx:String>Hartigan-Wong</mx:String>
				<mx:String>Lloyd</mx:String>
				<mx:String>Forgy</mx:String>
				<mx:String>MacQueen</mx:String>
			</mx:ComboBox>	
			</mx:HBox>
			
			<!--2-->
			<mx:Label text="Fuzzy KMeans Clustering" fontWeight="bold"/>
			<mx:HBox paddingBottom="10">
				<mx:Label text="Iterations" color="0x003366" fontThickness="10"/>
				<TextInputWithPrompt id="fuzzkMeansiterations" width="10%" height="10%" prompt="10/100"/>
				<mx:Label text="Cluster Number" color="0x003366"/>
				<TextInputWithPrompt id="fuzzkMeansclusterNumber" width="10%" height="10%" prompt="5"/>
				<!--mx:Label text="Distance Metric" color="0x003366"/>
				<mx:ComboBox id="fuzzkMeansAlgo" width="10%" height="10%">
					<mx:String>Choose distance metric</mx:String>
					<mx:String>euclidean</mx:String>
					<mx:String>manhattan</mx:String>
					<mx:String>SqEuclidean</mx:String>
				</mx:ComboBox-->	
			</mx:HBox>	
		</mx:VBox>
		
		<mx:Button label="RUN" id="runAllAlgos" layoutDirection="rtl" click="runAllAlgos_clickHandler(event)"/>
		
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.core.ICallbackCollection;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.disposeObject;
			import weave.api.newDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.CallbackCollection;
			import weave.core.LinkableHashMap;
			import weave.data.AttributeColumns.NumberColumn;
			import weave.data.KeySets.KeySet;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;


			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			public var inputColumns:LinkableHashMap = null;
			public var selectedRecords:Array = new Array();//keys of the selected records
			public var latestColumnKeys:Array = new Array();
			public var finalColumns:Array = new Array();
			public var subsetFinalColumns:Array = new Array();
			private var finalColumnsGroup:ICallbackCollection; // linkable object used to group norm columns and check busy status
				
			
			private var script:String = "library(cluster)\n" +
				"frame <- data.frame(inputColumns)\n" +
				"kMeansResult <- kmeans(frame,knumberofclusters,knumberofIterations, nstart = randomsets, algorithm)\n" +
				"fuzzkmResult <- fanny(frame,fknumberofclusters, maxit = fknumberofIterations)\n"; 
			
				
			override protected function inConstructor():void
			{
				super.inConstructor();
				/* var columns:Array = SimpleVisTool.getDefaultColumnsOfMostCommonKeyType();
				for (var i:int = 0; i < columns.length; i++)
					inputColumns.requestObjectCopy(null, columns[i]); */
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				preprocessingColumns();
				inputColumns.addGroupedCallback(this, preprocessingColumns);
			}
			
			public static function get selection():KeySet
			{
				return Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			}
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]] where keys implement IQualifiedKey
			 */
			public function joinColumns(columns:Array):Array
			{
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				//make dataype Null, so that columns will be sent as exact dataype to R
				//if mentioned as String or NUmber ,will convert all columns to String or Number .
				var result:Array = ColumnUtils.joinColumns(columns,null, true, keys);
				return [result.shift(),result];
			}
			
			// we need only numerical columns for clustering
			private function preprocessingColumns():void
			{
				var tempColumns:Array = new Array();
				var colObjects:Array = inputColumns.getObjects(IAttributeColumn);
				var attributeColumns :Array = new Array();
				for (var i:int = 0; i < colObjects.length; i++)
				{
					var col:IAttributeColumn = colObjects[i] as IAttributeColumn;
					var datatype:String = ColumnUtils.getDataType(col);
					 if(datatype == "number")
					{
						attributeColumns.push(col);
					}
				}
				
				for(var h :int = 0; h < attributeColumns.length; h++)
				{
					tempColumns[h] = new Array();
				}
			
				for(var s:int = 0; s < attributeColumns.length; s++)
				{
					var testCol:IAttributeColumn = attributeColumns[s];
					for(var f:int = 0; f < selectedRecords.length; f++)
					{
						var key:IQualifiedKey = selectedRecords[f] as IQualifiedKey;
						tempColumns[s].push(testCol.getValueFromKey(key,Number));
					}
				}
				
				//converting subsetcollection into columns
				disposeObject(finalColumnsGroup);
				finalColumnsGroup = newDisposableChild(this, CallbackCollection);
				for (var j:int = 0 ; j < tempColumns.length; j++)
				{
					var pickUpColumn:IAttributeColumn = (attributeColumns[j] as IAttributeColumn);
					var testcol:NumberColumn = ResultUtils.resultAsNumberColumn(selectedRecords,tempColumns[j],(ColumnUtils.getTitle(pickUpColumn)+"norm"));
					subsetFinalColumns.push(testcol);
					registerLinkableChild(finalColumnsGroup, testcol);
				}
				
				finalColumnsGroup.addImmediateCallback(this, checkifColumnsFilled);
				
			} 
			
			private function checkifColumnsFilled():void
			{
				if (WeaveAPI.SessionManager.linkableObjectIsBusy(finalColumnsGroup))//do the next chunk of code only after finalColumnsGroup is filled
					return;
					
						var joinedColumns:Array = joinColumns(subsetFinalColumns);
						latestColumnKeys = joinedColumns[0];
						finalColumns = joinedColumns[1];
					
			}
			
			protected function runAllAlgos_clickHandler(event:MouseEvent):void
			{
				// to do: figure out a way to add the required scripts
				var inputValues:Array = new Array();
				inputValues.push(finalColumns);
				
				//clusternumber inputs
				var kmclusternumber:Number = Number(kMeansclusterNumber.text);
				var kmiterationNumber:Number = Number(kMeansiterations.text);
				var _randomSets:Number = 1;
				//iteration number inputs
				var fkmClusterNumber:Number = Number(fuzzkMeansclusterNumber.text);
				var fkmIterationNumber:Number = Number(fuzzkMeansiterations.text);
				
				//kmeans inputs
				inputValues.push(kmclusternumber);
				inputValues.push(kmiterationNumber);
				inputValues.push(_randomSets);
				var inputNames:Array = ["inputColumns", "knumberofclusters","knumberofIterations","randomsets"];
				if(kMeansAlgo.selectedLabel != "Choose algorithm")
				{
					inputValues.push(kMeansAlgo.selectedLabel);
					inputNames.push("algorithm");
				}
				else
				{
					inputValues.push("euclidean");
					inputNames.push("algorithm");
				}
				
				//fuzzy kmeans inputs
				inputValues.push(fkmClusterNumber);
				inputNames.push("fknumberofclusters");
				/* if(fuzzkMeansAlgo.selectedLabel != "Choose distance metric")
				{
					inputValues.push(fuzzkMeansAlgo.selectedLabel);
					inputNames.push("dmetric");
				}
				else
				{
					inputValues.push("euclidean");
					inputNames.push("dmetric");
				} */
				
				inputValues.push(fkmIterationNumber);
				inputNames.push("fknumberofIterations");
				
				//outputs
				var outputNames:Array = ["kMeansResult$cluster","fuzzkmResult$clustering"];
				
				var query:AsyncToken = Rservice.runScript(latestColumnKeys,inputNames,inputValues,outputNames,script,"",false, false, false);
				addAsyncResponder(query,handleRunScriptResult, handleRunScriptFault,latestColumnKeys);
			}
			
			public function handleRunScriptResult(event:ResultEvent, keys:Array):void
			{
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;
				trace('Robj:',ObjectUtil.toString(Robj));
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);				
				}
				
				ResultUtils.rResultToColumn(keys, RresultArray, Robj);
			}
			
			
			public function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError(event);
			}
		]]>
	</mx:Script>
</DraggablePanel>

