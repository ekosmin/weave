<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				title="{lang('Saved Selections')}"
				width="25%" height="10%"
				layout="vertical" xmlns:tools="weave.visualization.tools.*" xmlns:editors="weave.editors.*">
	
	<mx:Canvas width="100%" height="100%">
		
		<CustomComboBox id="selectionSelectorBox"
						width="100%" height="100%" minHeight="0"
						labelFunction="selectionsListLabelFunction"
						valueCommit="itemSelected()"
						/>
	</mx:Canvas>
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableString;
			import weave.data.KeySets.KeySet;
			
			public const prompt:LinkableString = registerLinkableChild(this, new LinkableString(lang('Select a selection...')));
			public const includeAllRecordsOption:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateSubsets);
			private var setToIndex:int = -1;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				minimizable.value = false;
				maximizable.value = false;
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				Weave.savedSelectionKeySets.addGroupedCallback(this, updateSubsets, true);
				Weave.defaultSelectionKeySet.addGroupedCallback(this, handleGlobalSubsetChange);
				linkBindableProperty(prompt, selectionSelectorBox, 'prompt');
			}
			private function handleGlobalSubsetChange():void
			{
				if( !Weave.defaultSelectionKeySet.keys.length ) // IF SHOWING ALL RECORDS
					selectionSelectorBox.selectedIndex = -1;
			}
			private function updateSubsets():void
			{
				var list:Array = Weave.savedSelectionKeySets.getObjects();
				if (includeAllRecordsOption.value)
					list.unshift(false);
				selectionSelectorBox.dataProvider = list;
				if( setToIndex >= 0 )
				{
					selectionSelectorBox.selectedIndex = setToIndex;
					setToIndex = -1;
				}
			}
			
			public function selectItem(name:String):void
			{
				setToIndex = Weave.savedSelectionKeySets.getNames().indexOf(name);
			}
			
			/**
			 * Function used solely to get the label for each item in the list
			 **/
			private static function selectionsListLabelFunction(item:Object):String
			{
				if (!item)
					return lang("No selection");
				
				// The label will be the name of the item followed by the record count
				var label:String = Weave.savedSelectionKeySets.getName(item as KeySet);
				return lang("{0} ({1} records)", label, (item as KeySet).keys.length);
			}
			
			protected function itemSelected():void
			{
				if (selectionSelectorBox.selectedIndex == -1 ||
					selectionSelectorBox.selectedItem == null ) return;
				
				var selection:KeySet = selectionSelectorBox.selectedItem as KeySet;
				if (selection)
					copySessionState(selection, Weave.defaultSelectionKeySet);
				else
					Weave.defaultSelectionKeySet.clearKeys(); // all records
				
				// reset the selected item to what it was before we set the global subset
				selectionSelectorBox.selectedItem = selection;
			}
			
		]]>
	</mx:Script>
	<ControlPanel>
		<mx:VBox label="{lang('Settings')}">
			<IndentTextInput label="{lang('Prompt')}" creationComplete="linkBindableProperty(prompt, event.target, 'text')"/>
			<mx:CheckBox label='{lang("Include \"No selection\" option")}' creationComplete="linkBindableProperty(includeAllRecordsOption, event.target, 'selected')"/>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ControlPanel>
</DraggablePanel>
