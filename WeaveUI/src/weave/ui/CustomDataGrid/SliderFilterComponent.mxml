<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
		implements="weave.ui.CustomDataGrid.IFilterComponent, weave.api.core.ILinkableObject"
		horizontalAlign="center" verticalGap="0"
		verticalScrollPolicy="off" horizontalScrollPolicy="off"  creationPolicy="all" xmlns:ui="weave.ui.*" >
	<mx:Label id="lbl" textAlign="center" width="100%"/>
	<mx:HSlider id="rangeSlider"
				thumbCount="2" liveDragging="true" width="100%" height="100%" minWidth="0"
				initialize="initRangeSlider()" showDataTip="false"
				showTrackHighlight="true" />
	<mx:Script>
		<![CDATA[
			import mx.binding.utils.BindingUtils;
			
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnStatistics;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.compiler.StandardLib;
			import weave.core.LinkableNumber;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				// this prevents null point error while updatingDisplayList(thumbs is Null)
				rangeSlider.validateProperties();
				getCallbackCollection(this).addGroupedCallback(this, handleLinkableValues, true);
				BindingUtils.bindSetter(handleBindableValues, rangeSlider, 'values');
			}
			
			public function mapColumnToFilter(col:DataGridColumnForQKeyWithFilterAndGraphics):void
			{
				 _columnWatcher.target = col ? col.attrColumn : null;
				 _statsWatcher.target = col ? WeaveAPI.StatisticsCache.getColumnStatistics(col.attrColumn) : null;
				 initRangeSlider();
			}
			
			private const _statsWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, initRangeSlider, true);
			private const _columnWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, initRangeSlider, true);
			
			private function get column():IAttributeColumn
			{
				return _columnWatcher.target as IAttributeColumn;
			}
			private function get stats():IColumnStatistics
			{
				return _statsWatcher.target as IColumnStatistics;
			}
			
			protected function initRangeSlider():void
			{
				if (!column || !rangeSlider)
				{
					callLater(initRangeSlider);
					return;
				}
				rangeSlider.minimum = stats.getMin();
				rangeSlider.maximum = stats.getMax();
				handleLinkableValues();
			}
			/**
			 * Number of significant digits to use when user interacts with the slider.
			 */
			public var significantDigits:int = 3;
			
			private function fixPrecision(value:Number):Number
			{
				if (value == stats.getMin() || value == stats.getMax())
					return value;
				return StandardLib.roundSignificant(value, significantDigits);
			}
			private function handleBindableValues(values:Array):void
			{
				if (UIUtils.hasFocus(rangeSlider))
				{
					minimum.value = fixPrecision(values[0]);
					maximum.value = fixPrecision(values[1]);
				}
			}
			private function handleLinkableValues():void				
			{
				var min:Number = minimum.value;
				var max:Number = maximum.value;
				if (isNaN(min))
					min = stats.getMin();
				if (isNaN(max))
					max = stats.getMax();
				if (StandardLib.compare(rangeSlider.values, [min,max]) != 0)
					rangeSlider.values = [min, max];
				
				lbl.text = lang("[{0}, {1}]", min, max);
			}
			
			public const minimum:LinkableNumber = registerLinkableChild(this, new LinkableNumber());
			public const maximum:LinkableNumber = registerLinkableChild(this, new LinkableNumber());
			
			/**
			 * @return true if maximum/minimum values are not equal to the column stats min/max values.
			 */
			public function get isActive():Boolean
			{
				return !(
					isFinite(minimum.value) && minimum.value == stats.getMin() &&
					isFinite(maximum.value) && maximum.value == stats.getMax()
				);
			}
			
			public function filterFunction(key:Object):Boolean
			{
				if (!column)
					return true;
				var value:Number = column.getValueFromKey(key as IQualifiedKey, Number);
				var min:Number = minimum.value;
				var max:Number = maximum.value;
				if (isFinite(value))
				{
					if (isFinite(min) && value < min)
						return false;
					if (isFinite(max) && value > max)
						return false;
				}
				return true;
			}
		]]>
	</mx:Script>
</mx:VBox>
