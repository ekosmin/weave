<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<!---
@author abaumann
@author sanbalagan
@author adufilie
-->
<mx:VBox xmlns:ui ="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns="weave.ui.*"
	implements="weave.api.ui.ILinkableObjectEditor,weave.api.core.ILinkableObject"
	width="100%" height="100%"
	enabled="{colorRamp != null}"
	>
	<mx:HBox height="100%" width="100%">
		<mx:VBox width="100%" height="100%" id="listVBox">
			<ui:ColorRampList id="colorRampList" colorRamp="{colorRamp}"/>
			<ui:Indent label="{lang('Filter:')}">
				<ui:CustomComboBox id="filterCombo" change="(colorRampList.dataProvider as ICollectionView).refresh();"/>
			</ui:Indent>
		</mx:VBox>
		<mx:VBox height="100%">
			<mx:Label text="{lang('Customize')}" fontWeight="bold"/>
			<mx:HBox height="100%" width="100%" horizontalGap="0">
				<mx:Canvas id="colorRampCanvas" resize="if (colorRamp) colorRamp.draw(colorRampCanvas, 0, 1)"
						   borderStyle="solid" borderColor="0x000000"
						   width="20" height="100%"/>
				<mx:List id="colorsList"
						 height="100%"
						 width="150"
						 borderStyle="none"
						 dragEnabled="true"
						 dropEnabled="true"
						 dragMoveEnabled="true"
						 dragComplete="updateNewColorScale()"
						 initialize="UIUtils.pad(event, 2);">
					<mx:itemRenderer>
						<mx:Component>
							<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off" width="100%">
								<ui:CustomColorPicker id="cPicker" showTextField="true"/>
								<ui:TextInputWithPrompt borderStyle="none" editable="false" id="cText" backgroundAlpha="0" width="100%"/>
								<mx:Image source="@Embed(source='/weave/resources/images/cancel.png')" buttonMode="true"
										   click="outerDocument.removeColorItem();"/>
								<mx:Script>
									<![CDATA[
										import mx.collections.ArrayCollection;
										import mx.events.DragEvent;
										
										import weave.compiler.StandardLib;
										import weave.core.UIUtils;
										
										override protected function childrenCreated():void
										{
											super.childrenCreated();
											
											cPicker.addEventListener(Event.CHANGE, handleColorPicked);
											cText.addEventListener(Event.CHANGE, handleColorPicked);
											outerDocument.colorsList.addEventListener(DragEvent.DRAG_START, handleDragStart);
										}
										
										override public function set data(value:Object):void
										{
											super.data = value;
											
											if (data)
											{
												var number:Number = StandardLib.asNumber(data.color);
												var string:String = outerDocument.colorToString(number);
												
												cPicker.selectedColor = number;
												cText.text = string;
											}
										}
										
										private function handleColorPicked(event:Event):void
										{
											if (event.currentTarget == cPicker)
												data.color = outerDocument.colorToString(cPicker.selectedColor);
											else
												data.color = outerDocument.colorToString(cText.text);
											outerDocument.updateNewColorScale();
										}
										
										private function handleDragStart(e:Event):void
										{
											cPicker.close();
											cText.setSelection(0, 0);
											setFocus(); // stops selecting text
										}
									]]>
								</mx:Script>
							</mx:HBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:List>
			</mx:HBox>
			<mx:HBox width="100%">
				<CenteredImage id="reverseButton" buttonMode="true" source="@Embed(source='/weave/resources/images/reverse-order.png')"
							   width="22" height="22" alpha="0.8"
							   toolTip="{lang('Reverse the order of the colors.')}"
							   click="colorRamp.reverse();"/>
				<mx:Spacer width="100%"/>
				<mx:Button label="{lang('Add color')}" click="(colorsList.dataProvider as ArrayCollection).addItem({color:'0xFFFFFF'}); updateNewColorScale();"/>
			</mx:HBox>
		</mx:VBox>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import weave.utils.VectorUtils;
			import weave.api.registerLinkableChild;
			import weave.api.newLinkableChild;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.utils.AsyncSort;
			import mx.events.DragEvent;
			import mx.collections.ICollectionView;
			import mx.collections.IList;
			import mx.collections.ListCollectionView;
			import weave.compiler.StandardLib;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			
			import weave.api.core.ILinkableObject;
			import weave.primitives.ColorRamp;
			
			private const colorRampWatcher:LinkableWatcher = registerLinkableChild(this, new LinkableWatcher(ColorRamp), handleColorRampChange, true);
			[Bindable]
			public function get colorRamp():ColorRamp { return colorRampWatcher.target as ColorRamp; }
			public function set colorRamp(value:ColorRamp):void { colorRampWatcher.target = value; }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				var tagsLookup:Object = {};
				var tags:Array = [];
				for each (var xml:XML in ColorRamp.allColorRamps.colorRamp)
					for each (var tag:String in String(xml.@tags).split(','))
						if (!tagsLookup[tag])
							tags.push(tagsLookup[tag] = tag);
				tags.sort(Array.CASEINSENSITIVE);
				tags.unshift(ALL);
				filterCombo.dataProvider = tags;
				colorRampList.dataProvider.filterFunction = filterColormaps;
			}
			
			private const ALL:String = lang('All');
			
			private function filterColormaps(item:Object):Boolean
			{
				var filter:String = filterCombo.selectedItem as String;
				return (filter == ALL || String(item.@tags).split(',').indexOf(filter) >= 0);
			}
			
			public function removeColorItem():void
			{
				(colorsList.dataProvider as ArrayCollection).removeItemAt(colorsList.selectedIndex);
				updateNewColorScale();
			}
			
			internal function colorToString(color:*):String
			{
				color = StandardLib.asNumber(color);
				return '0x' + StandardLib.numberToBase(color, 16, 6).toUpperCase();
			}
			
			private function handleColorRampChange():void
			{
				if (!initialized)
				{
					callLater(handleColorRampChange)
					return;
				}
				
				if (colorsList.dataProvider == null)
					colorsList.dataProvider = [];
				
				var dp:ArrayCollection = (colorsList.dataProvider as ArrayCollection);
				dp.removeAll();
				
				if (!colorRamp)
					return;
				
				var colors:Array = colorRamp.getColors();
				for (var i:int = 0; i < colors.length; i++)
				{
					var item:Object = new Object();
					item.color = colorToString(colors[i]);
					dp.addItem(item);
				}
				
				item = ColorRamp.findMatchingColorRampXML(colorRamp)
				colorRampList.selectedItem = item;
				if (item)
					colorRampList.scrollToIndex(colorRampList.selectedIndex);
				
				colorRamp.draw(colorRampCanvas, 0, 1);
			}
			
			public function updateNewColorScale():void
			{
				var items:Array = VectorUtils.getArrayFromCollection(colorsList.dataProvider as ICollectionView, false);
				colorRamp.setSessionState(VectorUtils.pluck(items, 'color'));
			}
			public function setTarget(object:ILinkableObject):void
			{
				colorRamp = object as ColorRamp;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
		]]>
	</mx:Script>
</mx:VBox>
