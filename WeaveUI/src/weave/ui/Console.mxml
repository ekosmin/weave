<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---	
@author adufilie
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui ="weave.ui.*"
    xmlns:sessioning="weave.core.*"
	label="Console"
	fontSize="11" fontFamily="_typewriter"
	width="100%" height="100%"
	paddingLeft="{padding}" paddingRight="{padding}" paddingBottom="{padding}" paddingTop="{padding}" verticalGap="{padding}"
	minHeight="0"
	verticalScrollPolicy="off">
	<mx:TextArea id="log"
				 click="handleConsoleLogClick()"
				 mouseDown="handleConsoleLogClick()"
				 width="100%" height="100%" minHeight="0" editable="false" borderStyle="{innerBorderStyle}"/>
	<mx:TextInput id="input" width="100%"
				  borderStyle="{innerBorderStyle}"
				  enter="runCommand()"
				  keyDown="handleConsoleKeyDown(event)"
				  addedToStage="input.createTextField(-1); input.callLater(input.setFocus);"
				  />
	<mx:Script>
		<![CDATA[
			import mx.containers.VBox;
			import mx.core.mx_internal;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.api.reportError;
			import weave.utils.ConsoleEngine;
			import weave.utils.Identify;
			use namespace mx_internal;
			
			[Bindable] public var padding:int = 5;
			[Bindable] public var innerBorderStyle:String = 'inset';
			
			/**
			 * This is the context in which expressions will be evaluated (The "this" argument passed to Function.apply).
			 */
			public function get context():Object { return engine.context; }
			public function set context(value:Object):void { engine.context = value; }
			
			public const engine:ConsoleEngine = new ConsoleEngine();

			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				input.getTextField().alwaysShowSelection = true;
				
				engine.compiler.includeLibraries(Weave);
				engine.consoleMethods['trace'] = consoleTrace;
				engine.consoleMethods['clear'] = consoleClear;
				engine.consoleMethods['identify'] = Identify.identify;
				engine.consoleMethods['view'] = consoleView;
				
				var app:Object = WeaveAPI.topLevelApplication;
				if (app.hasOwnProperty('visApp'))
					engine.consoleMethods['visApp'] = app.visApp
		    }
			
			public function consoleTrace(...args):void
			{
				log.text += '\r' + args.join(' ');
				log.validateNow();
				log.verticalScrollPosition = log.maxVerticalScrollPosition;
			}
			public function consoleClear():String
			{
				return log.text = '';
			}
			public function consoleView(object:*):void
			{
				var viewer:ObjectViewer = DraggablePanel.openStaticInstance(ObjectViewer);
				viewer.data = object;
			}
			
			private function runCommand():void
			{
				if (!input.text)
					return;

				// append command text to log
				consoleTrace('\r' + input.text);
				// remove duplicate history items
				var index:int;
				while ((index = history.indexOf(input.text)) >= 0)
					history.splice(index, 1);
				// add command to end of history, and point historyIndex to that command
				historyIndex = history.push(input.text) - 1;
				
				// run the command
				var result:*;
				try
				{
					result = engine.runCommand(input.text);
				}
				catch (e:Error)
				{
					result = 'Compile Error';
					reportError(e);
				}
				
				// prepare the result for printing
				try
				{
					if (typeof result == 'object' && !(result is DisplayObject))
					{
						if (result != null && (result as Object).hasOwnProperty('toString') && (result as Object).toString is Function)
							result = result.toString();
						else
							result = ObjectUtil.toString(result);
						var max:int = 1024;
						var text:String = result;
						if (text.length > max)
							text = text.substr(0, max) + '...';
						result = StringUtil.trim(text);
					}
					else
						result = String(result);
				}
				catch (e:*)
				{
					try
					{
						result = String(result)
					}
					catch (ee:*)
					{
						result = debugId(result);
					}
				}
				
				// if the command runs successfully, clear the input area
				input.text = '';
				historyIndex = history.length;
				
				// append result to log
				consoleTrace(result);
			}
			private function handleConsoleLogClick():void
			{
				if (input.selectionBeginIndex == 0 && (input.selectionEndIndex == input.text.length || input.selectionEndIndex == 0))
				{
					var clickedIndex:int = log.selectionEndIndex;
					if (clickedIndex == log.selectionBeginIndex && clickedIndex < log.text.length)
					{
						var beginIndex:int = log.text.lastIndexOf('\r', clickedIndex) + 1; // find the last \r BEFORE the clicked position
						var endIndex:int = log.text.indexOf('\r', clickedIndex); // find the first \r AFTER the clicked position
						log.selectionBeginIndex = beginIndex;
						log.selectionEndIndex = endIndex < 0 ? log.text.length : endIndex;
						log.validateNow();
					}
					input.text = StringUtil.trim(log.text.substring(log.selectionBeginIndex, log.selectionEndIndex)).split('\r').join('; ');
					input.setSelection(0, input.text.length);
				}
			}
			
			private var history:Array = [];
			private var historyIndex:int = 0;
			private function handleConsoleKeyDown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.UP)
				{
					historyIndex = Math.max(0, historyIndex - 1);
				}
				else if (event.keyCode == Keyboard.DOWN)
				{
					historyIndex = Math.min(history.length, historyIndex + 1);
				}
				else
				{
					// do not modify input text
					return;
				}
				
				if (historyIndex < history.length)
					input.text = history[historyIndex];
				else
					input.text = '';
				
				input.setSelection(int.MAX_VALUE, int.MAX_VALUE);
			}
		]]>
	</mx:Script>
</mx:VBox>
