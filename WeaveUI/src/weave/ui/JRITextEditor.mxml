<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
JRITextEditor

1. Pick your columns
2. Assign variable names to those columns
3. Input an R script using those variable names
4. List the outputs you want
5. The columns get joined on the client-side using the keys (record identifiers) to produce flat Arrays lined up by row index
6. These columns become the input to the R script on the server, the server runs the script and returns the results.
7. On the client side, any returned Arrays are matched up with the original keys using the same row order to become columns.
8. Any other results are just printed out to the text area.

@author spurushe
@author sanbalag
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="JRI Script UI testing"
				x="15%" width="80%" y="15%" height="80%"
				backgroundColor="#EFF4BC" 
				layout="horizontal"
				autoLayout="true" implements="weave.api.ui.IVisTool_R"
				>
	
	
	<mx:HBox width="100%" height="100%" paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}" paddingBottom="{padding}">
		<mx:HBox width="100%" height="100%">
			<mx:VBox width="20%" height="100%" verticalGap="0">
				<mx:Label text="{lang('(1) Select data to use in your script')}"/>
				<mx:CheckBox id="columnAsList" label="{lang('Use Columns as R-List(HashMap)')}"/>
				<ColumnListComponent id="inputColumnList" label="{lang('Input columns')}" hashMap="{variables}" width="100%" height="100%"   />			
			</mx:VBox>
			<mx:VBox width="45%" height="100%">
				<CustomTabNavigator id="tn"  width="100%" height="100%">
					<mx:VBox label="{lang('User Script')}" width="100%" height="100%" verticalGap="0">
						<Paragraph text="{lang('(2) Assign variables to your data (Separate by commas)')}"/>
						<mx:TextArea id = "assignTA" width="100%" height="100%" wordWrap="false"/>
						
						<mx:Spacer height="{padding}"/>
						
						<Paragraph text="{lang('(3) Enter a script (type or paste in)')}"/>			
						<mx:TextArea id = "inputTA" width="100%" height="100%" text=""/>						
						
						<mx:Spacer height="{padding}"/>
						
						<Paragraph text="{lang('(4) Input a plot script (Optional)')}"/>
						<mx:TextArea id = "plotTA" width="100%" height="100%" text=""/>
						
						<mx:Spacer height="{padding}"/>
						
						<Paragraph text="{lang('(5) Specify script outputs to display, separated by commas')}"/>
						<mx:TextArea id = "outputTA" width="100%" height="100%" wordWrap="false"/>
						
						<mx:Spacer height="{padding}"/>
						
						
						
						<mx:Spacer height="{padding}"/>
						
						<Paragraph text="{lang('(7) Export your script for later use')}"/>
						<mx:HBox>
							<mx:Button id="exportBtn" label="{lang('Export')}" buttonDown="export_buttonDownHandler(event)"/>
							<mx:Button id="importBtn" label="{lang('Import')}" buttonDown="import_buttonDownHandler(event)"/>	
						</mx:HBox>						
					</mx:VBox>
					
					<mx:VBox label="{lang('Built-in Script')}" width="100%" height="100%" paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}" paddingBottom="{padding}" >
						
						<mx:HDividedBox width="100%" height="100%">
							<mx:Box backgroundColor="#000000" height="100%">
								<mx:LinkBar direction="vertical" id="scriptMenu"  dataProvider="{scripSection}" itemClick="linkBar_itemClickHandler(event)"    
											fontFamily="Arial" 
											fontSize="12" 
											color="#FCFEFE" 
											backgroundColor="#020202"
											borderColor="#B7BABC" 
											themeColor="#64B7BC" 
											disabledColor="#00ffff"  verticalAlign="middle" textAlign="left" fontWeight="bold"    disabledOverlayAlpha="1"/>
							</mx:Box>
							<mx:Canvas width="100%" height="100%">
								<CustomViewStack  paddingTop="20" paddingLeft="20" paddingRight="20" id="scripSection" resizeToContent="true" backgroundColor="white" barColor="black">			
									<mx:Form label="{lang('Clusters')}" width="100%" height="100%">
										<mx:FormItem label="{lang('Number of Clusters')}">
											<mx:TextInput id="clusterNumber"/>
										</mx:FormItem>				
										<mx:FormItem label="{lang('Number of Iteration')}">
											<mx:TextInput id="iterationNumber"/>
										</mx:FormItem>											
									</mx:Form>
									<mx:Form label="{lang('Correlation')}" width="100%" height="100%">
										<mx:FormItem label="{lang('Use')}">
											<mx:ComboBox id="corParameterUse" dataProvider="{corUseArray}"/>
										</mx:FormItem>				
										<mx:FormItem label="{lang('Method')}">
											<mx:ComboBox id="corParameterMethod" dataProvider="{corMethodArray}"/>
										</mx:FormItem>	
										
										
									</mx:Form>
								</CustomViewStack>
							</mx:Canvas>
						</mx:HDividedBox>
						
						
					</mx:VBox>
				</CustomTabNavigator>
				<Paragraph text="{lang('(6) Run your script on the server')}"/>
				<mx:HBox>
					<mx:Button id="B2" label="{lang('Run script')}"  click="viewAndSendbuttonClickHandler(event)"/>
					<mx:CheckBox id="intermediateResultCB" label="{lang('Verbose')}" toolTip="{lang('Show intermediate results from R')}"/>
					<mx:CheckBox id="warningCB" label="{lang('Warnings')}" toolTip="{lang('Show warnings from R')}"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox width="35%" height="100%" verticalGap="0">
				<mx:VBox width="100%" height="50%" verticalGap="0">
					<mx:Label text="{lang('Result')}"/>
					<mx:TextArea id="ResultTA" width="100%" height="100%" editable="false"/>
				</mx:VBox>
				<mx:VBox width="100%" height="50%" verticalGap="0" id="resultDataGrid">
					<CustomTabNavigator id="tableTabs" width="100%" height="100%"/>
					<!--<mx:Label id="objName" text=""/>
					<mx:DataGrid id="dg" width="100%" height="100%"/>-->
				</mx:VBox>
				
			</mx:VBox>
			
		</mx:HBox>
		
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.controls.Image;
			import mx.events.FlexEvent;
			import mx.events.ItemClickEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.KeySets.KeySet;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, JRITextEditor, "JRI Script Editor");
			
			private const padding:int = 5;
			
			[Bindable]
			private var corUseArray:Array = ["everything", "all.obs", "complete.obs", "na.or.complete"];
			[Bindable]
			private var corMethodArray:Array = ["pearson", "kendall", "spearman"];
			
			
			public const variables:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			private var rService:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			public const inputTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			public const plotTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			public const outputTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			public const assignTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			
			
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				var columns:Array = ColumnUtils.getColumnsWithCommonKeyType();
				for (var i:int = 0; i < columns.length; i++)
					variables.requestObjectCopy(null, columns[i]);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkBindableProperty(inputTALinkable,inputTA,"text");
				linkBindableProperty(plotTALinkable,plotTA,"text");
				linkBindableProperty(outputTALinkable,outputTA,"text");
				linkBindableProperty(assignTALinkable,assignTA,"text");
			}
			
			
			private var result:Array;
			private var joinedColumnQKeys:Array;
			private var joinedColumnKeys:Array;
			private var joinedColumns:Array;
			//Columns from ColumnListComponent 
			private var selectedColumns:Array;
			private var attributeColumns:Array;
			private var keyType:String = null;
			private var assignValues:Array;
			
			private function collectColumnsFromKeys():void{
				result = new Array();				
				selectedColumns = variables.getObjects();				
				attributeColumns = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				for(var i:int = 0; i<selectedColumns.length; i++)
				{
					attributeColumns[i] = selectedColumns[i] as IAttributeColumn;
				}
				//joinColumns Called only When columns are added to ColumnListComponent
				//if(selectedColumns.length == 0)
				//	return;
				if(selectedColumns.length >0)
				{					
					// get records for keys common to all columns 
					result = joinColumns(attributeColumns);
					joinedColumnQKeys = result[0];
					joinedColumns = result[1];
					joinedColumnKeys = joinedColumnQKeys.concat();
					// replace each IQualifiedKey with its localName
					for (var j:int = 0; j < joinedColumnKeys.length; j++)
					{
						var qkey:IQualifiedKey = joinedColumnKeys[j];						
						if (keyType && keyType != qkey.keyType)// sanity check
						{
							// there are multiple key types in the list of keys..
							Alert.show(lang("This feature only works with keys having a common keyType.  Key types do not match: ") + [keyType, qkey.keyType]);
							return;
						}
						keyType = qkey.keyType;
						joinedColumnKeys[j] = qkey.localName;
					} 					
				}
				
				//Values need to assign for Column names in R
				assignValues = joinedColumns;
			}
			private static function get selection():KeySet{
				return Weave.defaultSelectionKeySet;
			}
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]] where keys implement IQualifiedKey
			 */
			private function joinColumns(columns:Array):Array
			{
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				//make dataype Null, so that columns will be sent as exact dataype to R
				//if mentioned as String or NUmber ,will convert all columns to String or Number .
				var result:Array = ColumnUtils.joinColumns(columns,null, false, keys);
				return [result.shift(), result];
			}
			
			private function viewAndSendbuttonClickHandler(event:MouseEvent): void{	
				tableTabs.removeAllChildren();
				collectColumnsFromKeys();
				var assignNames:Array;
				var script:String;
				var plotScript:String;
				var outputNames:Array;
				var showIntermediateResults:Boolean = intermediateResultCB.selected;
				var showWarnings:Boolean = warningCB.selected;
				var useColumnAsList:Boolean = columnAsList.selected;
				var token:Object = null;
				if(tn.selectedIndex == 0){
					//Names for Column that need to be used in R
					var RscriptAssignNames:String = assignTA.text;
					assignNames = WeaveAPI.CSVParser.parseCSVRow(assignTA.text) || [];
					//Script for R input
					script = inputTA.text;
					plotScript = plotTA.text;					
					outputNames = WeaveAPI.CSVParser.parseCSVRow(outputTA.text) || [];
					token = keyType;
				}	
				else{
					assignNames = new Array();
					for(var i:int = 0; i<assignValues.length;i++){						
						assignNames.push("col" + i);	
					}
					var namesSeperatedByComma:String = assignNames.join(",");
					if(scriptMenu.selectedIndex == 0){
						script = "dataframe1 <- data.frame("+namesSeperatedByComma+")\n"+
							"Clustering <- function(clusternumber,iter.max){\n"+
							"result1 <- kmeans(dataframe1, clusternumber, iter.max)\n"+
							"result2 <- kmeans(dataframe1, clusternumber, (iter.max - 1))\n"+
							"while(result1$centers != result2$centers){\n"+
							"iter.max <- iter.max + 1\n"+
							"result1 <- kmeans(dataframe1, clusternumber, iter.max)\n"+
							"result2 <- kmeans(dataframe1, clusternumber, (iter.max - 1))\n"+
							"}\n"+
							"print(result1)\n"+
							"print(result2)\n"+
							"}\n"+
							"Cluster <- Clustering("+clusterNumber.text+","+iterationNumber.text+")\n";						
						plotScript = "";
						outputNames = ["Cluster$cluster"];
						token = joinedColumnQKeys;
					}
					if(scriptMenu.selectedIndex == 1){
						script = "data1<-cbind("+namesSeperatedByComma+")\n"+
							"corelation<-cor(data1,use=\""+corParameterUse.selectedLabel+"\", method=\""+corParameterMethod.selectedLabel+"\")";						
						plotScript = "";
						outputNames = ["corelation"];
						token = joinedColumnQKeys;
					}
				}
				while(script.search("\r") > 0){// "\r" - replaced by "/n" in all occurance
					script = script.replace("\r","\n");
				}
				if(token == null){
					token = "";
				}
				//Query is created from runScript with same signature from Jave side				
				var query:AsyncToken = rService.runScript(joinedColumnKeys,assignNames, assignValues, outputNames, script,plotScript, showIntermediateResults,showWarnings,useColumnAsList);
				addAsyncResponder(query, handleScriptResult, handleScriptFault, token);
			}
			
			private function handleScriptResult(event:ResultEvent, token:Object = null):void
			{
				var Robj:Array = event.result as Array;
				var RresultArray:Array = new Array();
				if (Robj == null){
					var error:Error = new Error(lang("R Servlet did not return an Array of results as expected."));
					WeaveAPI.ErrorManager.reportError(error);
					return;
				}
				for (var i:int = 0; i < (event.result).length; i++)	{
					if (Robj[i] == null){
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);			
				}
				
				ResultTA.text = "";
				var resultString:String = "";
				
				
				if(token is String){
					var keyType:String = token as String;
					for (var index:int = 0;index < RresultArray.length; index++){
						var obj:Object = RresultArray[index].value;	
						
						//if obj is HashMap resultKeys will be used
						var resultKeys:Array = new Array();
						for (var key:String in obj){
							resultKeys.push(key);
						}
						
						if(RresultArray[index].name == "Plot Results"){
							var imagePanel:DraggablePanel = Weave.root.requestObject(null, DraggablePanel, false);
							var image:Image = new Image();
							image.source = RresultArray[index].value;
							imagePanel.addChild(image);
							imagePanel.panelWidth.value = "500";
							imagePanel.panelHeight.value = "500";
						}						
						else if(resultKeys.length >1){	
							if(resultKeys.length == joinedColumnKeys.length){// if hashMap from weave columns //temp solution
								if(columnAsList.selected){
									ResultUtils.resultAsSelection(keyType,obj);	
								}
								else{
									resultString = displayResult(RresultArray[index].name,obj);
								}
							}	
							else{								
								displayResult(RresultArray[index].name,obj,true);														
							}
						}
						else{
							resultString = displayResult(RresultArray[index].name,obj);
						} 
					} 
				}
				
				if(token is Array){					
					var keys:Array = token as Array;
					for(var p:int = 0;p < RresultArray.length; p++)	{
						if(RresultArray[p].name == "Plot Results"){
							var imagePanel2:DraggablePanel = Weave.root.requestObject(null, DraggablePanel, false);
							var image2:Image = new Image();
							image2.source = RresultArray[p].value;
							imagePanel2.addChild(image2);
							imagePanel2.panelWidth.value = "500";
							imagePanel2.panelHeight.value = "500";
						}
						if((RresultArray[p].value).length == keys.length){
							ResultUtils.resultAsColorCol(RresultArray[p].name,keys,RresultArray[p].value);							
						}
						if((RresultArray[p].name == "corelation") && ((RresultArray[p].value).length > 0)){							
							displayResult(RresultArray[p].name,RresultArray[p].value,true);	
						}							
						resultString = displayResult(RresultArray[p].name,RresultArray[p].value);	
					}//end of for loop					
				}	
				ResultTA.text = resultString;
			}
			
			private function handleScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				WeaveAPI.ErrorManager.reportError(event.fault);
			}
			
			private function displayResult(resultName:String,obj:Object,inGrid:Boolean = false):String{
				var resultString:String = "";
				if(inGrid){
					var vbox:VBox = new VBox();
					vbox.percentWidth =100;
					vbox.percentHeight = 100;								
					vbox.label = resultName;
					var dg:DataGrid = new DataGrid();								
					dg.dataProvider = ResultUtils.resultAsArrayCollection(obj) ;
					dg.percentWidth =100;
					dg.percentHeight = 100;
					vbox.addChild(dg);
					tableTabs.addChild(vbox);
				}
				else{
					resultString = resultString + resultName + ":\n" + ObjectUtil.toString(obj) +"\n";							
					while (resultString.search("\"") > 0){
						resultString = resultString.replace("\"","");
					}
				}
				return resultString;
			}
			private var _sessionFileSaver:FileReference = null;
			private var _sessionFileLoader:FileReference = null;
			protected function export_buttonDownHandler(event:FlexEvent):void
			{
				var rScriptSessionState:XML =
					<RScriptEditor>
						<assignNames>{assignTA.text}</assignNames>
						<inputScript>{inputTA.text}</inputScript>
						<plotScript>{plotTA.text}</plotScript>
						<outputScript>{outputTA.text}</outputScript>
					</RScriptEditor>;
				
				trace(rScriptSessionState);
				
				//WeaveXMLEncoder.encode(getSessionState(this)
				if(_sessionFileSaver == null)
				{
					_sessionFileSaver = new FileReference();
				}				
				// Create a date that we can append to the end of each file to make them unique
				var date:Date = new Date();
				var dateString:String = date.fullYear +"."+ date.month +"."+ date.day +" "+ date.time;				
				_sessionFileSaver.save(rScriptSessionState, lang("R-Script Session state ") + dateString + ".xml");
			}
			
			private var _defaultsFilename:String = null;
			protected function import_buttonDownHandler(event:FlexEvent):void
			{
				try
				{
					var loadedXML:XML = new XML();
					if(_sessionFileLoader == null)
					{
						_sessionFileLoader = new FileReference();					
						_sessionFileLoader.addEventListener(Event.SELECT,   function (e:Event):void { _sessionFileLoader.load(); _defaultsFilename = _sessionFileLoader.name; } );
						_sessionFileLoader.addEventListener(Event.COMPLETE, function (e:Event):void {loadedXML = XML(e.target.data) ;loadIntoReditor(loadedXML);} );
					}
					_sessionFileLoader.browse([new FileFilter("XML", "*.xml")]);							
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			protected function loadIntoReditor(xml:XML):void{
				assignTA.text = xml.assignNames;
				inputTA.text = xml.inputScript;
				plotTA.text = xml.plotScript;
				outputTA.text = xml.outputScript;
			}
			
			protected function linkBar_itemClickHandler(event:ItemClickEvent):void{
				
			}
			
		]]>
	</mx:Script>
	
</DraggablePanel>
