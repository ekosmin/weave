<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HBox
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.ui.*"
	verticalAlign="middle"
    horizontalScrollPolicy="off"
	verticalScrollPolicy="off"
	creationPolicy="all"
	width="100%"
	addedToStage="handleAddedToStage()"
    >
    <mx:Script>
    	<![CDATA[
			import mx.controls.Label;
			import mx.core.IUIComponent;

			private static const _groups:Dictionary = new Dictionary(true);
			
			/**
			 * This is the label component that will appear to the left of the other children of the Indent component.
			 */
			private const labelComponent:Label = new Label();
			private const labelContainer:HBox = new HBox();
			private var helpComponent:HelpComponent = null;
			private var _useFirstChildAsLabel:Boolean = false;
			private var _group:* = undefined;
			private var _untranslatedLabel:String;
			private var _translate:Boolean = false;
			
			/**
			 * If this is set to true, the first child added to the Indent component
			 * will be used as the indentation spacer instead of a Label component.
			 */
			public function set useFirstChildAsLabel(value:Boolean):void
			{
				_useFirstChildAsLabel = value;
				if (_useFirstChildAsLabel) // remove label
				{
					if (labelContainer.parent == this)
						removeChild(labelContainer);
				}
				else // add label
				{
					if (labelContainer.parent != this)
						addChildAt(labelContainer, 0);
				}
				invalidateSize();
			}
			
			override public function invalidateSize():void
			{
				super.invalidateSize(); // in case we're not grouped
				for each (var ind:Indent in _groups[_group])
					ind.$invalidateSize();
			}
			
			private function $invalidateSize():void { super.invalidateSize(); }
			
			public function set labelFontWeight(value:String):void
			{
				labelComponent.setStyle('fontWeight', value);
			}
			
			/**
			 * @inheritDoc
			 */
    		override protected function createChildren():void
    		{
    			super.createChildren();
				
				labelContainer.setStyle('verticalAlign', 'middle');
				labelContainer.setStyle('horizontalGap', 0);
				labelContainer.addChildAt(labelComponent, 0);
				
				labelAlign = "right";
				useFirstChildAsLabel = _useFirstChildAsLabel;
    		}
			
			/**
			 * @private
			 */
			private function handleAddedToStage():void
			{
				// If there is no group set, group this Indent component with others having the same parent.
				if (parent && _group === undefined)
					setGroup(parent);
			}
			
			/**
			 * Set this to create a help component next to the label.  Not compatible with useFirstChildAsLabel = true.
			 */
			public function set helpContent(content:*):void
			{
				if (!helpComponent)
				{
					helpComponent = new HelpComponent();
					labelContainer.addChild(helpComponent);
				}
				helpComponent.content = content;
			}
			
			/**
			 * Set this to create a help component next to the label.  Not compatible with useFirstChildAsLabel = true.
			 */
			public function set htmlHelpContent(content:*):void
			{
				if (!helpComponent)
				{
					helpComponent = new HelpComponent();
					labelContainer.addChild(helpComponent);
				}
				helpComponent.htmlText = content;
			}
			
			/**
			 * Set this to false if this Indent component should not be grouped with others having the same parent.
			 * @default true
			 */
			public function set grouped(value:Boolean):void
			{
				if (value)
				{
					if (!_group)
					{
						if (parent)
							setGroup(parent);
						else
							_group = undefined;
					}
				}
				else
				{
					setGroup(null);
				}
			}
			
			/**
			 * Set this to an IndentGroup to coordinate the indentation of several Indent components.
			 */
			public function set group(indentGroup:Object):void
			{
				setGroup(indentGroup);
			}
			
			/**
			 * @private
			 */
			private function setGroup(newGroup:Object):void
			{
				var ind:Indent;
				var array:Array;
				// remove from existing group
				if (_group)
				{
					invalidateSize(); // also invalidates group
					array = _groups[_group] as Array;
					array.splice(array.indexOf(this), 1);
				}
				
				_group = newGroup;
				
				// add to new group
				if (_group)
				{
					array = _groups[_group] as Array;
					if (!array)
						_groups[_group] = array = [];
					array.push(this);
					invalidateSize(); // also invalidates group
				}
			}
			
			/**
			 * @inheritDoc
			 */
			override public function validateSize(recursive:Boolean=false):void
			{
				if (_group)
				{
					// find the maximum measuredWidth of all grouped Indent components
					var array:Array = _groups[_group] as Array;
					var max:Number = 0;
					var item:Indent;
					for each (item in array)
						max = Math.max(max, IUIComponent(item.getChildAt(0)).measuredWidth);
					for each (item in array)
						item.getChildAt(0).width = max;
					
					if (_group is IndentGroup)
						(_group as IndentGroup).measuredIndent = max;
				}
				super.validateSize(recursive);
			}

			/**
			 * This controls the alignment of the label component used for indentation.  Not compatible with useFirstChildAsLabel = true.
			 */
			public function set labelAlign(value:String):void
			{
				labelContainer.setStyle("horizontalAlign", value);
			}
			
			/**
			 * Set this to ungroup the Indent component and specify an explicit indentation.
			 */
    		[Bindable] public function get indent():int
			{
				return IUIComponent(numChildren > 0 ? getChildAt(0) : labelContainer).width;
			}
    		public function set indent(value:int):void
			{
				group = null; // remove from group
				IUIComponent(numChildren > 0 ? getChildAt(0) : labelContainer).width = value;
			}
			
			/**
			 * This is the label that will appear to the left of the other children of the Indent component.
			 */
			[Bindable] override public function get label():String
			{
				return labelComponent.text;
			}
    		override public function set label(value:String):void
			{
				_untranslatedLabel = value;
				super.label = labelComponent.text = _translate ? lang(value) : value;
			}
			
			/**
			 * Set this to true to automatically call lang() on the label property.
			 */
			public function get translate():Boolean
			{
				return _translate;
			}
			public function set translate(value:Boolean):void
			{
				if (_translate != value)
				{
					_translate = value;
					label = _untranslatedLabel;
				}
			}
    	]]>
    </mx:Script>
</mx:HBox>
