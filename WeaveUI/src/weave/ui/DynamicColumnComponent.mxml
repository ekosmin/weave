<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author abaumann
@author skolman
@author adufilie
-->
<Indent xmlns:mx="http://www.adobe.com/2006/mxml" 
		xmlns="weave.ui.*"
		implements="weave.api.core.ILinkableObject"
		height="30" creationPolicy="all"
		verticalAlign="middle"
		translate="true"
		>
	<mx:HBox horizontalGap="4" width="100%">
		<mx:Button width="24" icon="@Embed(source='/weave/resources/images/alpha_11x11.png')"
			       toolTip="{lang('Select an attribute column')}"
				   click="openAttributeSelector()"/>
		<mx:List id="internalList"
				 rollOut="if (!event.buttonDown) internalList.selectedItem = null"
				 variableRowHeight="false"
				 doubleClickEnabled="true"
				 doubleClick="openAttributeSelector()"
			 	 width="100%" rowCount="1" height="24"/>
		<mx:Label id="listOverlay"
				  width="{internalList.width}"
				  mouseChildren="false" alpha="0.5" paddingLeft="3" paddingTop="3"
				  text="{lang('Double-click to select, or drag &amp; drop here')}"
				  addedToStage="listOverlay.x = listOverlay.y = 0;"
				  creationComplete="internalList.addChild(listOverlay);"
				  visible="{isEmpty(internalList.dataProvider)}"/>
		<mx:Button width="24" icon="@Embed(source='/weave/resources/images/x-inset.png')"
			       toolTip="{lang('Clear this attribute column')}"
				   click="clearAttribute()"/>
		<CenteredImage id="linkImage" buttonMode="true" height="24" visible="{showLinkControl}" includeInLayout="{showLinkControl}"
					 mouseDown="toggleLinkDropDown(!linkDropDown.parent);"/>
	</mx:HBox>
	
	<mx:TitleWindow id="linkDropDown"
					title="Linking controls for {label}"
					showCloseButton="true"
					verticalGap="{linkControlsPadding}"
					borderThicknessTop="{linkControlsPadding}" borderThicknessRight="{linkControlsPadding}"
					borderThicknessLeft="{linkControlsPadding}" borderThicknessBottom="{linkControlsPadding}"
					paddingTop="{0}" paddingRight="{0}"
					paddingLeft="{0}" paddingBottom="{0}"
					backgroundColor="0xCCCCCC" headerHeight="20"
					horizontalAlign="right" borderStyle="outset" backgroundAlpha="1"
					close="toggleLinkDropDown();">
		<mx:HBox horizontalGap="{linkControlsPadding}" verticalAlign="middle">
			<TextInputWithPrompt id="linkName" prompt="{lang('Enter a new group name')}"
								 enter="linkTo(StringUtil.trim(linkName.text));"/>
			<HelpComponent>
				You can link two or more attributes together so that changing one will change the rest.
				Click on the name of an existing linked group or type the name of a new one.
			</HelpComponent>
			<mx:Button label="{lang('Link')}" enabled="{linkName.text ? true : false}" click="linkTo(StringUtil.trim(linkName.text));"/>
			<mx:Button id="unlinkButton" label="{lang('Unlink')}" click="linkTo(null);"/>
		</mx:HBox>
		<mx:List id="linkList" width="100%"
				 change="if (linkDropDown.parent) linkTo(linkList.selectedItem as String);"/>
	</mx:TitleWindow>
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.newLinkableChild;
			import weave.api.ui.ISelectableAttributes;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableWatcher;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.utils.ColumnUtils;
			
			[Bindable] public var showLinkControl:Boolean = true;
			
			[Embed(source='/weave/resources/images/plug-connected.png')]
			private static const icon_connected:Class;
			[Embed(source='/weave/resources/images/plug-disconnected.png')]
			private static const icon_disconnected:Class;
			
			private const linkControlsPadding:int = 2;
			
			private function isEmpty(ac:*):Boolean
			{
				return !ac || !ac.length;
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				linkDropDown.parent.removeChild(linkDropDown);
				
				controller.view = internalList;
				controller.allowMultipleSelection = false;
				controller.labelFunction = ColumnUtils.getColumnListLabel;
			}
			
			private const controller:VariableListController = newLinkableChild(this, VariableListController);
			private const dynamicObjectWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleDynamicObject);
			private const columnWrapperWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, handleColumnWrapper);
			private const toolWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, updateLabel, true);
			
			public function set columnWrapper(columnWrapper:IColumnWrapper):void
			{
				columnWrapperWatcher.target = columnWrapper;
			}
			
			private function handleColumnWrapper():void
			{
				dynamicObject = ColumnUtils.hack_findInternalDynamicColumn(columnWrapperWatcher.target as IColumnWrapper);
			}
			
			public function set dynamicObject(value:ILinkableDynamicObject):void
			{
				controller.dynamicObject = value;
				dynamicObjectWatcher.target = value;
				
				updateLabel();
			}
			
			private var _errorStringFunction:Function = null;
			
			public function set errorStringFunction(value:Function):void
			{
				_errorStringFunction = value;
				handleDynamicObject();
			}
			
			private function updateLabel():void
			{
				toolWatcher.target = AttributeSelectorPanel.getOwnerWithSelectableAttributes(columnWrapperWatcher.target || dynamicObjectWatcher.target, true);
				var tool:ISelectableAttributes = toolWatcher.target as ISelectableAttributes;
				if (!tool)
					return;
				var names:Array = tool.getSelectableAttributeNames();
				var attrs:Array = tool.getSelectableAttributes();
				var index:int = attrs.indexOf(columnWrapperWatcher.target || controller.dynamicObject);
				if (index >= 0)
					label = names[index];
			}
			
			private function openAttributeSelector():void
			{
				AttributeSelectorPanel.open(columnWrapperWatcher.target as ILinkableObject || controller.dynamicObject, label);
			}
			
			private function clearAttribute():void
			{
				var dc:DynamicColumn = ColumnUtils.hack_findInternalDynamicColumn(controller.dynamicObject as DynamicColumn);
				if (dc)
					dc.removeObject();
			}
			
			public function updateError():void
			{
				internalList.errorString = _errorStringFunction is Function ? _errorStringFunction() : '';
			}
			
			private function handleDynamicObject():void
			{
				if (!internalList)
				{
					callLater(handleDynamicObject);
					return;
				}
				updateError();
				toggleLinkDropDown();
			}
			
			private function toggleLinkDropDown(show:Boolean = false):void
			{
				if (!parent)
					return;
				
				var globalName:String = null;
				if (controller.dynamicObject is LinkableDynamicObject)
					globalName = (controller.dynamicObject as LinkableDynamicObject).globalName;
				else
					show = false;
				if (globalName)
				{
					linkImage.source = icon_connected;
					unlinkButton.enabled = true;
					linkImage.toolTip = lang("Linked to {0}", globalName);
				}
				else
				{
					linkImage.source = icon_disconnected;
					unlinkButton.enabled = false;
					linkImage.toolTip = lang("Open linking controls");
				}
				
				if (show)
				{
					if (!linkDropDown.parent)
						PopUpManager.addPopUp(linkDropDown, this);
					var globalBottomRight:Point = linkImage.parent.localToGlobal(new Point(linkImage.x + linkImage.width, linkImage.y + linkImage.height));
					var localPoint:Point = linkDropDown.parent.globalToLocal(globalBottomRight);
					linkDropDown.x = localPoint.x - linkDropDown.width;
					linkDropDown.y = localPoint.y;
					
					linkList.dataProvider = Weave.root.getNames(IAttributeColumn);
					linkList.selectedItem = globalName;
					linkName.text = globalName;
					linkName.setFocus();
				}
				else
				{
					if (linkDropDown.parent)
						PopUpManager.removePopUp(linkDropDown);
				}
			}
			
			private function linkTo(globalName:String):void
			{
				if (controller.dynamicObject is LinkableDynamicObject)
					(controller.dynamicObject as LinkableDynamicObject).globalName = globalName;
				toggleLinkDropDown();
			}
		]]>
	</mx:Script>
</Indent>
