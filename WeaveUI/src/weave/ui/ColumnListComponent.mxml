<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.*"
		 verticalGap="0" creationPolicy="all"
		 width="100%" height="100%"
		 implements="weave.api.core.ILinkableObject, weave.api.ui.ILinkableObjectEditor">
	<mx:HBox width="100%" id="titleHBox" verticalAlign="middle">
		<mx:Button id="selectorButton"
				   width="24"
				   icon="@Embed(source='/weave/resources/images/alpha_11x11.png')"
				   toolTip="{lang('Select attribute columns')}"
				   click="openSelector()"/>
		<mx:Label text="{label}" fontWeight="bold"/>
		<HelpComponent id="help" visible="false" includeInLayout="false"/>
	</mx:HBox>
	<!-- internalList will be added as a child here -->
	<mx:HBox width="100%" verticalAlign="middle">
		<CenteredImage id="reverseButton" buttonMode="true" source="@Embed(source='/weave/resources/images/reverse-order.png')"
						width="22" height="22"
						toolTip="{lang('Reverse the order of the attributes.')}"
						click="controller.hashMap.setNameOrder(controller.hashMap.getNames().reverse());"/>
		<mx:Spacer width="100%"/>
		<mx:Button
			label="{lang('Select all')}"
			click="_internalList.selectedItems = VectorUtils.getArrayFromCollection(_internalList.dataProvider as ICollectionView).reverse()"
			enabled="{_internalList.dataProvider.length > 0}"/>
		<mx:Button
			label="{lang('Remove selected')}"
			click="controller.removeSelectedItems()"
			enabled="{_internalList.selectedIndex >= 0}"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import avmplus.getQualifiedClassName;
			
			import mx.collections.ICollectionView;
			import mx.controls.DataGrid;
			import mx.controls.List;
			import mx.controls.listClasses.ListBase;
			
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.ui.ISelectableAttributes;
			import weave.core.LinkableWatcher;
			import weave.ui.CustomDataGrid.CustomDataGrid;
			import weave.utils.ColumnUtils;
			import weave.utils.VectorUtils;
			
			public function set helpContent(value:*):void
			{
				if (!help)
					initialize();
				help.content = value;
				help.visible = help.includeInLayout = true;
			}
			public function set helpContentHtml(value:*):void
			{
				if (!help)
					initialize();
				help.htmlText = value;
				help.visible = help.includeInLayout = true;
			}
			
			/**
			 * This code will be executed at the time the object is being created.
			 */
			private var _constructor:* = function():void
			{
				// title is set here instead of in the mxml because if it is set through binding,
				// it will overwrite any other value set in mxml components based on this class.
				label = lang('Attributes');
			}();
			
			
			override protected function createChildren():void
			{
				super.createChildren();
				internalList = _internalList || new List();
				controller.labelFunction = getItemLabel;
				getCallbackCollection(controller).addGroupedCallback(this, function():void {
					reverseButton.buttonMode = reverseButton.enabled = (
						controller.view
						&& controller.view.dataProvider is ICollectionView
						&& ICollectionView(controller.view.dataProvider).length > 1
					);
					reverseButton.alpha = reverseButton.enabled ? .8 : 0.25;
				}, true);
			}
			
			private function getItemLabel(item:*):String
			{
				return item is IAttributeColumn
					? ColumnUtils.getColumnListLabel(item)
					: getQualifiedClassName(item).split('::').pop();
			}
			
			[Bindable] private var _internalList:ListBase;
			private var _listHeight:Number = NaN;
			private const _internalListChildIndex:int = 1;
			private const controller:VariableListController = newLinkableChild(this, VariableListController);
			private const ownerWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, updateLabel, true);
			
			private var _overrideOwner:ISelectableAttributes;
			public function set overrideOwner(value:ISelectableAttributes):void
			{
				ownerWatcher.target = _overrideOwner = value;
			}
			
			public function set listHeight(value:Number):void
			{
				_listHeight = value;
				setListHeight();
			}
			private function setListHeight():void
			{
				if (_internalList)
				{
					if (isFinite(_listHeight))
						_internalList.height = _listHeight;
					else
						_internalList.percentHeight = 100;
				}
			}
			
			private var _showVariableNames:*;
			
			public function get showVariableNames():Boolean
			{
				return _showVariableNames is Boolean
					? _showVariableNames
					: controller.view is DataGrid;
			}
			
			public function set showVariableNames(value:Boolean):void
			{
				_showVariableNames = value;
				
				if (!_internalList)
					internalList = value
						? controller.view as DataGrid || new CustomDataGrid()
						: controller.view as List || new List();
			}
			
			public function set internalList(value:ListBase):void
			{
				_internalList = value;
				if (controller.view != _internalList)
				{
					if (controller.view && controller.view.parent == this)
						removeChild(controller.view);
					
					controller.view = _internalList;
					
					_internalList.percentWidth = 100;
					setListHeight();
					_internalList.invalidateDisplayList();
					
					_internalList.doubleClickEnabled = true;
					_internalList.addEventListener(MouseEvent.DOUBLE_CLICK, function(e:Event):void {
						if (selectorButton.visible && selectorButton.stage)
							openSelector();
					});
				}
				
				if (!controller.view.parent && numChildren >= _internalListChildIndex)
					addChildAt(controller.view, _internalListChildIndex);
			}
			
			public function beginEditVariableName(object:ILinkableObject):void
			{
				controller.beginEditVariableName(object);
			}
			
			private function updateLabel():void
			{
				if (!controller.view)
				{
					callLater(updateLabel);
					return;
				}
				var tool:ISelectableAttributes = ownerWatcher.target as ISelectableAttributes;
				if (!tool)
					return;
				var names:Array = tool.getSelectableAttributeNames();
				var attrs:Array = tool.getSelectableAttributes();
				var index:int = attrs.indexOf(controller.hashMap);
				if (index >= 0)
					label = lang(names[index]);
			}
			
			private function openSelector():void
			{
				AttributeSelectorPanel.open(controller.hashMap, label, showVariableNames, _overrideOwner);
			}
			
			public function set hashMap(value:ILinkableHashMap):void
			{
				enabled = !!value;
				controller.hashMap = value;
				ownerWatcher.target = _overrideOwner || AttributeSelectorPanel.getOwnerWithSelectableAttributes(value);
				updateLabel();
			}
			public function get hashMap():ILinkableHashMap
			{
				return controller.hashMap;
			}
			
			public function setTarget(object:ILinkableObject):void { hashMap = object as ILinkableHashMap; }
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
		]]>
	</mx:Script>
</mx:VBox>
