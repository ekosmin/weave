<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:TitleWindow xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				title="{lang('Quick Menu')}"
				width="300" height="300"
				layout="vertical"
				horizontalAlign="center"
				paddingTop="20"
				showCloseButton="true"
				close="close();">
	
	<mx:HBox paddingTop="20" width="100%">
		<mx:Label text="{lang('Type command:')}" fontWeight="bold" />
		<mx:TextInput id="keyword" width="150" change="filter()"/>
	</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.events.MenuEvent;
			import mx.managers.PopUpManager;
			import mx.utils.ObjectUtil;
			
			import weave.compiler.StandardLib;
			import weave.menus.WeaveMenuItem;
			import weave.ui.controlBars.WeaveMenuBar;
			
			private var autosuggest:SubMenu;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				keyword.setFocus();
				keyword.addEventListener(KeyboardEvent.KEY_DOWN,handleUpDown);
				
				autosuggest = new SubMenu(keyword);
				autosuggest.setSubMenuEvents([], []);
				autosuggest.addEventListener(MenuEvent.ITEM_CLICK,close);
			}
			
			private function close(event:Event=null):void
			{
				autosuggest.hide();
				PopUpManager.removePopUp(this);
			}
			
			private function handleUpDown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.DOWN)
				{
					autosuggest.setFocus();
					autosuggest.selectedIndex = 0;
				}
				else if(event.keyCode == Keyboard.ESCAPE)
				{
					close();
				}
			}

			private function getMenuItems():Array
			{
				var menus:Array = WeaveMenuBar.defaultMenus;
				
				var leafItems:Array = [];
				menus.forEach(getLeafItems);
				function getLeafItems(item:WeaveMenuItem, i:int, a:Array):void
				{
					var children:Array = item.children;
					if (children)
						children.forEach(getLeafItems);
					else
						leafItems.push(item);
				}
				return leafItems;
			}
			private function filterMenuItems(item:WeaveMenuItem, i:int, a:Array):Boolean
			{
				return item.label.toLowerCase().search(keyword.text.toLowerCase()) > -1;
			}
			
			private function filter():void
			{
				autosuggest.hide();
				
				var items:Array = getMenuItems().filter(filterMenuItems);
				items.sortOn('label', Array.CASEINSENSITIVE);
				
				autosuggest.dataProvider = items;
				
				autosuggest.showSubMenu();
				keyword.setFocus();
				keyword.setSelection(keyword.text.length,keyword.text.length);
			}
		]]>	
	</mx:Script>
	
</mx:TitleWindow>