<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:TitleWindow
    xmlns="weave.ui.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    showCloseButton="false"
    close="close()"
    creationComplete="handleCreationComplete(event)"
    borderAlpha="0.95"
    borderThickness="2"
	autoLayout="true"
    horizontalScrollPolicy="off" verticalScrollPolicy="off"
	titleStyleName="weave-panel-title-style"
	styleName="weave-panel-style"
	initialize="UIUtils.pad(this, 10);"
	keyDown="if (event.keyCode == Keyboard.ESCAPE) cancel();"
	>
	<Paragraph text="{message}" selectable="true" minWidth="300"/>
	<mx:Canvas id="inputCanvas" width="100%"
			includeInLayout="{autoCompleteChoices == null}"
			visible="{autoCompleteChoices == null}"
			   >
		<mx:TextArea text="{textInput}"
					 id="textBox"
					 change="textInput = textBox.text;"
					 keyDown="handleKeyDown(event)"
					 width="100%"
					 />
	</mx:Canvas>
	<mx:List id="autoComplete"
			 includeInLayout="{autoCompleteChoices != null}"
			 visible="{autoCompleteChoices != null}"
			 width="100%"
			 change="textInput = autoComplete.selectedItem as String"
			 focusOut="/* autoComplete.visible = false; */"
			 dataProvider="{autoCompleteChoices}"
			 />
	<mx:HBox id="alertButtons" width="100%">
		<mx:Spacer width="100%"/>
		<mx:Button label="{lang('Ok')}" click="handleOKClick()" emphasized="true" minWidth="64"
				   enabled="{validateText(textBox.text)}"/>
		<mx:Button label="{lang('Cancel')}" click="cancel()" minWidth="64"/>
	</mx:HBox>
	
    <mx:Metadata>
    	[Event(name="buttonClicked", type="weave.ui.AlertTextBoxEvent")]
    </mx:Metadata>
    <mx:Script>
	<![CDATA[
		import mx.controls.Button;
		import mx.managers.PopUpManager;
		
		import weave.compiler.StandardLib;
		import weave.core.UIUtils;
		
		[Bindable] public var allowEmptyInput:Boolean = false;
		[Bindable] public var autoCompleteChoices:Array = null;
		
		public var inputValidator:Function = null;
		
		private var _textInput:String = null;
		private var _expandButton:ExpandButton;
		private var _ignoreTextChange:Boolean = false;
		private var _lastSelection:Array;
		
		//Message before TextBox
		[Bindable] public var message:String = null;
		
		/**
		 * May be null until children are created.
		 */
		public function getExpandButton():ExpandButton
		{
			return _expandButton;
		}
		
		override protected function createChildren():void
		{
			super.createChildren();
			_expandButton = ExpandButton.makeExpandable(textBox);
		}
		
		//default text in TextBox
		[Bindable]
		public function get textInput():String
		{
			return _textInput;
		}
	    public function set textInput(value:String):void
		{
			if (_ignoreTextChange)
			{
				_ignoreTextChange = false;
				textBox.text = _textInput;
				textBox.setSelection(_lastSelection[0], _lastSelection[1]);
				return;
			}
			
			_textInput = value || '';
			
			if (_textInput.indexOf('\r') >= 0 || _textInput.indexOf('\n') >= 0)
				_expandButton.expanded = true;
		}
	
		private function handleCreationComplete(event:Event):void
		{
			focusManager.setFocus(textBox);
			textBox.setSelection(0, int.MAX_VALUE);
		}
		
		private function close():void
		{
			PopUpManager.removePopUp(this);
		}
		
		private function handleOKClick():void
		{
			var okClickEvent:AlertTextBoxEvent = new AlertTextBoxEvent();
			okClickEvent.textInput = textInput;
			okClickEvent.confirm = true;
			var textclick:Boolean = this.dispatchEvent(okClickEvent);
			close();
		}
		
		public function cancel():void
		{
			var cancelClickEvent:AlertTextBoxEvent = new AlertTextBoxEvent();
			cancelClickEvent.textInput = textInput;
			cancelClickEvent.confirm = false;
			this.dispatchEvent(cancelClickEvent);
			close();
		}
		
		private function validateText(text:String):Boolean
		{
			return (!!text || allowEmptyInput)
				&& (inputValidator == null || inputValidator(text));
		}
		
		private function handleKeyDown(event:KeyboardEvent):void
		{
			if (event.keyCode == Keyboard.ENTER && !_expandButton.expanded)
			{
				if (validateText(textBox.text))
					handleOKClick();
				_textInput = textBox.text;
				_ignoreTextChange = true;
				_lastSelection = [textBox.selectionBeginIndex, textBox.selectionEndIndex];
			}
			else if (autoCompleteChoices)
			{
				textBox.validateProperties();
				var text:String = textBox.text;
				if (!text)
				{
					/* autoComplete.visible = false; */
					return;
				}
				var found:int = 0;
				for (var i:int = 0; i < autoCompleteChoices.length; i++)
				{
					var str:String = autoCompleteChoices[i] as String;
					if (str.search("^" + text) >= 0)
					{
						found++;
						if (found == 1)
						{
							autoComplete.selectedItem = str;
							autoComplete.scrollToIndex(i);
							textBox.text = str;
							textBox.selectionBeginIndex = text.length;
							textBox.selectionEndIndex = int.MAX_VALUE;
						}
						else
						{
							var p:Point = textBox.localToGlobal(new Point(0, textBox.height));
							p = autoComplete.globalToLocal(p);
							autoComplete.x = p.x;
							autoComplete.y = p.y;
							autoComplete.width = textBox.width;
							//TODO: mouse down event that closes the list
							/* autoComplete.visible = true; */
						}
					}
				}
				if (found <= 1)
				{
					/* autoComplete.visible = false; */
				}
			}
		}
		
		override public function move(x:Number, y:Number):void
		{
			x = StandardLib.constrain(x, 0, parent.width - this.width);
			y = StandardLib.constrain(y, 0, parent.height - this.height);
			
			super.move(x, y);
		}
		
		public static var lastInstance:Object;
		public static function show(title:String, message:String, defaultInput:String = "", inputValidator:Function = null, inputHandler:Function = null):AlertTextBox
		{
			var newAlert:AlertTextBox = new AlertTextBox();
			newAlert.title = title;
			newAlert.message = message;
			newAlert.textInput = defaultInput;
			newAlert.inputValidator = inputValidator;
			
			PopUpManager.addPopUp(newAlert, WeaveAPI.topLevelApplication as DisplayObject, true);
			PopUpManager.centerPopUp(newAlert);
			
			// disable moving of the popup
			//newAlert.isPopUp = false;
			
			lastInstance = newAlert;
			
			if (inputHandler != null)
				newAlert.addEventListener(AlertTextBoxEvent.BUTTON_CLICKED, function(event:AlertTextBoxEvent):void {
					if (event.confirm)
						inputHandler(newAlert.textInput);
				});
			
			
			return newAlert;
		}
	]]>
	</mx:Script>
</mx:TitleWindow> 
