<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:TextArea xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml"
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
	editable="false"
	borderStyle="none"
	width="100%"
	wordWrap="true"
	backgroundAlpha="0"
	selectable="false"
	focusEnabled="false"
	resize="invalidateSize()"
    >
	<mx:Metadata>
		[DefaultProperty("content")]
	</mx:Metadata>
    <mx:Script>
        <![CDATA[
			import mx.core.EdgeMetrics;
			import mx.utils.StringUtil;
			
			import weave.compiler.StandardLib;
			
			private var _untranslated:String = '';
			private var _trim:Boolean = true;
			private var _translate:Boolean = false;
			
			/**
			 * Setting this to true will remove all tab characters and replace new lines with spaces.
			 */
			public function set trim(value:Boolean):void
			{
				if (_trim != value)
				{
					_trim = value;
					text = _untranslated;
				}
			}
			
			/**
			 * Setting this to true will automatically call lang() whenever the text is set.
			 */
			public function set translate(value:Boolean):void
			{
				if (_translate != value)
				{
					_translate = value;
					text = _untranslated;
				}
			}
			
			public function set content(value:*):void
			{
				text = value as String;
			}
			
			[Bindable("textChanged")]
			[CollapseWhiteSpace]
			[Inspectable(category="General", defaultValue="")]
			[NonCommittingChangeEvent("change")]
			override public function get text():String
			{
				return super.text;
			}
			
			override public function set text(value:String):void
			{
				value = value || ''; // not null
				_untranslated = value;
				if (_trim)
				{
					function trimItem(str:*, ..._):* { return StringUtil.trim(str) || '\n'; }
					value = value.split('\n').map(trimItem).join(' ');
					value = StringUtil.trim(StandardLib.replace(value, ' \n ', '\n\n'));
				}
				if (_translate)
					value = lang(value);
				super.text = value;
				invalidateSize();
			}
			
			override public function set height(value:Number):void
			{
				if (super.height != value)
				{
					super.height = value;
					callLater(styleChanged, ["borderStyle"]);
				}
			}
			
			override public function set width(value:Number):void
			{
				if (super.width != value)
				{
					super.width = value;
					callLater(styleChanged, ["borderStyle"]);
				}
			}
			
			override public function validateSize(recursive:Boolean=false):void
			{
				//-----------------------------------------
				// update textField properties (from super.updateDisplayList)
				var vm:EdgeMetrics = viewMetrics;
				
				vm.left += getStyle("paddingLeft");
				vm.top += getStyle("paddingTop");
				vm.right += getStyle("paddingRight");
				vm.bottom += getStyle("paddingBottom");
				
				textField.move(vm.left, vm.top);
				
				var w:Number = unscaledWidth - vm.left - vm.right;
				var h:Number = unscaledHeight - vm.top - vm.bottom;
				
				// If there's a border, add another line of pixels to the textField
				// that go under the border but allow for descenders on some fonts.
				if (vm.top + vm.bottom > 0)
					h++;
				
				// maxScrollV doesnt get proper value if width < 4
				textField.setActualSize(Math.max(4, w), Math.max(4, h));
				
				var p:Number = Math.min(textField.maxScrollH, horizontalScrollPosition || 0);
				if (p != textField.scrollH)
					horizontalScrollPosition = p;
				p = Math.min(textField.maxScrollV - 1, verticalScrollPosition || 0);
				if (p != textField.scrollV - 1)
					verticalScrollPosition = p;
				
				//-----------------------------------------
				
				
				// update width,height based on textField width,height
				var text:String = textField.text;
				textField.height = 0;
				textField.autoSize = 'center';
				if (wordWrap)
				{
					textField.width;
				}
				else
				{
					width = Math.round(textField.width);
				}
				if (width)
					height = Math.round(textField.height);

				super.validateSize(recursive);
			}
			
			override public function get verticalScrollPosition():Number
			{
				if (super.verticalScrollPosition != 0)
					super.verticalScrollPosition = 0;
				return 0;
			}
			override public function set verticalScrollPosition(value:Number):void
			{
				super.verticalScrollPosition = 0;
			}
        ]]>
    </mx:Script>
</mx:TextArea>
