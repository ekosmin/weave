<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
		   width="270" height="315" creationPolicy="all"
		   backgroundAlpha="0" backgroundColor="#CCCCCC"
		   showEffect="{fadeIn}" hideEffect="{fadeOut}" xmlns:ui="weave.ui.*">
	
	<mx:Fade id="fadeIn" duration="500" alphaFrom="0" alphaTo="1" />
	<mx:Fade id="fadeOut" duration="500" alphaFrom="1" alphaTo="0" />
	
	<mx:VBox width="100%" height="100%" verticalGap="0" horizontalGap="0">
		<mx:Canvas id="SettingsWindow" width="270" height="300"
				   borderColor="#54585E" borderThickness="3" borderStyle="solid"
				   backgroundAlpha="1" backgroundColor="#CCCCCC">
			<ui:CustomTabNavigator id="nav" width="100%" height="100%" change="onTabChange(event)"
							 backgroundAlpha="0" backgroundColor="#DDDDDD">
				<mx:VBox width="100%" height="100%" label="{lang('Connection')}"
						 paddingBottom="{padding}" paddingLeft="{padding}"
						 paddingRight="{padding}" paddingTop="{padding}">
					<mx:HBox width="100%">
						<mx:Label text="{lang('Username:')}" width="{labelWidth}" />
						<mx:TextInput id="nickname" width="{textAreaWidth}" change="trimInput(event);"/>	
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label text="{lang('User Color:')}" width="{labelWidth}" />
						<mx:ColorPicker id="picker" selectedColor="{generateRandomColor()}" />
					</mx:HBox>
					<mx:Spacer height="10" />
					<ui:Center>
						<mx:Label text="{warningMsg}" visible="{warningVisible}" color="#FF0000" fontWeight="bold" />
					</ui:Center>
					<mx:Spacer height="100%" />
					<ui:Center>
						<mx:Button id="saveConnectionButton" label="{lang('Save')}" click="saveSettings(event)" />
					</ui:Center>
				</mx:VBox>
				<mx:VBox width="100%" height="100%" label="{lang('Add-ons')}" enabled="false"
						 paddingBottom="{padding}" paddingLeft="{padding}"
						 paddingRight="{padding}" paddingTop="{padding}">
					<mx:HBox width="100%">
						<mx:Label text="{lang('Microphone:')}" width="{labelWidth}" />
						<mx:ComboBox id="micList" width="{textAreaWidth}" change="startMicActivityMonitor()" />
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Spacer width="{labelWidth}" />
						<mx:Canvas width="{textAreaWidth}" height="16"
								   borderColor="#54585E" borderThickness="2" borderStyle="solid">
							<mx:Canvas id="micActivity" height="16" backgroundColor="#0000FF" />
						</mx:Canvas>
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Label text="{lang('Camera:')}" width="{labelWidth}" />
						<mx:ComboBox id="camList" width="{textAreaWidth}" change="startCamActivityMonitor()" />
					</mx:HBox>
					<mx:HBox width="100%">
						<mx:Spacer width="{labelWidth}" />
						<mx:Canvas width="{textAreaWidth}" height="{textAreaWidth*3/4}"
								   borderColor="#54585E" borderThickness="3" borderStyle="solid">
							<mx:UIComponent id="camActivity" width="100%" height="100%" />
						</mx:Canvas>
					</mx:HBox>
					<mx:Spacer height="100%" />
					<ui:Center>
						<mx:Button id="saveAddonsButton" label="{lang('Save')}" click="saveAddons(event)" />
					</ui:Center>
				</mx:VBox>
			</ui:CustomTabNavigator>
		</mx:Canvas>
		<ui:Center>
			<mx:Canvas id="anchor" width="{2*anchorSize}" height="{anchorSize}" creationComplete="generateAnchor()" />
		</ui:Center>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.IndexChangedEvent;
			import mx.utils.ObjectUtil;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.services.collaboration.CollaborationEvent;
			
			private const labelWidth:Number = 80;
			private const textAreaWidth:Number = 150;
			private const padding:Number = 10;
			private const anchorSize:Number = 15;

			private var testMic:Microphone;
			private var micTimer:Timer;
			private var testVid:Video;
			private var testCam:Camera;
			
			public var collab_NICKNAME:String;
			public var collab_COLOR:uint;
			
			public var collab_MIC:Microphone = null;
			public var collab_CAMERA:Camera = null;
			
			[Bindable] public var warningMsg:String = "";
			[Bindable] public var warningVisible:Boolean = false;
			
			private function saveSettings(event:MouseEvent):void
			{
				if( nickname.text == "" )
				{
					Alert.show(lang("Please enter a username."),lang("Error"));
					return;
				}
				if( Weave.properties.collabServerIP.value == "" || 
					Weave.properties.collabServerName.value == "" || 
					Weave.properties.collabServerRoom.value == "" || 
					Weave.properties.collabServerPort.value ==  "" )
				{
					Alert.show(lang("There is an error with the server properties."), lang("Error"));
				}
				collab_NICKNAME 	= nickname.text;
				collab_COLOR 		= picker.selectedColor;
				
				dispatchEvent(new Event(CollaborationEvent.CONN_SETTINGS_SAVED));
				
				// Slow down the fadeout to read
				saveConnectionButton.label = lang("Settings Saved");
				fadeOut.duration = 1500;
				hide();
			}
			private function saveAddons(event:MouseEvent):void
			{
				collab_MIC = Microphone.getMicrophone(micList.selectedIndex);
				collab_CAMERA = Camera.getCamera(camList.selectedIndex as String);
				
				dispatchEvent(new Event(CollaborationEvent.ADDON_SETTINGS_SAVED));
				
				saveSettings(event);
			}
			public function show():void
			{
				this.visible = true;
				saveConnectionButton.label = lang("Save");
				saveAddonsButton.label = lang("Save");
				fadeOut.duration = 500;
				
				if( nav.selectedIndex == 1 ) {
					startMicActivityMonitor();
					startCamActivityMonitor();
				}
			}
			public function hide():void
			{
				this.visible = false;
				if( micTimer ) stopMicActivityMonitor();
				if( testVid )  stopCamActivityMonitor();
				resetWarning();
			}
			private function trimInput(event:Event):void
			{
				event.target.text = StringUtil.trim(event.target.text); // hack
			}
			private function startMicActivityMonitor():void
			{
				if( micTimer ) stopMicActivityMonitor();
				
				testMic = Microphone.getMicrophone(micList.selectedIndex);
				if( !testMic ) return;
				
				testMic.setLoopBack(true);
				testMic.setUseEchoSuppression(true);
				
				micTimer = new Timer(300);
				micTimer.addEventListener(TimerEvent.TIMER, updateWidth);
				micTimer.start();
			}
			private function stopMicActivityMonitor():void
			{
				testMic.setLoopBack(false);
				testMic.setUseEchoSuppression(false);

				micTimer.stop();
				micTimer.removeEventListener(TimerEvent.TIMER, updateWidth);
			}
			private function updateWidth(e:TimerEvent):void
			{
				var width:Number = ( textAreaWidth / 100 ) * testMic.activityLevel;
				if( width >= 0 ) micActivity.width = width;
				else micActivity.width = 0;
			}
			private function startCamActivityMonitor():void
			{
				if( testVid && camActivity.contains(testVid) ) stopCamActivityMonitor();
				
				testCam = Camera.getCamera(camList.selectedIndex as String);
				if( !testCam ) return;
				
				testVid = new Video(camActivity.width, camActivity.height);
				testVid.attachCamera(testCam);
				camActivity.addChild(testVid);
			}
			private function stopCamActivityMonitor():void
			{
				if( testVid != null )
				{
					testVid.attachCamera(null);
					testVid.clear();
					camActivity.removeChild(testVid);
					testVid = null;
				}
			}
			public function showConnectionWarning(msg:String):void
			{
				nav.selectedIndex = 0;
				warningMsg = msg;
				warningVisible = true;
			}
			private function resetWarning():void
			{
				warningMsg = "";
				warningVisible = false;
			}
			private function generateAnchor():void
			{
				anchor.graphics.beginFill(uint("0x54585E"), 1);
				anchor.graphics.moveTo(0, 0);
				anchor.graphics.lineTo(anchor.width/2, anchor.height);
				anchor.graphics.lineTo(anchor.width, 0);
				anchor.graphics.lineTo(0, 0);
			}
			private function generateRandomColor():uint
			{
				var col:uint = Math.random() * uint.MAX_VALUE; 
				return col;
			}
			private function onTabChange(event:IndexChangedEvent):void
			{
				if( event.newIndex == 1 ) {		// If the tab is set to Add-ons
					if( Microphone.names.length == 0 && Camera.names.length == 0 )
						saveAddonsButton.enabled = false;
					else
						saveAddonsButton.enabled = true;
					if( Microphone.names.length == 0 ) {
						micActivity.enabled = false;
						micList.enabled = false;
					} else {
						micActivity.enabled = true;
						micList.enabled = true;
						startMicActivityMonitor();
						micList.dataProvider = Microphone.names;
					}
					if( Camera.names.length == 0 ) {
						camActivity.enabled = false;
						camList.enabled = false;
					} else {
						camActivity.enabled = true;
						camList.enabled = true;
						startCamActivityMonitor();
						camList.dataProvider = Camera.names;
					}
					resetWarning();
				} else {
					if( Microphone.names.length > 0 )
						stopMicActivityMonitor();
					if( Camera.names.length > 0 )
						stopCamActivityMonitor();
				}
			}
			
		]]>
	</mx:Script>
</mx:Canvas>
