<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*"
				   xmlns:userControls="weave.ui.userControls.*"
				   title="{lang('Collaboration')}"
				   creationPolicy="all" layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			
			import weave.Weave;
			import weave.api.linkBindableProperty;
			import weave.api.registerDisposableChild;
			import weave.services.collaboration.CollaborationEvent;
			import weave.services.collaboration.CollaborationService;
			
			public static function get instance():CollaborationTool
			{
				return _instance;
			}
			private static var _instance:CollaborationTool;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				if (!_instance)
					_instance = this;
				else
					throw new Error(lang("CollaborationTool should only have one instance"));
			}
			
			public const collabService:CollaborationService = registerDisposableChild(this, new CollaborationService(Weave.root));
			
			private const labelWidth:Number = 80;
			private const textAreaWidth:Number = 200;
			private var cursorList:ArrayCollection = new ArrayCollection();
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				collabService.addEventListener(CollaborationEvent.LOG, handleLogEvent);
				collabService.addEventListener(CollaborationEvent.DISCONNECT, handleDisconnect);
				collabService.addEventListener(CollaborationEvent.CONNECT, handleConnect);
				collabService.addEventListener(CollaborationEvent.NICK_ERROR, nickConflictError);
				collabService.addEventListener(CollaborationEvent.LOCKED_ERROR, lockedError);
				collabService.addEventListener(CollaborationEvent.USER_JOINED_ROOM, handleCreateUserMouse);
				
				linkBindableProperty(Weave.properties.collabServerIP, serverIP, 'text');
				linkBindableProperty(Weave.properties.collabServerName, serverName, 'text');
				linkBindableProperty(Weave.properties.collabServerPort, port, 'text');
				linkBindableProperty(Weave.properties.collabServerRoom, roomToJoin, 'text');
				
				updateEnabledSettings();
				serverSettings.addEventListener(KeyboardEvent.KEY_DOWN, handleSettingsKeyDown, true);
				serverSettings.addEventListener(Event.CHANGE, handleChange);
			}
			
			private function handleChange(e:Event):void
			{
				updateEnabledSettings();
			}
			
			private function sendToRoomButton():void
			{
				if( input.text == "" )
					return;
				if( collabService.isConnected )
					collabService.sendTextMessage( input.text );
				input.text = "";	//clear the input
			}
			
			private function connect():void
			{
				if( username.text == "" || serverIP.text == "" || serverName.text == "" || roomToJoin.text == "" || port.text ==  "" )
				{
					Alert.show( lang("Can't leave any field blank") );
				}
				else
				{
					collabService.connect(serverIP.text, serverName.text, int(port.text), roomToJoin.text, username.text);
					updateEnabledSettings();
					tabs.selectedChild = chat;
				}
			}
			
			private function updateEnabledSettings():void
			{
				var connected:Boolean = collabService.isConnected;
				
				serverSettings.enabled = !connected;
				connectButton.enabled = !connected && username.text && serverIP.text && serverName.text && roomToJoin.text && port.text;
				disconnectButton.enabled = connected;
				input.enabled = connected;
				sendButton.enabled = connected;
				
				tabs.selectedChild = connected ? chat : settings;
			}
			
			private function lockedError(e:Event):void
			{
				updateEnabledSettings();
				Alert.show(lang("Server cannot be reached."), lang("Connect error"));
			}
			private function nickConflictError(e:Event):void
			{
				updateEnabledSettings();
				Alert.show(lang("Username already in use.  Please choose another."), lang("Connect error"));
			}
			
			//For when a text message is recieved from the server, it is displayed to the log
			//NOTE: I could not get proper scrolling to work once the recieved text messages
			//		went below the height of the log window. 
			private function handleLogEvent(e:CollaborationEvent):void
			{
				log.text += e.getText() + '\n';
				callLater(
					function():void {
						log.verticalScrollPosition = log.maxVerticalScrollPosition;
					}
				);
			}
			
			//If the collabService is disconnected for some reason, this ensures the collabUI
			//resets which buttons are disabled and enabled.
			private function handleDisconnect( e:CollaborationEvent):void
			{
				updateEnabledSettings();
			}
			private function handleConnect( e:CollaborationEvent):void
			{
				updateEnabledSettings();
			}
			private function handleCreateUserMouse(e:CollaborationEvent):void
			{
				//cursorList.addItem(CollabMouseCursor.addPopUp(WeaveAPI.topLevelApplication as DisplayObject));
			}
			
			private function handleSettingsKeyDown(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.SPACE)
					event.stopImmediatePropagation();
				callLater(updateEnabledSettings);
			}
			
			private static const REQUIRED:String = lang("Required");
		]]>
	</mx:Script>

	<ui:CustomTabNavigator width="100%" height="100%" id="tabs">
		<mx:VBox label="Chat" width="100%" height="100%"
				 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"
				 id="chat">
			<mx:HDividedBox width="100%" height="100%" enabled="{disconnectButton.enabled}">
				<mx:TextArea id="log" width="80%" height="100%" editable="false"/>
				<mx:List id="users" height="100%" width="20%" minWidth="100" editable="false" dataProvider="{collabService.userList}" />
			</mx:HDividedBox>
			<mx:HBox width="100%" enabled="{disconnectButton.enabled}">
				<mx:TextInput id="input" width="100%" enabled="false" enter="sendToRoomButton()"/>
				<mx:Button id="sendButton" label="{lang('Send')}" enabled="false" click="sendToRoomButton();"/>
			</mx:HBox>
		</mx:VBox>
	
		<mx:VBox label="{lang('Settings')}" width="100%" height="100%"
				 paddingBottom="10" paddingLeft="10" paddingRight="10" paddingTop="10"
				 id="settings" verticalScrollPolicy="auto" minHeight="0">
			<mx:VBox id="serverSettings">
				<ui:Indent label="{lang('IP:')}">
					<mx:TextInput id="serverIP" width="{textAreaWidth}" errorString="{serverIP.text?'':REQUIRED}"/>
				</ui:Indent>
				<ui:Indent label="{lang('ServerName:')}">
					<mx:TextInput id="serverName" width="{textAreaWidth}" errorString="{serverName.text?'':REQUIRED}"/>
				</ui:Indent>
				<ui:Indent label="{lang('Port:')}">
					<mx:TextInput id="port" width="{textAreaWidth}" errorString="{port.text?'':REQUIRED}"/>
				</ui:Indent>
				<ui:Indent label="{lang('Room Name:')}">
					<mx:TextInput id="roomToJoin" width="{textAreaWidth}" errorString="{roomToJoin.text?'':REQUIRED}"/>
				</ui:Indent>
				<ui:Indent label="{lang('Username:')}">
					<mx:TextInput id="username" width="{textAreaWidth}" errorString="{username.text?'':REQUIRED}"/>
				</ui:Indent>
			</mx:VBox>
			<!--<ui:Indent label="{lang('Cursor color:')}">
				<mx:ColorPicker id="picker" color="{Math.round(Math.random() * 0xFFFFFF)}" />
			</ui:Indent>-->
			<mx:HBox width="100%">
				<mx:Button id="connectButton" label="{lang('Connect')}" click="connect();" />
				<mx:Button id="disconnectButton" label="{lang('Disconnect')}" enabled="false" click="collabService.disconnect();"/>
			</mx:HBox>
		</mx:VBox>
	</ui:CustomTabNavigator>
	
</ui:DraggablePanel>
