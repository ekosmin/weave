<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
		 verticalScrollPolicy="off" horizontalScrollPolicy="off"
		 borderColor="#54585E" borderThickness="3" borderStyle="solid"
		 backgroundAlpha="1" backgroundColor="#CCCCCC"
		 showEffect="{moveIn}" hideEffect="{moveOut}" xmlns:collab="weave.ui.collaboration.*" xmlns:ui="weave.ui.*">

	<mx:Move id="moveIn" duration="1000"
			 xFrom="{xFrom}" xTo="{xTo}"
			 yFrom="{yFrom}" yTo="{yTo}"/>
	<mx:Move id="moveOut" duration="1000"
			 xFrom="{xTo}" xTo="{xFrom}"
			 yFrom="{yTo}" yTo="{yFrom}"/>
	
	<mx:Fade id="fadeIn" duration="500" alphaFrom="0" alphaTo="1" />
	<mx:Fade id="fadeOut" duration="500" alphaFrom="1" alphaTo="0" />
	
	<mx:VBox width="100%" height="100%"
			 paddingBottom="{padding}" paddingLeft="{padding}"
			 paddingRight="{padding}" paddingTop="{padding}">
		<mx:VBox id="containerGlobal" width="100%" height="100%">
			<mx:VBox id="containerAddons" width="100%" height="0" horizontalScrollPolicy="off">
				<mx:Canvas width="100%" height="100%" clipContent="true"
						   horizontalScrollPolicy="off" verticalScrollPolicy="off">
					<mx:Canvas id="containerRemoteCams" width="100%" height="100%" autoLayout="false" />
					<mx:HBox verticalAlign="bottom" horizontalAlign="right" bottom="0" right="0">
						<mx:UIComponent id="containerLocalCam" width="80" height="60" />
					</mx:HBox>
				</mx:Canvas>
				<mx:HBox id="addonControls" width="100%" horizontalAlign="center" horizontalScrollPolicy="off">
					<mx:Button id="button_mic" width="28" height="22" toggle="true" 
							   enabled="{addOnsSaved}" click="toggleMic(event)"/>
					<mx:Button id="button_cam" width="28" height="22" toggle="true" 
							   enabled="{addOnsSaved}" click="toggleCam(event)"/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox id="containerChat" width="100%" height="100%">
				<mx:TextArea id="rtmpErrorLabel" borderThickness="0" backgroundAlpha="0" editable="false"
							 wordWrap="true" color="#FF0000" fontWeight="bold" width="100%" height="20"
							 showEffect="{fadeIn}" hideEffect="{fadeOut}" visible="false" includeInLayout="false" />
				<mx:HDividedBox width="100%" height="100%" horizontalScrollPolicy="off">
					<mx:TextArea id="log" width="100%" height="100%" editable="false" />
					<mx:List id="userList" width="0%" height="100%" labelField="name" minWidth="130">
						<mx:itemRenderer>
							<mx:Component>
								<mx:HBox width="100%" height="100%" horizontalScrollPolicy="off" paddingRight="4">
									<mx:Script>
										<![CDATA[
											import mx.controls.ToolTip;
											
											override public function set data(value:Object):void
											{
												if( outerDocument._userListInfo[value] != null )
												{
													color.setStyle("backgroundColor", 	outerDocument._userListInfo[value].color );
													micPic.visible 			= outerDocument._userListInfo[value].mic;
													micPic.includeInLayout 	= outerDocument._userListInfo[value].mic;
													camPic.visible			= outerDocument._userListInfo[value].cam;
													camPic.includeInLayout	= outerDocument._userListInfo[value].cam;
													specPic.visible			= outerDocument._userListInfo[value].spec;
													specPic.includeInLayout = outerDocument._userListInfo[value].spec;
													collabPing.ping			= outerDocument._userListInfo[value].ping;
												}
												labelName.text = value as String;
												if( (value as String) == outerDocument.nickname )
													labelName.setStyle("fontWeight", "bold");
												else
													labelName.setStyle("fontWeight", "normal");
											}
											
										]]>
									</mx:Script>
									<mx:Canvas id="color" width="16" height="16" borderStyle="solid" 
											   cornerRadius="8" borderThickness="2"
											   borderColor="0"/>
									<mx:Canvas width="100%" clipContent="true" horizontalScrollPolicy="off">
										<mx:Label id="labelName" fontSize="12" width="100%" toolTip="{labelName.text}" />
									</mx:Canvas>
									<mx:Image id="micPic" source="@Embed(source='/weave/resources/images/collab/mic.png')" width="15" height="15" />
									<mx:Image id="camPic" source="@Embed(source='/weave/resources/images/collab/cam.png')" width="15" height="15" />
									<mx:Image id="specPic" source="@Embed(source='/weave/resources/images/collab/eye.png')" width="22" height="12" />
									<collab:CollaborationPing id="collabPing" width="16" height="14" />
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:List>
				</mx:HDividedBox>
				<mx:HBox width="100%">
					<mx:TextInput id="input" width="100%" enter="dispatchMessageEvent()" />
					<mx:Button id="button_send" label="{lang('Send')}" click="dispatchMessageEvent()" />
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.utils.ObjectUtil;
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.Sort;
			import mx.utils.StringUtil;
			
			import weave.services.collaboration.CollaborationEvent;
			
			public const TYPE_MIC:String						= "MIC";
			public const TYPE_CAM:String						= "CAM";
			public const TYPE_SPEC:String						= "SPEC";
			public const TYPE_PING:String						= "PING";
			public const TYPE_COLOR:String						= "COLOR";
			
			[Bindable] public var xFrom:Number 					= 0;
			[Bindable] public var xTo:Number 					= 0;
			[Bindable] public var yFrom:Number 					= 0;
			[Bindable] public var yTo:Number 					= 0;
			[Bindable] public var unreadMessages:Number 		= 0;
			[Bindable] internal var _userListInfo:Dictionary	= new Dictionary();
			
			[Bindable] public var addOnsSaved:Boolean 			= false;
			[Bindable] public var connectedToRTMPService:Boolean= false;
			[Bindable] public var rtmpService:NetConnection		= null;
			[Bindable] public var ping:Number 					= 0;
			
			internal var nickname:String 						= null;
			internal var roomName:String						= null;
			
			private const padding:Number 						= 10;
			private var enabledMic:Boolean 						= false;
			private var enabledCam:Boolean 						= false;
			private var localVideo:Video   						= null;
			private var nsPublishMic:NetStream 					= null;
			private var nsPublishCam:NetStream 					= null;
			private var nsPlayMicList:Dictionary  				= new Dictionary();
			private var nsPlayCamList:Dictionary				= new Dictionary();

			public var cam:Camera;
			public var mic:Microphone;
			
			[Embed(source="/weave/resources/images/collab/mic.png")]     internal const iconMic:Class;
			[Embed(source="/weave/resources/images/collab/cam.png")]     internal const iconCam:Class;
			[Embed(source="/weave/resources/images/collab/speaker.png")] internal const iconSpeaker:Class;
			[Embed(source="/weave/resources/images/collab/eye.png")]     internal const iconEye:Class;

			override protected function childrenCreated():void
			{
				super.childrenCreated();
//				button_mic.setStyle("icon", iconMic);
//				button_cam.setStyle("icon", iconCam);
			}
			public function logText(txt:String):void
			{
				var from:String = txt.substr(0, txt.indexOf(":"));
				if( from && from == nickname )
					log.htmlText += "<font color='#FF0000'>"+txt+"<br>";
				else
					log.htmlText += "<font color='#0000FF'>"+txt +"<br>";
				
				callLater(
					function():void {
						log.verticalScrollPosition = log.maxVerticalScrollPosition;
					}
				);
				if( !visible ) unreadMessages++;
			}
			private function dispatchMessageEvent():void
			{
				dispatchEvent(new CollaborationEvent(CollaborationEvent.SEND_MESSAGE, input.text));
				input.text = "";
			}
			public function set userNameList(array:ArrayCollection):void
			{
				userList.dataProvider = array;
			}
			private function toggleMic(e:MouseEvent):void
			{
				enabledMic = !enabledMic;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_MIC, ( enabledMic ) ? "1" : "0"));
				
				if( rtmpService )
				{
					if( enabledMic )
					{
						nsPublishMic = new NetStream(rtmpService);
						nsPublishMic.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						mic.setUseEchoSuppression(true);
						mic.setSilenceLevel(20);
						nsPublishMic.attachAudio(mic);
						nsPublishMic.publish("m-"+roomName+"-"+nickname, "live");
					}
					else
					{
						nsPublishMic.attachAudio(null);
						nsPublishMic.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishMic.close();
						nsPublishMic = null;
					}
				}
			}
			private function toggleCam(e:MouseEvent):void
			{
				enabledCam = !enabledCam;
				dispatchEvent(new CollaborationEvent(CollaborationEvent.UPDATE_CAM, ( enabledCam ) ? "1" : "0"));
				
				if( rtmpService )
				{
					if( enabledCam )
					{
						localVideo = new Video(containerLocalCam.width, containerLocalCam.height);
						cam.setQuality(0, 90);
						localVideo.attachCamera(cam);
						containerLocalCam.addChild(localVideo);
						
						nsPublishCam = new NetStream(rtmpService);
						nsPublishCam.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishCam.attachCamera(cam);
						nsPublishCam.publish("v-"+roomName+"-"+nickname, "live");
						
						if( dictionaryLength(nsPlayCamList) == 0 )
							showLocalDisplay();
					}
					else
					{
						localVideo.attachCamera(null);
						localVideo.clear();
						containerLocalCam.removeChild(localVideo);
						localVideo = null;
						
						nsPublishCam.attachCamera(null);
						nsPublishCam.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						nsPublishCam.close();
						nsPublishCam = null;
						
						if( dictionaryLength(nsPlayCamList) == 0 )
							hideLocalDisplay();
					}
				}
			}
			private function netStatusEventHandler(e:NetStatusEvent):void
			{
				switch( e.info.code )
				{
					case "NetStream.Publish.BadName":
						showRTMPWarning(lang("Error publishing stream: Bad Name"), 10000);
						break;
					default:
						trace("Unhandled netstatus event: "+e.info.code);
						break;
				}
			}
			public function showAddonControls():void
			{
				containerAddons.height = addonControls.height + 6;
			}
			public function showLocalDisplay():void
			{
				containerAddons.height = addonControls.height + 66;
			}
			public function showRemoteDisplay():void
			{
				containerAddons.height = addonControls.height + 146;
			}
			public function hideAddonControls():void	{ containerAddons.height = 0; }
			public function hideRemoteDisplay():void 	{ showAddonControls(); }
			public function hideLocalDisplay():void 	{ showAddonControls(); }
			
			public function showRTMPWarning(msg:String = null, fadeout:Number = -1):void
			{
				if( msg )
				{
					rtmpErrorLabel.text = msg;
					rtmpErrorLabel.visible = true;
					rtmpErrorLabel.includeInLayout = true;
				}
				else
				{
					rtmpErrorLabel.text = "";
					rtmpErrorLabel.visible = false;
					rtmpErrorLabel.includeInLayout = false;
				}
				if( fadeout > 0 )
				{
					var t:Timer = new Timer(fadeout);
					t.addEventListener(TimerEvent.TIMER,
						function():void
						{
							t.stop();
							showRTMPWarning();
						}
					);
					t.start();
				}
			}
			public function setUserAttribute(type:String, name:String, val:Number):void
			{
				var o:Object = null;
				
				if( _userListInfo[name] == null )
				{
					o = new Object();
					_userListInfo[name] = o;
				}
				switch( type )
				{
					case TYPE_COLOR:
						_userListInfo[name].color = val;
						break;
					case TYPE_MIC:
						_userListInfo[name].mic = val;
						break;
					case TYPE_CAM:
						_userListInfo[name].cam = val;
						break;
					case TYPE_PING:
						_userListInfo[name].ping = val;
						break;
					case TYPE_SPEC:
						_userListInfo[name].spec = val;
						break;
				}
				(userList.dataProvider as ICollectionView).refresh();
				
				if( name == nickname ) return;
				if( !rtmpService ) 	   return;
				
				if( val == 1 )
				{
					if( type == TYPE_MIC )
					{
						var ns:NetStream = new NetStream(rtmpService);
						ns.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						ns.play("m-"+roomName+"-"+name);
						nsPlayMicList[name] = ns;
					}
					else if( type == TYPE_CAM )
					{
						var remoteVideo:CollaborationVideo = new CollaborationVideo();
						remoteVideo.stream = new NetStream(rtmpService);
						remoteVideo.stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
						remoteVideo.video = new Video(140, 105);
						remoteVideo.play("v-"+roomName+"-"+name);
//						remoteVideo.setPos(containerRemoteCams.width/2-remoteVideo.width/2, 0);
						remoteVideo.nickname = name;
						containerRemoteCams.addChild(remoteVideo);
						nsPlayCamList[name] = remoteVideo;
						
						if( dictionaryLength(nsPlayCamList) > 0 )
							showRemoteDisplay();
						
//						organizeRemoteVideos();
					}
				}
				else
				{
					if( type == TYPE_MIC )
					{
						if( nsPlayMicList[name] )
						{
							nsPlayMicList[name].removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
							nsPlayMicList[name].close();
							delete nsPlayMicList[name];
						}
					}
					else if( type == TYPE_CAM )
					{
						if( nsPlayCamList[name] )
						{
							nsPlayCamList[name].stream.removeEventListener(NetStatusEvent.NET_STATUS, netStatusEventHandler);
							containerRemoteCams.removeChild(nsPlayCamList[name]);
							nsPlayCamList[name].close();
							delete nsPlayCamList[name];
							
							if( dictionaryLength(nsPlayCamList) == 0 && enabledCam )
								showLocalDisplay();
							else if( dictionaryLength(nsPlayCamList) == 0 && !enabledCam )
								hideRemoteDisplay();
							
//							organizeRemoteVideos();
						}
					}
				}
				(userList.dataProvider as ICollectionView).refresh();
			}
			public function organizeRemoteVideos():void
			{
				var maxWidth:Number = 140;
				var minWidth:Number = 92;
				var count:Number = streamingCount();
				var usable:Number = containerRemoteCams.width;
				var camWidth:Number = ((usable/(count+1)) > maxWidth) ? maxWidth : (usable/(count+1));
				var names:Array = new Array();
				
				if( camWidth < minWidth )
					camWidth = minWidth;
				
				trace( "Usable width: "+usable);
				trace( usable,"/",count+1,">",maxWidth,"[",((usable / (count+1) > maxWidth)?"T":"F"),"] =",maxWidth,":",camWidth);
				
				for( var n:String in nsPlayCamList ) names.push(n);
				names.sort();
				
				switch( count )
				{
					case 1:
						var vid:CollaborationVideo = nsPlayCamList[names[0]] as CollaborationVideo;
						vid.setSize(camWidth);
						vid.setPos(usable/2-vid.width/2, 0);
						trace("setPos(", usable/2-vid.width/2,", 0);");
						break;
					case 2:
						var vid1:CollaborationVideo = nsPlayCamList[names[0]] as CollaborationVideo;
						vid1.setSize(camWidth);
//						vid1.setPos(usable/3-vid1.width/2, 0);
						
						var vid2:CollaborationVideo = nsPlayCamList[names[1]] as CollaborationVideo;
						vid2.setSize(camWidth);
//						vid2.setPos(2*usable/3-vid2.width/2, 0);
						break;
					case 3:
//						var vid1:CollaborationVideo = nsPlayCamList[names[0]] as CollaborationVideo;
//						vid1.setSize(camWidth);
//						vid1.setPos(usable/6-vid1.width/2, 0);
						
//						var vid2:CollaborationVideo = nsPlayCamList[names[1]] as CollaborationVideo;
//						vid2.setSize(camWidth);
//						vid2.setPos(2*usable/6-vid2.width/2, 0);
						
//						var vid3:CollaborationVideo = nsPlayCamList[names[2]] as CollaborationVideo;
//						vid3.setSize(camWidth);
//						vid3.setPos(4*usable/6-vid3.width/2, 0);
						break;
					default:
						
						break;
				}
			}
			private function dictionaryLength(dic:Dictionary):Number
			{
				var n:Number = 0;
				for( var key:Object in dic )
					n++;
				return n;
			}
			public function streamingCount():Number
			{
				return dictionaryLength(nsPlayCamList);
			}
		]]>
	</mx:Script>
</mx:Canvas>
