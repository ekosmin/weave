<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---	PrintFormat
   	*  @author skolman
 	*  A UI Tool to simply print out the snapshot of the selected Application/Tool Image with a title and copyright logo
-->
	
<mx:TitleWindow 
    xmlns:ui ="weave.ui.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
	layout="vertical" 
    title="{lang('Print / Export Image')}"
    showCloseButton="true"
    close="handleClose(event)"
    borderAlpha="0.95"
    borderThickness="2"
    
    horizontalScrollPolicy="off" verticalScrollPolicy="off"
    >
    
    <mx:Script>
	<![CDATA[
		import mx.core.UIComponent;
		import mx.graphics.ImageSnapshot;
		import mx.managers.PopUpManager;
		import mx.printing.FlexPrintJob;
		import mx.printing.FlexPrintJobScaleType;
		
		import weave.Weave;
		import weave.api.linkBindableProperty;
		import weave.api.reportError;
		import weave.utils.BitmapUtils;
		
		//Snapshot of the Application/Tool to be printed
		[Bindable] private var _imageSource:Object = null;
		private var _componentToScreenshot:UIComponent = null;
		public function get componentToScreenshot():UIComponent
		{
			return _componentToScreenshot;
		}
		public function set componentToScreenshot(component:UIComponent):void
		{
			_componentToScreenshot = component;
			try
			{
				// the following will crash when component is the application.
				_imageSource = ImageSnapshot.captureImage(component).data;
			}
			catch (se:SecurityError)
			{
				reportSecurityError(se);
			}
			catch (e:Error)
			{
				trace(e.getStackTrace());
				trace("ImageSnapshot.captureImage() failed, falling back to BitmapUtils.getPNGFromComponent()");
				
				try
				{
					_imageSource = BitmapUtils.getPNGFromComponent(component);
				}
				catch (se:SecurityError)
				{
					reportSecurityError(se);
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
		}
		
		private function reportSecurityError(se:SecurityError):void
		{
			reportError(se, lang("Unable to create screenshot due to lack of permissive policy file for embedded image. ") + se.message);
		}
		
		//handle when close button of TitleWindow is clicked
		public function handleClose(event:Event):void
		{
			PopUpManager.removePopUp(this);
		}
		
		override protected function childrenCreated():void
		{
			super.childrenCreated();
			
			exportTitle.text = "Weave";
			//Weave.properties.backgroundColor.addImmediateCallback(this, handleBackground, true);
		}
		
		/* private function handleBackground():void
		{
			exportTitle.setStyle(
				'backgroundColor',
				showBackground.selected ? Weave.properties.backgroundColor.value : 0x00000000
			);
		} */
		
		//handle when "Print" is clicked
		private var _fileSaver:FileReference = null;
		private function handlePrintClick(event:Event):void
		{
			if(_fileSaver == null)
			{
				_fileSaver = new FileReference();
			}

			
			// Create a date that we can append to the end of each file to make them unique
   			var date:Date = new Date();
   			var dateString:String = date.fullYear +"."+ date.month +"."+ date.day +" "+ date.time;
   			
   			// Create an instance of the FlexPrintJob class.
            var printJob:FlexPrintJob = new FlexPrintJob();

			printJob.printAsBitmap = true;

//			// HACK: to stop from showing this window resized during the print process -- we still see printVbox resized inside this when we first choose to print
//			this.width = 0;
//			this.height = 0;
//			this.x = parent.width + 500;
//			this.y = parent.height + 500;

			printVbox.scaleX = 1.0;
   		   	printVbox.scaleY = 1.0;
   		   	
//   		// HACK: to stop it from cutting off the side of the image
//   		printVbox.setStyle("paddingRight", 60);

			printVbox.validateProperties();
			
            // Start the print job.
            if (printJob.start() != true) 
			{
				scalePrintVbox();
				return;
			}

            // Add the object to print. Do not scale it.
            //printJob.addObject(this, FlexPrintJobScaleType.NONE);
            printJob.addObject(printVbox, FlexPrintJobScaleType.SHOW_ALL);

            // Send the job to the printer.
            printJob.send();	
			
			//close popup
			PopUpManager.removePopUp(this);
		}
		
		//handle when "Save as Image" is clicked
		private function handleSaveAsImageClick(event:Event):void
		{
			if(_fileSaver == null)
			{
				_fileSaver = new FileReference();
			}
			
			// Create a date that we can append to the end of each file to make them unique
   			var date:Date = new Date();
   			var dateString:String = date.fullYear +"."+ date.month +"."+ date.day +" "+ date.time;
   			
   			//save the jpeg image
   		   	
   		   	printVbox.scaleX = 1.0;
   		   	printVbox.scaleY = 1.0;

			
			printVbox.validateProperties();
			
   		   	
			var img:ImageSnapshot = ImageSnapshot.captureImage(printVbox);
   			_fileSaver.save(img.data, lang("Weave Screenshot {0}", dateString) + ".png");
   			
   			//close popup after image is saved
   			PopUpManager.removePopUp(this);	
		}
		
		override public function move(x:Number, y:Number):void
		{
			x = Math.min(x, parent.width - this.width);
			y = Math.min(y, parent.height - this.height);
			
			super.move(x, y);
		}
		
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
		{
			super.updateDisplayList(unscaledWidth, unscaledHeight);
			
			this.validateNow();

			if(parent)
			{
				super.move(parent.width / 2 - this.width / 2, parent.height / 2 - this.height / 2);
			}
		}
		
		private function scalePrintVbox(later:Boolean = true):void
		{
			var multiplier:Number = Weave.properties.workspaceMultiplier.value;
			if (later)
			{
				alpha = 0;
				setTimeout(scalePrintVbox, delay, false);
				delay = 0;
				multiplier = 0;
			}
			else
			{
				alpha = 1;
			}
			printVbox.scaleY = printVbox.scaleX = 1 / (multiplier+1);
		}
		private var delay:int = 2000;
		
   		]]>
	</mx:Script>
	<mx:VBox id="printVbox"
			 horizontalAlign="center"
			 clipContent="true"
			 mouseEnabled="false"
			 backgroundColor="0xFFFFFF">
		<mx:Label id="exportTitle" textAlign="center" fontSize="18" fontWeight="bold" horizontalCenter="0" width="100%"
				  visible="{showTitle.selected}" includeInLayout="{showTitle.selected}"/>
		<mx:Image id="exportImage" source="{_imageSource}" complete="scalePrintVbox();"/>
	</mx:VBox>
	
	<mx:ControlBar horizontalAlign="center">
		
		<!--- @TODO text box for entering title -->
		<mx:CheckBox id="showTitle" label="{lang('Title')}" selected="false" change="scalePrintVbox()" visible="false" includeInLayout="false"/>
		
		<!--<mx:CheckBox id="showBackground" label="{lang('Background')}" selected="true" change="handleBackground();"/>-->
		<mx:Button id="printButton" label="{lang('Print')}" click="handlePrintClick(event)"/>
		<mx:Button id="saveButton" label="{lang('Save as Image')}" click="handleSaveAsImageClick(event)"/>
		<mx:Button id="cancelButton" label="{lang('Cancel')}" click="PopUpManager.removePopUp(this)"/>
	</mx:ControlBar>
</mx:TitleWindow> 
