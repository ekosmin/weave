<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				backgroundColor="0xCCCCCC"
				addedToStage="handleAddedToStage();"
				enablePercentageCoords="false"
				layout="vertical"
				showBusyIndicator="false"
				escapeKeyClosesPanel="true"
				titleStyleName="weave-panel-title-style"
				>
	<mx:Metadata>
		[DefaultProperty("children")]

	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.containers.Box;
			import mx.containers.TabNavigator;
			import mx.core.INavigatorContent;
			import mx.core.IUIComponent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			
			import weave.api.core.DynamicState;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.getLinkableOwner;
			import weave.api.getSessionState;
			import weave.api.newDisposableChild;
			import weave.api.objectWasDisposed;
			import weave.api.reportError;
			import weave.api.setSessionState;
			import weave.api.ui.ILinkableObjectEditor;
			import weave.compiler.Compiler;
			import weave.core.ClassUtils;
			import weave.core.SessionManager;
			import weave.editors.DynamicEditor;
			

			protected var _targetObjects:Array = null;
			private var _savedTargetSessionStates:Array;
			private var _savedPathSessionStates:Array;
			private var _savedPaths:Object;
			
			override public function reposition():void
			{
				panelX.value = '' + int(20 + Math.random() * 10) + "%"; // near middle of screen if width 50%
				panelY.value = '' + int(20 + Math.random() * 10) + "%"; // near middle of screen if height 50%
				panelWidth.value = '640';
				panelHeight.value = '480';
			}

			override protected function get borderIsVisible():Boolean
			{
				return true;
			}
			
			[PercentProxy("percentWidth")]
			override public function set width(value:Number):void
			{
				value = Math.round(value);
				super.width = value;
				if (!initialized)
					panelWidth.value = String(value);
			}
			
			[PercentProxy("percentHeight")]
			override public function set height(value:Number):void
			{
				value = Math.round(value);
				super.height = value;
				if (!initialized)
					panelHeight.value = String(value);
			}
			
			/**
			 * container for the Save, Revert, Cancel and Save &amp; Close buttons 
			 */
			protected var controlPanelControls:ControlPanelControls = new ControlPanelControls();
			
			public function get tabNavigator():CustomTabNavigator
			{
				return controlPanelControls ? controlPanelControls.tabNavigator : null;
			}
			
			override public function set layout(value:String):void
			{
				super.layout = "vertical";
			}
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				closeable.value = false;
				enableZOrder.value = false;
				minimizable.value = false;
				maximizable.value = false;
				enableSubMenu.value = true;
				subMenuButton.data = [
					{
						label: lang('Edit session state'),
						click: function():void {
							SessionStateEditor.openDefaultEditor((
								sessionEditorTarget is Function
									? sessionEditorTarget()
									: sessionEditorTarget
							) as ILinkableObject);
						},
						shown: function():Boolean { return sessionEditorTarget != null; }
					},{
						label: lang('Create save point'),
						click: save
					},{
						label: lang('Revert to save point'),
						click: revert
					}
				];
				
				// title is set here instead of in the mxml because otherwise it would
				// overwrite any other value set in mxml components based on this class.
				title = lang('Control Panel');
			}
			
			private var _children:Array = [];
			public function set children(array:Array):void
			{
				for each (var child:DisplayObject in array)
				{
					if (!(child as INavigatorContent))
					{
						var box:Box = new Box();
						box.percentWidth = 100;
						box.percentHeight = 100;
						box.addChild(child);
						child = box;
					}
					if (createdChildren)
						controlPanelControls.tabNavigator.addChild(child);
					else
						_children.push(child);
				}
			}
			
			/**
			 * Set this to enable the "Edit session state" menu item.
			 * This can either be an ILinkableObject or a Function that returns an ILinkableObject.
			 */
			public var sessionEditorTarget:Object = null;
			
			/**
			 * setter for _targetObjects
			 * @param Array an array of ILinkableObjects 
			 */
			public function set targets(array:Array):void
			{
				_targetObjects = array;
				
				controlPanelControls.busyIndicatorTargets = array;
				
				save();
				
				adjustControls();
			}
			
			private function adjustControls():void
			{
				if (!parent)
				{
					callLater(adjustControls);
					return;
				}
				
				// make sure controls are initialized before attempting to manipulate its children.
				controlPanelControls.initialize();
				controlPanelControls.validateNow();
				
				// show buttons if there are targets, hide them if not
				if (!_targetObjects || !_targetObjects.length)
				{
					closeable.value = true;
					if (controlPanelControls == controlPanelControls.buttons.parent)
						controlPanelControls.removeChild(controlPanelControls.buttons);
				}
				else
				{
					closeable.value = false;
					if (controlPanelControls != controlPanelControls.buttons.parent)
						controlPanelControls.addChild(controlPanelControls.buttons);
				}
			}
			
			/**
			 * This function reverts session state(s) in targets to the previous state(s) set in save() 
			 */
			public function revert():void
			{
				if (!_targetObjects)
					return;
				var i:int = 0;
				for each(var object:ILinkableObject in _targetObjects)
				{
					if (!WeaveAPI.SessionManager.objectWasDisposed(object))
						setSessionState(object, _savedTargetSessionStates[i++]); 
				}
				for each (var obj:Object in _savedPathSessionStates)
				{
					var ilo:ILinkableObject = WeaveAPI.getObject(obj["path"]);
					if (ilo)
						setSessionState(ilo, obj["state"]);
				}
			}
			
			/**
			 * This function saves the session state(s) of all ILinkableObjects in _targetObjects 
			 * to a local Array <br/>
			 * If _targetObjects is null and a parent ILinkableObject exists, 
			 * the parent ILinkableObject's session state will be saved
			 */
			public function save():void
			{
				if (!_targetObjects)
				{
					var target:ILinkableObject = sessionEditorTarget as ILinkableObject;
					if (!target && this.hasOwnProperty(OUTER_DOCUMENT))
						target = this[OUTER_DOCUMENT] as ILinkableObject;
					if (!target)
						target = parent as ILinkableObject
					if (target)
					{
						targets = [target]; // this calls save() again
						return;
					}
				}
				if (tabNavigator)
				{
					for each (var child:Object in tabNavigator.getChildren())
					{
						if (child is ILinkableObjectEditor)
						{
							try
							{
								(child as ILinkableObjectEditor).applyChanges();
							}
							catch (e:Error)
							{
								reportError(e);
							}
						}
					}
				}
				
				_savedPaths = {};
				_savedPathSessionStates = [];
				_savedTargetSessionStates = [];
				for each(var object:ILinkableObject in _targetObjects)
				{
					if (object)
					{
						_savedTargetSessionStates.push(getSessionState(object));
						saveRelatedSessionStates(object);
					}
				}
			}
			
			private function saveRelatedSessionStates(object:ILinkableObject):void
			{
				var dynamicObjects:Array = WeaveAPI.SessionManager.getLinkableDescendants(object, ILinkableDynamicObject);
				if (object is ILinkableDynamicObject)
					dynamicObjects.unshift(object);
				for each (var dynamicObject:ILinkableDynamicObject in dynamicObjects)
				{
					// if the dynamic object references a path...
					var path:Array = dynamicObject.targetPath;
					var pathStr:String = Compiler.stringify(path);
					if (dynamicObject.internalObject && path != null && !_savedPaths[pathStr])
					{
						// avoid duplicate entries and infinite recursion
						_savedPaths[pathStr] = true;
						// save the session state of the global object
						_savedPathSessionStates.push({"path": path, "state": getSessionState(dynamicObject.internalObject)});
						saveRelatedSessionStates(dynamicObject.internalObject);
					}
				}
			}
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				
				super.createChildren();

				var children:Array = getChildren();
				removeAllChildren();
				
				addChild(controlPanelControls);
				controlPanelControls.addEventListener(FlexEvent.CREATION_COMPLETE, handleControlsCreated);
				
				controlPanelControls.initialize();
				for ( var i:int = 0; i < children.length; i++ )
				{
					controlPanelControls.tabNavigator.addChild(children[i]);
				}
				
				while (_children.length)
					controlPanelControls.tabNavigator.addChild(_children.shift());
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
			}
			
			private function handleControlsCreated(e:FlexEvent):void
			{
				controlPanelControls.cancelBtn.addEventListener(MouseEvent.CLICK, function (e:MouseEvent):void { revert(); removePanel(); });
				controlPanelControls.saveCloseBtn.addEventListener(MouseEvent.CLICK, function (e:MouseEvent):void { save(); removePanel(); });
			}
			
			private function handleAddedToStage():void
			{
				save();
			}
			
			override protected function handleEscapeKey():void
			{
				if (WeaveAPI.StageUtils.shiftKey)
					revert();

				super.handleEscapeKey();
			}
			
			public function set errorText(value:String):void
			{
				controlPanelControls.errorText = value;
			}
			
			public static function getControlPanelTitle(object:ILinkableObject, format:String = "Settings for {0}"):String
			{
				var className:String = getQualifiedClassName(object).split('::').pop();
				var objectName:String = getSessionStateName(object);
				var str:String = WeaveAPI.ClassRegistry.getDisplayName(Object(object).constructor) || lang(className);
				if (objectName && objectName != className)
					str += ' ' + Compiler.encodeString(objectName);
				return lang(format, str);
			}
			
			public static function getSessionStateName(object:ILinkableObject):String
			{
				var childName:String = null;
				var owner:ILinkableObject = getLinkableOwner(object);
				if (owner is ILinkableHashMap)
				{
					childName = (owner as ILinkableHashMap).getName(object);
				}
				else if (owner)
				{
					var properties:Array = (WeaveAPI.SessionManager as SessionManager).getLinkablePropertyNames(owner);
					for each (var property:String in properties)
					{
						if (owner[property] === object)
						{
							childName = property;
							break;
						}
					}
				}
				return childName;
			}
			
			private static const editors:Dictionary = new Dictionary(true); // ILinkableObject -> ILinkableObjectEditor
			private static const editorPanels:Dictionary = new Dictionary(true); // ILinkableObject -> ControlPanel
			
			/**
			 * Opens a panel for editing an object.
			 * @param linkableObject The object for which to create a ControlPanel.
			 * @param targets An Array of ILinkableObject targets for the ControlPanel.
			 * @param initialSessionStates An Array of session states corresponding to the Array of targets.
			 * @param sessionEditorFallback If this is set to true and no editor could be created, the default session editor is opened.
			 * @return true if an editor window was opened.
			 */
			public static function openEditor(linkableObject:ILinkableObject, targets:Array = null, initialSessionStates:Array = null, sessionEditorFallback:Boolean = true, customEditor:Class = null):Boolean
			{
				var controlPanel:ControlPanel = editorPanels[linkableObject] as ControlPanel;
				if (!controlPanel || objectWasDisposed(controlPanel))
				{
					var editor:IUIComponent;
					if (customEditor)
					{
						editor = new customEditor() as ILinkableObjectEditor;
						(editor as ILinkableObjectEditor).setTarget(linkableObject);
					}
					else
						editor = WeaveAPI.EditorManager.getNewEditor(linkableObject);
					if (!editor)
						editor = DynamicEditor.createComponent(linkableObject, getSessionStateName(linkableObject), false);
					if (!editor)
					{
						if (sessionEditorFallback)
							SessionStateEditor.openDefaultEditor(linkableObject);
						return sessionEditorFallback;
					}
					
					editors[linkableObject] = editor;
					
					controlPanel = newDisposableChild(linkableObject, ControlPanel);
					controlPanel.children = [editor];
					controlPanel.title = controlPanel._defaultTitle = getControlPanelTitle(linkableObject);
					controlPanel.sessionEditorTarget = linkableObject;
					
					PopUpManager.addPopUp(controlPanel, WeaveAPI.topLevelApplication as DisplayObject);
				}
				
				editorPanels[linkableObject] = controlPanel;
				
				controlPanel.restorePanel();
				
				if (!controlPanel.parent)
					PopUpManager.addPopUp(controlPanel, WeaveAPI.topLevelApplication as DisplayObject);
				
				controlPanel.targets = targets || [linkableObject];
				if (initialSessionStates)
					controlPanel._savedTargetSessionStates = initialSessionStates;
				return true;
			}
		]]>
	</mx:Script>
</DraggablePanel>
