<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns:mx="http://www.adobe.com/2006/mxml"
		xmlns="weave.ui.*" 
		borderColor="#939178"
		title="Error Log"
		escapeKeyClosesPanel="true"
		>
	<Console id="console" context="{errorManager}" padding="0"/>
	<HelpComponent id="help" visible="false" includeInLayout="false">
		How to get a pointer to a display object:
		
		Move the mouse over a component and press F8.
		You will see a list of objects under the mouse along with ID numbers, such as Stage#0.
		In the console, you can use the # operator followed by an ID number to get a pointer to an object.
		If you use the # operator followed by an object pointer, it will generate an ID for that object.
		Use the # operator by itself to see a list of object IDs which have been generated so far.
	</HelpComponent>
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.managers.PopUpManager;
			
			import weave.Weave;
			import weave.api.core.IErrorManager;
			import weave.api.getCallbackCollection;
			import weave.compiler.StandardLib;
			import weave.core.ErrorManager;
			import weave.core.LinkableBoolean;
			import weave.utils.DebugUtils;
			import weave.utils.Identify;
			
			[Bindable] private var errorManager:IErrorManager = WeaveAPI.ErrorManager;
			
			override protected function createChildren():void
			{
				if (createdChildren)
					return;
				super.createChildren();
				initSubMenu();
			}
			
			private function initSubMenu():void
			{
				var allMenuToggles:Array = [
					Weave.properties.enableRightClick,
					Weave.properties.enableMenuBar,
					Weave.properties.enableDataMenu,
					Weave.properties.enableDynamicTools,
					Weave.properties.enableSelectionsMenu,
					Weave.properties.enableSubsetsMenu,
					Weave.properties.enableSessionMenu,
					Weave.properties.enableWindowMenu,
					Weave.properties.enableToolControls,
					Weave.properties.enableSessionHistoryControls
				];
				enableSubMenu.value = true;
				subMenuButton.data = [
					{
						label: function():String {
							return Identify.enabled
								? lang("Stop identifying UI components")
								: lang("Identify UI components");
						},
						click: Identify.identify
					},{
						label: lang("Print display list"),
						click: function():void {
							weaveTrace(DebugUtils.debugDisplayList(stage));
						}
					},{
						label: lang("Show all menus and controls"),
						click: function():void {
							for each (var lb:LinkableBoolean in allMenuToggles)
								lb.value = true;
							for each (var dp:DraggablePanel in WeaveAPI.globalHashMap.getObjects(DraggablePanel))
								for each (lb in [dp.enableBorders, dp.enableMoveResize, dp.enableZOrder, dp.minimizable, dp.maximizable, dp.closeable])
									lb.value = true;
						},
						shown: function():Boolean {
							for each (var lb:LinkableBoolean in allMenuToggles)
								if (!lb.value)
									return true;
							for each (var dp:DraggablePanel in WeaveAPI.globalHashMap.getObjects(DraggablePanel))
								for each (lb in [dp.enableBorders, dp.enableMoveResize, dp.enableZOrder, dp.minimizable, dp.maximizable, dp.closeable])
									if (!lb.value)
										return true;
							return false;
						}
					},{
						label: lang("Clear log"),
						click: console.consoleClear
					},{
						label: lang("Console help"),
						click: help.showHelp
					}
				];
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				enableZOrder.value = false;
				getCallbackCollection(WeaveAPI.ErrorManager).addGroupedCallback(this, handleError, true);
			}
			
			private var errorIndex:int = 0;
			private function handleError():void
			{
				while (errorIndex < WeaveAPI.ErrorManager.errors.length)
				{
					if (errorIndex == 0)
						console.log.text += StandardLib.substitute('\r\rWeave {0}; Flash {1}', Weave.properties.version.value, Capabilities.version);
					var error:Error = WeaveAPI.ErrorManager.errors[errorIndex++];
					console.log.text += '\r\r' + ErrorManager.errorToString(error);
				}
				console.log.validateProperties();
				console.log.verticalScrollPosition = console.log.maxVerticalScrollPosition;
			}
			
			public static function getInstance():ErrorLogPanel
			{
				if (!_instance)
					_instance = new ErrorLogPanel();
				return _instance;
			}
			public static function openErrorLog():void
			{
				var instance:ErrorLogPanel = getInstance();
				if (!instance.parent)
				{
					var app:UIComponent = WeaveAPI.topLevelApplication as UIComponent;
					var desiredHeight:Number = 150;
					var percentHeight:Number = Math.round(desiredHeight / app.stage.stageHeight * 100);
					
					instance.panelY.value = (98 - percentHeight) + "%";
					instance.panelHeight.value = percentHeight + "%";
					
					instance.panelX.value = "0%";
					instance.panelWidth.value = "100%";
					
					PopUpManager.addPopUp(instance, app);
				}
				instance.restorePanel();
			}
			private static var _instance:ErrorLogPanel;
		]]>
	</mx:Script>
</DraggablePanel>
