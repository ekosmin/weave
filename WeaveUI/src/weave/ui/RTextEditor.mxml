<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!--
RTextEditor

1. Pick your columns
2. Assign variable names to those columns
3. Input an R script using those variable names
4. List the outputs you want
5. The columns get joined on the client-side using the keys (record identifiers) to produce flat Arrays lined up by row index
6. These columns become the input to the R script on the server, the server runs the script and returns the results.
7. On the client side, any returned Arrays are matched up with the original keys using the same row order to become columns.
8. Any other results are just printed out to the text area.
-->
<!---
@author spurushe
@author sanbalag
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="{lang('R Script Editor')}"
				x="15%" width="70%" y="15%" height="70%"
				backgroundColor="#EFF4BC" 
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool_R"
				>
	<mx:HBox width="100%" height="100%" paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}" paddingBottom="{padding}">
		<mx:VBox width="20%" height="100%" verticalGap="0">
			<mx:Label text="{lang('(1) Select data to use in your script')}"/>
			<mx:CheckBox id="allowMissingCheckBox" label="{lang('Allow missing values.')}" selected="false"/>
			<ColumnListComponent id="inputColumnList" label="{lang('Input columns')}" hashMap="{variables}" width="100%" height="100%"   />			
		</mx:VBox>
		<mx:VBox width="55%" height="100%" verticalGap="0">
			<Paragraph text="{lang('(2) Assign variables to your data (Separate by commas)')}"/>
			<mx:TextArea id = "assignTA" width="100%" height="100%" wordWrap="false"/>

			<mx:Spacer height="{padding}"/>

			<Paragraph text="{lang('(3) Enter a script (type or paste in)')}"/>			
			<mx:TextArea id = "inputTA" width="100%" height="100%" text=""/>						

			<mx:Spacer height="{padding}"/>

			<Paragraph text="{lang('(4) Input a plot script (Optional)')}"/>
			<mx:TextArea id = "plotTA" width="100%" height="100%" text=""/>

			<mx:Spacer height="{padding}"/>

			<Paragraph text="{lang('(5) Specify script outputs to display, separated by commas')}"/>
			<mx:TextArea id = "outputTA" width="100%" height="100%" wordWrap="false"/>

			<mx:Spacer height="{padding}"/>

			<Paragraph text="{lang('(6) Run your script on the server')}"/>
			<mx:HBox>
				<mx:Button id="B2" label="{lang('Run script')}"  click="viewAndSendbuttonClickHandler()"/>
				<mx:CheckBox id="intermediateResultCB" label="{lang('Verbose')}" toolTip="{lang('Show intermediate results from R')}"/>
				<mx:CheckBox id="warningCB" label="{lang('Warnings')}" toolTip="{lang('Show warnings from R')}"/>
			</mx:HBox>

			<mx:Spacer height="{padding}"/>

			<Paragraph text="{lang('(7) Export your script for later use')}"/>
			<mx:HBox>
				<mx:Button id="exportBtn" label="{lang('Export')}" click="export_clickHandler(event)"/>
				<mx:Button id="importBtn" label="{lang('Import')}" click="import_clickHandler(event)"/>	
			</mx:HBox>						
		</mx:VBox>
		<mx:VBox width="25%" height="100%" verticalGap="0">
			<mx:Label text="{lang('Result')}"/>
			<mx:TextArea id="ResultTA" width="100%" height="100%" editable="false"/>
		</mx:VBox>
	</mx:HBox>
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Image;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.detectLinkableObjectChange;
			import weave.api.disposeObject;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.KeySets.KeySet;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, RTextEditor, "R Script Editor");
			
			private const padding:int = 5;
			
			public const variables:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			
			private var _service:WeaveRServlet;
			private function get Rservice():WeaveRServlet
			{
				if (detectLinkableObjectChange(this, Weave.properties.rServiceURL))
				{
					if (_service)
						disposeObject(_service);
					_service = registerDisposableChild(this, new WeaveRServlet(Weave.properties.rServiceURL.value));
				}
				return _service;
			}
			public const inputTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			public const plotTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			public const outputTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			public const assignTALinkable:LinkableString = newLinkableChild(this, LinkableString);
			
			
		
			/*protected function checking_clickHandler(event:MouseEvent):void
			{
				var column:Array = variables.getObjects();
				var refColumn:ReferencedColumn;
				var columnName:String;
				var columnNames:Array = new Array();
				//trace(column);
				for(var i:int = 0; i<column.length; i++){
					 refColumn = column[i] as ReferencedColumn;
					 columnName = refColumn.internalColumn.getMetadata('title');
					 while(columnName.search(" ") > 0)
					 {
						 columnName = columnName.replace(" ","");
					 }
					 columnNames.push(columnName);					 
				}
				trace(columnNames);
			}*/
			
			override protected function inConstructor():void
			{
				super.inConstructor();				
				var columns:Array = ColumnUtils.getColumnsWithCommonKeyType();
				for (var i:int = 0; i < columns.length; i++)
					variables.requestObjectCopy(null, columns[i]);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				//RimageBtn.enabled = false;
				linkBindableProperty(inputTALinkable,inputTA,"text");
				linkBindableProperty(plotTALinkable,plotTA,"text");
				linkBindableProperty(outputTALinkable,outputTA,"text");
				linkBindableProperty(assignTALinkable,assignTA,"text");
			}
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]] where keys implement IQualifiedKey
			 */
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				//make dataype Null, so that columns will be sent as exact dataype to R
				//if mentioned as String or NUmber ,will convert all columns to String or Number .
				var result:Array = ColumnUtils.joinColumns(columns,null, allowMissingCheckBox.selected, keys);
				return [result.shift(), result];
			}
			
			private function viewAndSendbuttonClickHandler():void
			{
				ResultTA.text = '';
				
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnQKeys:Array;
				var joinedColumnKeys:Array;
				var joinedColumns:Array;
				//Columns from ColumnListComponent 
				var selectedColumns:Array = variables.getObjects();
				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				for(var i:int = 0; i<selectedColumns.length; i++)
				{
					attributeColumns[i] = selectedColumns[i] as IAttributeColumn;
				}
				//joinColumns Called only When columns are added to ColumnListComponent
				//if(selectedColumns.length == 0)
				//	return;
				if(selectedColumns.length >0)
				{					
				// get records for keys common to all columns 
					result = joinColumns(attributeColumns);
					joinedColumnQKeys = result[0];
					joinedColumns = result[1];
					//this is for JRI service
					//joinedColumnKeys = joinedColumnQKeys.concat();
				}
				
				// replace each IQualifiedKey with its localName
				// this for JRI service 
				/* var keyType:String = null;
				for (var j:int = 0; j < joinedColumnKeys.length; j++)
				{
					var qkey:IQualifiedKey = joinedColumnKeys[j];
					// sanity check
					if (keyType && keyType != qkey.keyType)
					{
						// there are multiple key types in the list of keys..
						Alert.show("This feature only works with keys having a common keyType.  Key types do not match: " + [keyType, qkey.keyType]);
						return;
					}
					keyType = qkey.keyType;
					joinedColumnKeys[j] = qkey.localName;
				} */
						
				//Values need to assign for Column names in R
				var assignValues:Array = joinedColumns;
				//Names for Column that need to be used in R
				var RscriptAssignNames:String = assignTA.text;
				var assignNames:Array = WeaveAPI.CSVParser.parseCSVRow(assignTA.text) || [];
				//Script for R input
				var script:String = inputTA.text;
				var plotScript:String = plotTA.text;
				// "\r" - replaced by "/n" in all occurance
				while(script.search("\r") > 0)
				{
					script = script.replace("\r","\n");
				}				
				//Script to get output from R
				var outputNames:Array = WeaveAPI.CSVParser.parseCSVRow(outputTA.text) || [];

				//Query is created from runScript with same signature from Jave side
				var showIntermediateResults:Boolean = intermediateResultCB.selected;
				var showWarnings:Boolean = warningCB.selected;
				var query:AsyncToken = Rservice.runScript(null,assignNames, assignValues, outputNames, script,plotScript, showIntermediateResults,showWarnings,false);
				
				addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault, joinedColumnQKeys);
			}
			
			private function handleRunScriptResult(event:ResultEvent, keys:Array):void
			{
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;
				trace('Robj:',ObjectUtil.toString(Robj));
				if (Robj == null)
				{
					reportError(lang("R Servlet did not return an Array of results as expected."));
					return;
				}
				
				//Clears previous Result
				ResultTA.text = "";
				trace(ObjectUtil.toString(event.result));
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);				
				}
				
				//TO display in ResultTA
				var resultString:String = "";
				for (var j:int = 0; j < RresultArray.length; j++)
				{								
					resultString = resultString + RresultArray[j].name + ":\n" + ObjectUtil.toString(RresultArray[j].value) +"\n";
				}
				while (resultString.search("\"") > 0)
				{
					resultString = resultString.replace("\"","");
				}
				
				ResultTA.text = resultString;
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for (var p:int = 0;p < RresultArray.length; p++)
				{
					if(RresultArray[p].name == "Plot Results")
					{
						var imagePanel:DraggablePanel = Weave.root.requestObject(null, DraggablePanel, false);
						var image:Image = new Image();
						image.source = RresultArray[p].value;
						imagePanel.addChild(image);
						imagePanel.panelWidth.value = "500";
						imagePanel.panelHeight.value = "500";
					}
				}
				ResultUtils.rResultToColumn(keys, RresultArray, Robj);
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError(event);
			}
			
			//To get the name of selected Column from ColumnListComponent and add to respective TextArea(based on Focused Texarea)
 			/* protected function inputColumnList_doubleClickHandler(event:MouseEvent):void
			{
				//trace(event.currentTarget.internalList.selectedIndex);
				var columnName:String = variables.getName(event.currentTarget.internalList.selectedItem as ILinkableObject)
				if(inputTA == focusedTA )
				{	
					var cursorPosBegin:int = focusedTA.selectionBeginIndex;
					var cursorPosEnd:int = focusedTA.selectionEndIndex;
					focusedTA.text = focusedTA.text.substr(0,cursorPosBegin) + columnName + focusedTA.text.substr(cursorPosEnd);
				}
				//Need to write code to remove Empty lines before sending to R-Side
				if(outputTA == focusedTA)
				{
					if(outputTA.text ==""){
						outputTA.text = outputTA.text + columnName;
					}
					else{
						outputTA.text = outputTA.text +"\n"+columnName;
					}					
				}				
			} */

 			//Saves the pointer to inputTA
			protected function inputTA_clickHandler(event:MouseEvent):void
			{
				var selectedTA:TextArea = (focusManager.getFocus()) as TextArea;
				focusedTA = selectedTA;
			}
			////Saves the pointer to outputTA
			protected function outputTA_clickHandler(event:MouseEvent):void
			{
				var selectedTA:TextArea = (focusManager.getFocus()) as TextArea;
				focusedTA = selectedTA;
			}

			
			protected function assignTA_clickHandler(event:MouseEvent):void
			{
				var selectedTA:TextArea = (focusManager.getFocus()) as TextArea;
				focusedTA = selectedTA;
			} 
			
			private var _sessionFileSaver:FileReference = null;
			private var _sessionFileLoader:FileReference = null;
			protected function export_clickHandler(event:MouseEvent):void
			{
				var rScriptSessionState:XML =
					<RScriptEditor>
						<assignNames>{assignTA.text}</assignNames>
						<inputScript>{inputTA.text}</inputScript>
						<plotScript>{plotTA.text}</plotScript>
						<outputScript>{outputTA.text}</outputScript>
					</RScriptEditor>;
					
				trace(rScriptSessionState);
					
				//WeaveXMLEncoder.encode(getSessionState(this)
				if(_sessionFileSaver == null)
				{
					_sessionFileSaver = new FileReference();
				}
				
				// Create a date that we can append to the end of each file to make them unique
				var date:Date = new Date();
				var dateString:String = date.fullYear +"."+ date.month +"."+ date.day +" "+ date.time;
				
				_sessionFileSaver.save(rScriptSessionState, lang("R-Script Session State {0}", dateString) + ".xml");
			}
			
			private var _defaultsFilename:String = null;
			protected function import_clickHandler(event:MouseEvent):void
			{
				try
				{
					var loadedXML:XML = new XML();
					if(_sessionFileLoader == null)
					{
						_sessionFileLoader = new FileReference();
						
						_sessionFileLoader.addEventListener(Event.SELECT,   function (e:Event):void { _sessionFileLoader.load(); _defaultsFilename = _sessionFileLoader.name; } );
						_sessionFileLoader.addEventListener(Event.COMPLETE, function (e:Event):void {loadedXML = XML(e.target.data) ;loadIntoReditor(loadedXML);} );
					}
					_sessionFileLoader.browse([new FileFilter("XML", "*.xml")]);			
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			
			protected function loadIntoReditor(xml:XML):void{
				assignTA.text = xml.assignNames;
				inputTA.text = xml.inputScript;
				plotTA.text = xml.plotScript;
				outputTA.text = xml.outputScript;
			}
			
			private var focusedTA:TextArea = null;
			
			

			/* protected function draggablepanel1_addedToStageHandler(event:Event):void
			{
				addAsyncResponder(query, checkForJRIService, 
			} */
			
		]]>
	</mx:Script>
	<editorFactory>
		<mx:Component>
			<ControlPanel>
				<mx:VBox label="Settings">
					<Indent label="{lang('Weave RService URL')}">
						<TextInputWithPrompt id="urlInput" prompt="/WeaveServices/RService" width="100%"
											 creationComplete="linkBindableProperty(Weave.properties.rServiceURL, urlInput, 'text')"/>
					</Indent>
				</mx:VBox>
				<mx:Script>
					<![CDATA[
						import weave.Weave;
						import weave.api.linkBindableProperty;
					]]>
				</mx:Script>
			</ControlPanel>
		</mx:Component>
	</editorFactory>
</DraggablePanel>
