<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
		 xmlns="weave.ui.controlBars.*"
		 xmlns:ui="weave.ui.*"
	     width="100%"
    	 backgroundColor="0xCCCCCC" backgroundAlpha="1.0"
    	 verticalAlign="middle"
	     styleName="weave-menu-bar-style"
	     horizontalScrollPolicy="off"
		 verticalScrollPolicy="off"
		 >
	<CustomMenuBar id="menubar"
				change="(event.item as WeaveMenuItem).runClickFunction()"
				height="24"
				width="100%"
				fontFamily="Verdana, Tahoma, Arial"
				fontSize="10"
				backgroundSkin="{null}"
				fontWeight="normal"
				firstItemBold="true"
				dataProvider="{getMenuChildren(rootMenuItem)}"
				labelFunction="{trimLabel}"
				menuStyleName="weave-menu-style"
				styleName="weave-menu-bar-style"
				/>
	<mx:Style>
		.weave-menu-style {
			color: #000000;
			selectionColor: #F8A4FB;
			textRollOverColor: #FFFFFF;
			textSelectedColor: #000000;
			openDuration: 0;
			padding-left: 0;
			padding-right: 0;
			padding-top: 0;
			padding-bottom: 0;
			
		}
		
		.weave-menu-bar-style {
			rollOverColor: #88A4DB;
			selectionColor: #F8A4FB;
			fontFamily: Arial;
			fontWeight: bold;
			padding-left: 0;
			padding-right: 0;
			padding-top: 0;
			padding-bottom: 0;
			highlightAlphas: 0, 0;
   			fillAlphas: 1, 1;
   			button-style-name: "weave-menu-bar-button-style";
   			
		}
		
		.weave-menu-bar-button-style {
			cornerRadius: 0;
			paddingLeft: 0;
			paddingRight: 0;
			paddingTop: 0;
			paddingBottom: 0;
		}
		.menu-button-style {
			padding-left: 0;
			padding-right: 0;
			padding-top: 2;
			padding-bottom: 2;
			corner-radius: 0;
			fill-alphas: 1, 1;
			fill-colors: #dadada, #dadada;
		}
	</mx:Style>
	

    <mx:Script>
    	<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.core.mx_internal;
			
			import weave.menus.DataMenu;
			import weave.menus.SelectionsMenu;
			import weave.menus.FileMenu;
			import weave.menus.SubsetsMenu;
			import weave.menus.SystemMenu;
			import weave.menus.ToolsMenu;
			import weave.menus.WeaveMenuItem;
			import weave.menus.WindowMenu;
			
			use namespace mx_internal;
			
			private const _dataProvider:ArrayCollection = new ArrayCollection();
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				rootMenuItem = new WeaveMenuItem({
					children: defaultMenus
				});
			}
			
			public static const defaultMenus:Array = WeaveMenuItem.createItems([
				SystemMenu,
				FileMenu,
				DataMenu,
				ToolsMenu,
				SelectionsMenu,
				SubsetsMenu,
				WindowMenu
			]);
			
			public var maxLabelLength:int = 75;
			private function trimLabel(item:WeaveMenuItem):String
			{
				var str:String = item.label || '';
				if (str.length > maxLabelLength)
					str = str.substr(0, maxLabelLength) + "...";
				return str;
			}
			
			private var _rootMenuItem:WeaveMenuItem;
			
			/**
			 * This is the dataProvider for the menubar.
			 */
			[Bindable] public function get rootMenuItem():WeaveMenuItem
			{
				return _rootMenuItem;
			}
			/**
			 * Sets the dataProvider for the menubar.
			 * @param menu Either a WeaveMenuItem or an Object to be passed to the WeaveMenuItem constructor.
			 */
			public function set rootMenuItem(menu:*):void
			{
				_rootMenuItem = menu as WeaveMenuItem || new WeaveMenuItem(menu);
			}
			
			private function getMenuChildren(menu:WeaveMenuItem):Array
			{
				return menu ? menu.children : null;
			}
			
			/**
			 * Refreshes the menubar.
			 */
			public function refresh():void
			{
				menubar.dataProvider = getMenuChildren(_rootMenuItem);
			}
    	]]>
    </mx:Script>
</mx:HBox>
