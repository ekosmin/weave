<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!--
		This class creates a taskbar that sits at the bottom of a page to provide objects to access different options.  For example, tools could be
		minimized to go into this taskbar like in windows or a mac.  
-->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
		   implements="weave.api.core.ILinkableObject"
		   clipContent="false"
		   width="100%" height="0">
	<mx:HBox id="hbox"
			 visible="false"
			 verticalAlign="middle"
			 cornerRadius="5"
			 backgroundColor="0x808080" backgroundAlpha="0.8"
			 borderColor="0x000000" borderStyle="solid" borderThickness="1" 
			 paddingLeft="10" paddingRight="10" paddingTop="2" paddingBottom="2"
			 filters="{[glow]}"
			 x="{(width - hbox.width) / 2}"
			 y="{-hbox.height}"
			 />
	
	<mx:Script>
		<![CDATA[
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.events.ResizeEvent;
			
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.newLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.data.AttributeColumns.AbstractAttributeColumn;
			import weave.ui.MinimizedComponent;

			public const taskbarShrinkGrow:LinkableBoolean = newLinkableChild(this, LinkableBoolean);
			public const taskbarLargeIconSize:LinkableNumber = newLinkableChild(this, LinkableNumber, updateIconSizes);
			public const taskbarSmallIconSize:LinkableNumber = newLinkableChild(this, LinkableNumber, shrinkComponents);
			
			[Bindable]
			private var glow:GlowFilter = new GlowFilter(0xFFFFFF, 0.5, 3, 3, 5);
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				addEventListener(MouseEvent.ROLL_OVER, growComponents);
				addEventListener(MouseEvent.ROLL_OUT,  shrinkComponents);
				
				taskbarShrinkGrow.value = true;
				taskbarSmallIconSize.value = 10;
				taskbarLargeIconSize.value = 50;
				
				Weave.root.childListCallbacks.addImmediateCallback(this, handleLinkableChildListChanged);
			}
			
			// add a callback for when components that these minimized components represented are removed
			private function handleLinkableChildListChanged():void
			{
				var removed:ILinkableObject = Weave.root.childListCallbacks.lastObjectRemoved;
				if (!removed)
					return;
				// go through each minimizedComponent in the taskbar
				for each (var minimizedComponent:MinimizedComponent in hbox.getChildren())
				{
					// go through each component in the minimized component group (this will have to be modified later in case we start to group
					// tools together
					for each (var component:UIComponent in minimizedComponent.componentGroup)
					{
						// if the last object removed that caused this callback is in this component group, 
						// then remove the minimized component from the taskbar so you cant restore something that doesn't exist anymore
						if (component == removed)
						{
							hbox.removeChild(minimizedComponent);
							continue;
						}
					}
				}
			}
			
			private function updateIconSizes():void
			{
				for each (var component:MinimizedComponent in hbox.getChildren())
				{
					component.scaleX = 1;
					component.scaleY = 1;
					component.validateNow();
					component.updateMinimizedIcon(taskbarLargeIconSize.value, taskbarLargeIconSize.value);
				}
				
				shrinkComponents();
			}
				
			public function shrinkComponents(event:MouseEvent = null):void
			{
				if (taskbarShrinkGrow.value == false)
					return;
					
				removeEventListener(MouseEvent.ROLL_OUT,  shrinkComponents);				
				
				// limit the smallest size to 2 pixels, otherwise grow/shrink doesn't work
				var scale:Number = Math.max(2, taskbarSmallIconSize.value) / taskbarLargeIconSize.value;

				for each (var component:MinimizedComponent in hbox.getChildren())
				{
					component.scaleX = scale;
					component.scaleY = scale;
				}
				
				addEventListener(MouseEvent.ROLL_OUT,  shrinkComponents);
			}	
			public function growComponents(event:MouseEvent = null):void
			{
				if (taskbarShrinkGrow.value == false)
					return;
				
				for each (var component:MinimizedComponent in hbox.getChildren())
				{
					component.scaleX = 1;
					component.scaleY = 1;
				}
			}
			
			public function addMinimizedComponent(component:UIComponent, restoreFunction:Function):MinimizedComponent
			{
				var clickListener:Function = function(e:MouseEvent):void
				{
					removeMinimizedComponent(minimizedComponent);
					restoreFunction();
				};
				var minimizedComponent:MinimizedComponent = new MinimizedComponent(
					[component],
					taskbarLargeIconSize.value,
					taskbarLargeIconSize.value,
					clickListener
				);
				
				hbox.addChild(minimizedComponent);
				hbox.validateNow();
				validateNow();
				hbox.visible = hbox.numChildren > 0;
				
				if (taskbarShrinkGrow.value)
					shrinkComponents();
				
				return minimizedComponent;
			}
			
			public function removeMinimizedComponent(minimizedComponent:MinimizedComponent):void
			{
				try
				{
					if (minimizedComponent.parent)
						minimizedComponent.parent.removeChild(minimizedComponent);
					hbox.visible = hbox.numChildren > 0;
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			public function cleanMinimizedComponentImage(minimizedComponent:MinimizedComponent):void
			{
				try
				{
					minimizedComponent.graphics.clear();
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			
			public function addMinimizedComponentGroup(components:Array, restoreFunctions:Array):MinimizedComponent
			{	
				var minimizedComponent:MinimizedComponent = new MinimizedComponent(
					components, 
					taskbarLargeIconSize.value, 
					taskbarLargeIconSize.value, 
					function(e:MouseEvent):void
					{
						removeMinimizedComponent(minimizedComponent);
						// restore all components
						for (var i:int = 0; i < components.length; i++)
							restoreFunctions[i]();
					}
				);
						
				hbox.addChild(minimizedComponent);
				hbox.validateNow();
				validateNow();
				hbox.visible = hbox.numChildren > 0;
				
				if (taskbarShrinkGrow.value)
					shrinkComponents();
								
				return minimizedComponent;
			}
			
			public function restoreAllComponents():void
			{
				for each (var component:MinimizedComponent in hbox.getChildren())
					component.clickListener(null);
			}
			
			private static var _instance:VisTaskbar = null;
			public static function get instance():VisTaskbar
			{
				if (_instance == null)
				{
					_instance = new VisTaskbar();
					_instance.initialize();
				}
				return _instance;
			}
		]]>
	</mx:Script>
</mx:Canvas>
