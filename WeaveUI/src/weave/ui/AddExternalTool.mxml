<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:TitleWindow
    xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns="weave.editors.managers.*"
    xmlns:ui="weave.ui.*"
    backgroundColor="#EFF4BC"
    title="{lang('Add external tool...')}">
    <mx:VBox>
    <mx:HBox>
        <mx:Label text="{lang('Tool Type')}"/>
        <mx:ComboBox id="toolTypeInput" editable="true" width="100%" toolTip="{lang('Select from the predefined list of external tools, or enter a new name for a class of tool.')}" 
            change="onToolTypeChange()"/>
        <mx:Label text="{lang('URL')}"/>
        <mx:TextInput id="toolUrlInput" editable="{toolTypeInput.selectedIndex == -1}" toolTip="{lang('Set the URL where the tool is located. The external tool must be on the same domain in order for it to communicate with Weave.')}"/>
    </mx:HBox>
    <mx:HBox>
        <mx:Button id="addButton" enabled="{!(toolTypeInput.text == '' || toolUrlInput.text == '')}" label="{lang('Add')}" click="onAdd()"/>
        <mx:Button id="cancelButton" label="{lang('Cancel')}" click="onCancel()"/>
    </mx:HBox>
    </mx:VBox>
        <mx:Script>
            <![CDATA[
                import mx.controls.Alert;
                import mx.managers.PopUpManager;
                
                import weave.Weave;
                import weave.api.getCallbackCollection;
                import weave.core.LinkableString;
                import weave.visualization.tools.ExternalTool;

                override protected function createChildren():void
                {
                    super.createChildren();

                    getCallbackCollection(Weave.properties.externalTools).addGroupedCallback(this, function():void 
                    { 
                        toolTypeInput.dataProvider = Weave.properties.externalTools.getNames();
                        onToolTypeChange();
                    }, true);
                }

                private function onToolTypeChange():void
                {
                    if (toolTypeInput.selectedIndex == -1) return;

                    var toolTypeEntry:LinkableString = Weave.properties.externalTools.getObject(toolTypeInput.selectedLabel) as LinkableString;

                    if (toolTypeEntry && toolTypeEntry.value)
                        toolUrlInput.text = toolTypeEntry.value;
                }




                private function onAdd():void
                {
                    var newName:String = WeaveAPI.globalHashMap.generateUniqueName(toolTypeInput.text);
                    var newTool:ExternalTool = WeaveAPI.globalHashMap.requestObject(newName, ExternalTool, false) as ExternalTool;
                    var newToolUrl:LinkableString;

                    if (!newTool) Alert.show(lang("Unexpected problem. Unable to create new external tool object."));

                    newToolUrl = newTool.getObject("toolUrl") as LinkableString;

                    if (!newToolUrl) Alert.show(lang("Unexpected problem. Unable to set external tool URL."));

                    newToolUrl.value = toolUrlInput.text;


                    if  (toolTypeInput.selectedIndex == -1) /* This means that we've entered a new toolType. Add it to the list. */
                    {
                        //
                    }

                    PopUpManager.removePopUp(this);

                    return;
                }

                private function onCancel():void
                {
                    PopUpManager.removePopUp(this);
                }

                public static function show():AddExternalTool
                {
                    var newDialog:AddExternalTool = new AddExternalTool();
                    newDialog.title = lang("Add External Tool");
                    PopUpManager.addPopUp(newDialog, WeaveAPI.topLevelApplication as DisplayObject, true);
                    PopUpManager.centerPopUp(newDialog);
                    return newDialog;
                }
            ]]>
        </mx:Script>
</mx:TitleWindow>