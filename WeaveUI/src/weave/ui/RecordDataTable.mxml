<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!--- @author kmanohar -->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml"
				title="{lang('Highlighted Records Table')}"
				>
	<mx:HDividedBox  height="100%" width="100%">
		<mx:VBox height="100%" width="20%">
			<mx:Text id="keytypeLabel" width="100%"/>
			<mx:List id="recordList"
					 width="100%" height="100%"
					 toolTip="{lang('Select a record')}"
					 labelFunction="getProbeHeaderText"
					 change="recordListChange(event)">
				
			</mx:List>
		</mx:VBox>
		<mx:DataGrid id="dataGrid" width="80%" height="100%">
			<mx:columns>
				<mx:DataGridColumn headerText="{lang('Attribute')}" dataField="{ATTRIBUTE}"/>
				<mx:DataGridColumn headerText="{lang('Value')}" dataField="{VALUE}"/>
				<mx:DataGridColumn headerText="{lang('DataTable')}" dataField="{DATATABLE}"/>
			</mx:columns>
		</mx:DataGrid>
	</mx:HDividedBox>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.api.copySessionState;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.reportError;
			import weave.data.KeySets.KeySet;
			import weave.utils.ProbeTextUtils;
			
			private static const ATTRIBUTE:String = 'attribute';
			private static const VALUE:String = 'value';
			private static const DATATABLE:String = 'dataTable';
			
			private var probedKeySet:KeySet = new KeySet() ;
			private var dataGridSource:ArrayCollection = new ArrayCollection([]);
			private var recordListSource:ArrayCollection = new ArrayCollection([]);
			private var resultObj:Object;
			
			/**
			 * copies the keySet paramater into private local probedKeySet using copySessionState()
			 * @param keySet KeySet object to copy
			 */
			public function setProbedKeySet(keySet:KeySet):void
			{
				recordListSource = new ArrayCollection([]);
				copySessionState(keySet,probedKeySet);
				for each(var key:IQualifiedKey in keySet.keys)
				{
					recordListSource.source.push(key);
				}
				keytypeLabel.text = lang("KeyType:") + "\n" + (keySet.keys[0] as IQualifiedKey).keyType;
				recordList.dataProvider = recordListSource;
				//probedRecords.lock();
			}
			
			private function refreshProbedRecordsTable(record:IQualifiedKey):void
			{
				dataGridSource = new ArrayCollection([]);
				var i:int = 0;
				var j:int = 0;
				for each( var key:IQualifiedKey in probedKeySet.keys)
				{
					if( key.localName == record.localName)  
					{
						// fill DataGrid using resultObj
						for each( var obj:Object in (resultObj.recordData as Array)[i])
						{
							var item:Object = {};
							item[ATTRIBUTE] = (resultObj.attributeColumnMetadata as Array)[j].name;
							item[VALUE] = obj;
							item[DATATABLE] = (resultObj.attributeColumnMetadata as Array)[j].dataTable;
							dataGridSource.source.push(item) ;
							j++;
						}
						break ;
					}
					i++;
				}
				this.dataGrid.dataProvider = dataGridSource;
			}
			
			public function handleGetRowResult(event:ResultEvent, token:Object = null):void
			{
				resultObj = new Object();
				resultObj = event.result;
				
				if(resultObj != null)
				{
					refreshProbedRecordsTable( probedKeySet.keys[0]) ;
				}
			}
			
			public function handleGetRowFault(event:FaultEvent, token:Object = null):void
			{
				reportError(event);
			}
			
			/**
			 * replaces a key's localName in recordList with its value in the first probe header column
			 * <br/>used as labelFunction for recordList
			 * @param item must be a IQualifiedKey
			 * @return probe header text for item IQualifiedKey
			 */
			public function getProbeHeaderText(item:Object):String
			{
				var result:String = '';
				var headerColumns:Array = ProbeTextUtils.probeHeaderColumns.getObjects(IAttributeColumn);
				for each(var header:IAttributeColumn in headerColumns)
				{
					result += header.getValueFromKey((item as IQualifiedKey), String);
				}
				return (result != '')? result:(item as IQualifiedKey).localName;
			}
			
			private function recordListChange(event:ListEvent):void
			{
				try {
					refreshProbedRecordsTable(List(event.target).selectedItem as IQualifiedKey);	
				} catch( e1:Error) {}
			}
		]]>
	</mx:Script>
</DraggablePanel>
