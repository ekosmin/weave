<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author skolman
@author adufilie
-->

<mx:Box label="{lang('Help')}"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui ="weave.ui.*"
	width="18" height="18"
	verticalAlign="middle" horizontalAlign="center">
	<mx:Metadata>
		[DefaultProperty("content")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.Button;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.managers.ToolTipManager;
			import mx.utils.StringUtil;
			
			import weave.compiler.StandardLib;
			import weave.utils.DrawUtils;
			
			use namespace mx_internal;
			
			[Embed(source='/weave/resources/images/info.png')]
			private static const InfoImage:Class;
			
			private var _button:Button;
			private var _helpChildren:Array;
			
			public function showHelp():void
			{
				if (_lastClickedHelpComponent != this)
					toggleHelpWindow(this);
			}
			
			override protected function createChildren():void
			{
				super.createChildren();
				
				// move any existing children to the _helpText variable
				if (numChildren > 0)
					_helpChildren = getChildren();
				removeAllChildren();
				
				// create the image and add that as the only child
				_button = new Button();
				//_button.toggle = true;
				_button.width = 14;
				_button.height = 14;
				_button.setStyle('cornerRadius', _button.width / 2);
				_button.setStyle('icon', InfoImage);
				_button.buttonMode = true;
				addChild(_button);
				
				// add event listeners
				addEventListener(
					MouseEvent.MOUSE_DOWN,
					function(event:Event):void
					{
						toggleHelpWindow(event.currentTarget as HelpComponent);
					}
				);
				addEventListener(
					MouseEvent.ROLL_OVER,
					function(event:Event):void
					{
						if (!_helpWindow)
							ToolTipManager.showDelay = 0;
					}
				);
				addEventListener(
					MouseEvent.ROLL_OUT,
					function(event:Event):void
					{
						ToolTipManager.showDelay = _tipDelay;
					}
				);
				var focusOut:Function = function(event:Event):void
				{
					if (event is KeyboardEvent && (event as KeyboardEvent).keyCode != Keyboard.ESCAPE)
						return;
					
					if (_lastClickedHelpComponent == event.currentTarget)
					{
						var focus:DisplayObject = focusManager.getFocus() as DisplayObject;
						if (focus && _helpWindow.contains(focus))
						{
							setFocus();
							_button.drawFocus(true);
						}							
						else
						{
							removeHelpWindow();
						}
					}
				};
				addEventListener(FocusEvent.FOCUS_OUT, focusOut);
				addEventListener(KeyboardEvent.KEY_DOWN, focusOut);
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				super.updateDisplayList(unscaledWidth, unscaledHeight);
				
				// draw invisible rectangle to capture mouse events
				graphics.clear();
				graphics.beginFill(0, 0);
				DrawUtils.clearLineStyle(graphics);
				graphics.drawRect(0, 0, unscaledWidth, unscaledHeight);
				graphics.endFill();
			}
			
			[CollapseWhiteSpace]
			[Inspectable(category="General", defaultValue="")]
			/**
			 * This specifies an XML string for the content of the help popup and the tooltip.
			 */
			public function set htmlText(value:String):void
			{
				setContent(value, true);
			}
			
			/**
			 * This specifies the content of the help popup and possibly the tooltip.
			 */
			public function set content(value:*):void
			{
				setContent(value, false);
			}
				
			private function setContent(value:*, asXML:Boolean):void
			{
				if (value is String)
					value = StandardLib.replace(StringUtil.trim(value), '\t', '');
				
				if (!value)
					return;
				
				toolTip = lang("Click for help");
				
				if (value is String)
				{
					// localization
					value = lang(value);
					
					var paragraph:Paragraph = new Paragraph();
					if (asXML)
					{
						paragraph.htmlText = value as String;
					}
					else
					{
						paragraph.text = value as String;
						toolTip = paragraph.text;
					}
					paragraph.addEventListener(FlexEvent.INITIALIZE, function(e:*):void {
						paragraph.selectable = true;
						paragraph.height = NaN;
						paragraph.width = 400;
					});
					
					value = [paragraph];
				}
				else if (value is Class)
				{
					value = [new value()];
				}
				else if (value is DisplayObject)
				{
					var displayObject:DisplayObject = value as DisplayObject;
					if (displayObject.parent)
						displayObject.parent.removeChild(displayObject);
					value = [value];
				}
				_helpChildren = value as Array;
			}
			
			/************************************************************************************
			 * 
			 * The stuff below is static because we only want one help window shown at a time.
			 * 
			 ************************************************************************************/
			
			private static var _tipDelay:Number = ToolTipManager.showDelay; 
			private static var _helpWindow:TitleWindow;
			private static var _lastClickedHelpComponent:HelpComponent;
			private static function toggleHelpWindow(helpComponent:HelpComponent):void
			{
				if (_helpWindow && _helpWindow.parent)
				{
					// remove existing window
					// if the same help component was clicked, don't reopen the window
					if (removeHelpWindow() == helpComponent)
						return;
				}
				
				_lastClickedHelpComponent = helpComponent;
				
				// draw focus
				helpComponent.setFocus();
				helpComponent._button.drawFocus(true);
				
				var helpChildren:Array = helpComponent._helpChildren;
				
				// show error if no children available
				if (!helpChildren || helpChildren.length == 0)
				{
					Alert.show(lang("No help available."), lang("Error"));
					return;
				}
				
				// create the popup
				var window:TitleWindow = PopUpManager.createPopUp(helpComponent, TitleWindow) as TitleWindow;
				_helpWindow = window;
				window.title = helpComponent.label;
				window.width = NaN;
				window.height = NaN;
				window.showCloseButton = true;
				window.setStyle("borderAlpha", 1.0);
				window.setStyle("borderThicknessTop", 2);
				window.setStyle("borderThicknessBottom", 2);
				window.setStyle("borderThicknessLeft", 2);
				window.setStyle("borderThicknessRight", 2);
				window.setStyle("cornerRadius", 0);
				window.getTitleBar().setStyle("headerHeight", 20);
				
				// add the children to the popup
				for (var i:int = 0; i < helpChildren.length; i++)
				{
					var component:UIComponent = helpChildren[i] as UIComponent;
					if (component)
					{
						window.addChild(component);
						component.validateNow();
					}
				}
				window.validateNow();
				
				var padding:int = 5;
				
				// align upper-left corner of popup with lower-right corner of HelpComponent
				var point:Point = helpComponent.localToGlobal(new Point(helpComponent.width, helpComponent.height));
				point.x += padding;
				point.y += padding;
				// adjust positon if help panel goes beyond the browser borders
				if (point.x + window.width > helpComponent.stage.stageWidth) // too far to the right
					point.x = Math.max(0, point.x - helpComponent.width - window.width - padding);
				if (point.y + window.height > helpComponent.stage.stageHeight) // too far down
					point.y = Math.max(0, point.y - helpComponent.height - window.height - padding);
				window.move(point.x, point.y);
				
				// when the user clicks the close button, remove the popup
				window.addEventListener(CloseEvent.CLOSE, removeHelpWindow);
			}
			
			/**
			 * This will remove the existing help window and clean up the static variables.
			 * @return The HelpComponent corresponding to the window that was removed.
			 */
			private static function removeHelpWindow(event:Event = null):HelpComponent
			{
				var window:TitleWindow = _helpWindow;
				var helpComponent:HelpComponent = _lastClickedHelpComponent;
				
				// clean up variables first in case of recursive calls
				_helpWindow = null;
				_lastClickedHelpComponent = null;
				
				if (window)
					PopUpManager.removePopUp(window);
				
				if (helpComponent)
				{
					helpComponent.focusManager.hideFocus();
					helpComponent._button.drawFocus(false);
				}

				return helpComponent;
			}
		]]>
	</mx:Script>
</mx:Box>
