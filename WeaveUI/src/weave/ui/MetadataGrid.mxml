<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
    xmlns:ui="weave.ui.*"
    xmlns="weave.ui.*"
    width="100%" height="100%">
    <mx:DataGrid id="grid" editable="true" width="100%" height="100%" minWidth="0">
        <mx:columns>
            <mx:DataGridColumn headerText="Property" labelFunction="labelFunction" editable="false" width="{grid.width/3}"/>
            <mx:DataGridColumn id="valueCol" headerText="Value" dataField="value" editable="true" editorDataField="text"/>
        </mx:columns>
    </mx:DataGrid>
	<Indent label="Add property:">
		<CustomComboBox id="newPropCombo" editable="true" enter="addProp();" change="if (newPropCombo.selectedIndex >= 0) addProp();" width="100%"/>
        <mx:Button id="addPropButton" label="Add property" click="addProp();" enabled="{enableAddPropertyButtonForProp(newPropCombo.text)}"/>
	</Indent>
	<mx:Metadata>
		[Event(name="metaChanged", type="flash.events.Event")]
	</mx:Metadata>
<mx:Script>
<![CDATA[
	import mx.collections.ArrayCollection;
	import mx.controls.TextInput;
	import mx.controls.dataGridClasses.DataGridColumn;
	import mx.events.CollectionEvent;
	import mx.events.DataGridEvent;
	import mx.utils.ObjectUtil;
	
	import weave.api.data.ColumnMetadata;
	import weave.compiler.StandardLib;
	import weave.core.UIUtils;
	import weave.utils.VectorUtils;
	
	/**
	 * Set this to the list of property names you want to display in the drop-down box for adding a new property. 
	 */
	[Bindable] public var selectablePropertyNames:Array = [];
	
	/**
	 * The name of a metadata property that should always be included in the list.
	 */
	public var defaultPropertyName:String;
	
	/**
	 * A Function like function(propName:String):Array returning an Array of suggested String values for the specified metadata property.
	 */
	public var getSuggestedPropertyValues:Function = ColumnMetadata.getSuggestedPropertyValues;
	
	private var textEditFactory:ClassFactory;
	private var comboEditFactory:ClassFactory;
	
	override protected function childrenCreated():void
	{
		super.childrenCreated();
		
		textEditFactory = new ClassFactory(TextInput);
		comboEditFactory = new ClassFactory(CustomComboBox);
		comboEditFactory.properties = {editable: true};
		
		grid.addEventListener(DataGridEvent.ITEM_EDIT_BEGIN, handleItemEditBegin);
		grid.addEventListener(DataGridEvent.ITEM_EDIT_END, dispatchMetaChanged);
	}
	
	private function handleItemEditBegin(event:DataGridEvent):void
	{
		event.preventDefault();
		
		if (!gridItems || grid.columns[event.columnIndex] != valueCol)
			return;
		
		var item:MetadataGridItem = gridItems.getItemAt(event.rowIndex) as MetadataGridItem;
		
		// construct an array of suggestions, putting the old value(s) up front
		var oldValues:Array = getOldValuesFromGridItem(item);
		if (getSuggestedPropertyValues != null)
			oldValues = VectorUtils.union(oldValues, getSuggestedPropertyValues(item.property));
		if (oldValues.length > 1)
		{
			valueCol.itemEditor = comboEditFactory;
			grid.createItemEditor(event.columnIndex, event.rowIndex);
			var comboBox:CustomComboBox = grid.itemEditorInstance as CustomComboBox;
			comboBox.setStyle('fontWeight', 'normal');
			
			comboBox.dataProvider = VectorUtils.union([item.oldValue], oldValues);
			comboBox.selectedIndex = -1;
			comboBox.text = String(item.value);
			comboBox.setFocus();
		}
		else
		{
			valueCol.itemEditor = textEditFactory;
			grid.createItemEditor(event.columnIndex, event.rowIndex);
			var textInput:TextInput = grid.itemEditorInstance as TextInput;
			textInput.text = String(item.value);
			textInput.setFocus();
			textInput.setSelection(0, int.MAX_VALUE);
		}
		
		var event:DataGridEvent = new DataGridEvent(DataGridEvent.ITEM_FOCUS_IN);
		event.columnIndex = event.columnIndex;
		event.rowIndex = event.rowIndex;
		event.itemRenderer = grid.itemEditorInstance;
		dispatchEvent(event);
	}
	
	/**
	 * @return An Array of MetadataGridItem objects.
	 */
	private function get gridItems():ArrayCollection
	{
        return grid.dataProvider as ArrayCollection;
	}
	
    private function dispatchMetaChanged(o:Object = null):void
    {
        dispatchEvent(new Event("metaChanged"));
    }
    private static function labelFunction(item:MetadataGridItem, column:DataGridColumn):String
    {
		if (item.changed)
			return lang("*{0}", item.property);
		return item.property;
    }
	
	[Bindable(event="metaChanged")] public function get metadataChanged():Boolean
	{
		for each (var item:MetadataGridItem in gridItems)
			if (item.changed)
				return true;
		return false;
	}
	
    [Bindable(event="metaChanged")] public function get metadata():Object
    {
        var result:Object = {};
        for each (var item:MetadataGridItem in gridItems)
			if (item.changed)
                result[item.property] = item.value || null; // avoid empty strings
		
        return result;
    }
    public function set metadata(values:Object):void
    {
		if (values)
		{
	        var items:Array = new Array();
			if (values && defaultPropertyName && !values.hasOwnProperty(defaultPropertyName))
				items.push(new MetadataGridItem(defaultPropertyName));
	        for (var prop:String in values)
				if (propertyIgnoreList.indexOf(prop) < 0)
					items.push(new MetadataGridItem(prop, values[prop]));
			StandardLib.sort(items, propertySort);
	        grid.dataProvider = items;
	        gridItems.addEventListener(CollectionEvent.COLLECTION_CHANGE, dispatchMetaChanged);
			updateMissingPropNames();
	        dispatchMetaChanged();
		}
		else if (gridItems && gridItems.length)
		{
			grid.dataProvider = null;
			newPropCombo.dataProvider = null;
			dispatchMetaChanged();
		}
    }
	private function enableAddPropertyButtonForProp(prop:String):Boolean
	{
		return (prop && propertyIgnoreList.indexOf(prop) < 0) ? true : false
	}
    public function addProp():void
    {
        var prop:String = newPropCombo.text;
		
		if (!enableAddPropertyButtonForProp(prop))
			return;
		
        newPropCombo.text = null;
        if (!prop)
		{
            UIUtils.componentPulse(newPropCombo);
			return;
		}
		
		if (indexOfItemWithProperty(gridItems.source, 'property', prop) < 0)
		{
            gridItems.addItem(new MetadataGridItem(prop));
			updateMissingPropNames();
	        dispatchMetaChanged();
		}
		
		openEditor(prop);
    }
	private function updateMissingPropNames():void
	{
		var missingPropNames:Array = selectablePropertyNames.concat();
		for each (var item:MetadataGridItem in gridItems)
		{
			// exclude this prop from missingPropNames
			var index:int = missingPropNames.indexOf(item.property);
			if (index >= 0)
				missingPropNames.splice(index, 1);
		}
		StandardLib.sort(missingPropNames, propertySort);
		newPropCombo.dataProvider = missingPropNames;
		newPropCombo.selectedIndex = -1;
	}
	
	private function indexOfItemWithProperty(array:Array, property:String, value:String):int
	{
		for (var i:int = 0; i < array.length; i++)
			if (array[i][property] == value)
				return i;
		return -1;
	}
	private function openEditor(property:String):void
	{
		grid.editedItemPosition = {
			rowIndex: indexOfItemWithProperty(gridItems.source, 'property', property),
			columnIndex: grid.columns.indexOf(valueCol)
		};
	}
	
	/**
	 * This function compares two MetadataGridItem objects by comparing the property names.
	 * Items will be sorted according to preferredMetadataOrder.
	 * @param a The first value to compare, either a MetadataGridItem or a String.
	 * @param b The second value to compare, either a MetadataGridItem or a String.
	 * @return A value of -1, 0, or 1, which is used by Array.sort().
	 */
	private function propertySort(a:Object, b:Object):int
	{
		if (a is MetadataGridItem)
			a = (a as MetadataGridItem).property;
		if (b is MetadataGridItem)
			b = (b as MetadataGridItem).property;
		var order:Array = preferredMetadataOrder;
		var ia:int = order.indexOf(a);
		var ib:int = order.indexOf(b);
		if (ia >= 0 && ib >= 0)
			return ObjectUtil.numericCompare(ia, ib);
		if (ia >= 0)
			return -1;
		if (ib >= 0)
			return 1;
		
		return ObjectUtil.stringCompare(a as String, b as String, true);
	}
	public var preferredMetadataOrder:Array = [];
	public var propertyIgnoreList:Array = [];
	
	
	private static const VALUES:String = 'values';
	private static function getOldValuesFromGridItem(item:MetadataGridItem):Array
	{
		if (typeof item.oldValue == 'object')
			return item.oldValue[VALUES];
		return [item.oldValue];
	}
	public static function combineMetadata(newValuesInput:Object, combinedValuesOutput:Object):void
	{
		// loop over keys in both objects since they may not have the same keys
		for each (var arg:Object in arguments)
		{
			for (var name:String in arg)
			{
				if (newValuesInput[name] != combinedValuesOutput[name])
				{
					var object:Object = combinedValuesOutput[name];
					if (!object || typeof object != 'object')
					{
						var value:String = object as String;
						object = {toString: lang('(Multiple values)').toString};
						object[VALUES] = [value || ''];
					}
					object[VALUES] = VectorUtils.union(object[VALUES], [newValuesInput[name]]);
					combinedValuesOutput[name] = object;
				}
			}
		}
	}
]]>
</mx:Script>
</mx:VBox>

