<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*"
				   xmlns:editors="weave.editors.*"
				   implements="weave.api.ui.ISelectableAttributes"
				   layout="absolute" width="25%" height="20%">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.data.IKeySet;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableFunction;
			import weave.core.UIUtils;
			import weave.data.KeySets.KeySet;
			import weave.editors.WindowSettingsEditor;
			import weave.utils.ProbeTextUtils;
			
			public function getSelectableAttributes():Array
			{
				return (controlPanel as ProbeToolTipEditor).getSelectableAttributes();
			}
			public function getSelectableAttributeNames():Array
			{
				return (controlPanel as ProbeToolTipEditor).getSelectableAttributeNames();
			}
			
			public const dynamicKeySet:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(IKeySet), updateText, true);
			public const useHtmlText:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateText, true);
			public const htmlFormatter:LinkableFunction = registerLinkableChild(this, new LinkableFunction('`<font size="15" face="_sans"><b>{header}</b>\n{data}</font>`', true, false, ['header', 'data']), updateText, true);
			
			private function get keySet():IKeySet
			{
				return dynamicKeySet.internalObject as IKeySet;
			}
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				dynamicKeySet.targetPath = [Weave.DEFAULT_PROBE_KEYSET];
				getCallbackCollection(ProbeTextUtils.probeHeaderColumns).addGroupedCallback(this, updateText);
				getCallbackCollection(ProbeTextUtils.probedColumns).addGroupedCallback(this, updateText, true);
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				ProbeTextUtils.probeLineFormatter.addGroupedCallback(this, updateText);
				linkBindableProperty(useHtmlText, useHtmlTextCheck, 'selected');
				
				UIUtils.linkVisibility(this, useHtmlText, htmlTextArea);
				UIUtils.linkVisibility(this, useHtmlText, textArea, true);
				Weave.properties.mouseoverTextFormat.bindStyle(this, textArea);
				
				WeaveAPI.globalHashMap.childListCallbacks.addGroupedCallback(this, function():void {
					keySetCombo.dataProvider = WeaveAPI.globalHashMap.getNames(KeySet);
					keySetCombo.selectedItem = dynamicKeySet.globalName;
				}, true);
				
				editor.formatVBox.addChildAt(useHtmlTextCheck, 0);
				htmlFormatIndent.group = useHtmlTextCheck.parent;
				useHtmlTextCheck.indent = 0;
				
				var windowEditor:WindowSettingsEditor = new WindowSettingsEditor();
				windowEditor.target = this;
				controlPanel.children = [windowEditor];
				windowEditor.addChild(additionalWindowSettings)
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Mouseover Information");
			}
			
			private function updateText():void
			{
				var str:String = '';
				if (keySet && keySet.keys.length > 0)
					str = ProbeTextUtils.getProbeText(keySet.keys);
				if (useHtmlText.value)
				{
					try
					{
						textArea.text = '';
						var lines:Array = str.split('\n');
						htmlTextArea.htmlText = htmlFormatter.call(null, lines.shift(), lines.join('\n'));
					}
					catch (e:Error)
					{
						htmlTextArea.htmlText = e.toString();
					}
				}
				else
				{
					textArea.text = str;
					htmlTextArea.htmlText = '';
				}
			}
		]]>
	</mx:Script>
	<mx:TextArea id="textArea" height="100%" width="100%" backgroundAlpha="0" editable="false"/>
	<mx:TextArea id="htmlTextArea" height="100%" width="100%" backgroundAlpha="0" editable="false"/>
	
	<!-- controlPanel -->
	<ui:ProbeToolTipEditor id="editor" backgroundColor="0xCCCCCC" showEnableCheckBox="false"/>
	<mx:VBox id="additionalWindowSettings">
		<ui:Indent label="{lang('Linked KeySet:')}">
			<ui:CustomComboBox id="keySetCombo"
							   change="if (UIUtils.hasFocus(keySetCombo)) dynamicKeySet.globalName = keySetCombo.selectedItem as String;"/>
		</ui:Indent>
	</mx:VBox>
	<ui:CheckBoxWithNestedOptions id="useHtmlTextCheck" label="{lang('Enable HTML formatting')}"
								  change="editor.formatIndent.label = lang(useHtmlTextCheck.selected ? 'Format data values' : 'Format');">
		<ui:Indent id="htmlFormatIndent" label="{lang('HTML Format')}" height="100%">
			<mx:TextArea width="100%" height="100%" minHeight="48"
						 creationComplete="linkBindableProperty(htmlFormatter, event.target, 'text');"/>
			<mx:VBox>
				<mx:Button label="{lang('Reset')}" click="ProbeTextUtils.probeLineFormatter.value = ProbeTextUtils.DEFAULT_LINE_FORMAT;"/>
				<mx:Button label="{lang('Help (tags)')}" click="navigateToURL(new URLRequest('http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/text/TextField.html#htmlText'), '_blank');"/>
			</mx:VBox>
		</ui:Indent>
	</ui:CheckBoxWithNestedOptions>
</ui:DraggablePanel>
