<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---	
A text editor to change the Session State on the fly.
@author skolman
@author adufilie
@author kmonico
-->
<ui:DraggablePanel
    xmlns:ui ="weave.ui.*"
    xmlns:mx="http://www.adobe.com/2006/mxml"
    title="{lang('Session State Editor')}"
	backgroundColor="#EFF4BC"
	escapeKeyClosesPanel="true"
    >
	<mx:VDividedBox id="vDividedBox" width="100%" height="100%" liveDragging="true">
	    <mx:VBox horizontalScrollPolicy="off" verticalScrollPolicy="off" width="100%" height="100%"
				 paddingBottom="5" paddingTop="5" paddingRight="5" paddingLeft="5">
			<mx:HBox width="100%">
				<mx:Button label="{lang('Reload')}" toolTip="{lang('Reloads to previous save state')}" click="refresh()" paddingLeft="5" paddingRight="5"/>
				<mx:Button label="{lang('Apply')}" click="handleApplyClick()" paddingLeft="5" paddingRight="5"/>
				<mx:Button label="{lang('Save &amp; Close')}" click="saveAndClosePanel()" paddingLeft="5" paddingRight="5"/>
				<mx:Button label="{lang('Cancel')}" click="removePanel()" paddingLeft="5" paddingRight="5"/>
			</mx:HBox>
			<mx:HDividedBox width="100%" height="100%">
				<mx:VBox id="listVBox" width="100%" height="100%">
					<!--<mx:Label paddingTop="5" fontWeight="bold" text="Object Hierarchy"/>-->
					<!--<CustomComboBox maxWidth="{listVBox.width}" id="linkableObjectTypeComboBox" toolTip="select filter to list by session object type" change="handlelinkableObjectTypeFilterSelect(event)"/>-->
	 				<ui:SessionNavigator id="sessionNav" height="100%" horizontalScrollPolicy="auto" width="100%"/>
					<mx:HBox width="100%" id="linkControls" horizontalScrollPolicy="off" backgroundAlpha="0">
	 					<mx:TextInput id="linkNameInput" width="100%"/>
						<ui:HelpComponent>
							Type the name of a global object, then click the "Link" button to link the selected dynamic object to it.
							Multiple dynamic objects can be linked to the same global object this way.
							
							Use the "Nested unlink" button when you want to unlink a tool from the global color mapping.
							This will recursively unlink all nested DynamicColumn objects.
							Once that is done, you can link the new color mapping to a new global name so that multiple tools can be linked to the new color mapping.
							To link multiple tools, you will have to locate the color mapping in each tool and repeat the process.
						</ui:HelpComponent>
	 					<mx:Button label="{lang('Link')}" click="linkSelectedObject();"/>
	 					<mx:Button label="{lang('Unlink')}" click="linkNameInput.text = ''; linkSelectedObject();"/>
	 					<mx:Button id="nestedUnlinkButton" label="{lang('Nested unlink')}" click="unlinkNestedColumns()"/>
	 				</mx:HBox>
				</mx:VBox>
				<mx:VBox width="100%" height="100%" horizontalScrollPolicy="off">
					<mx:HBox width="100%" horizontalAlign="right">
						<ui:TextInputWithPrompt id="search" prompt="{lang('Enter search text')}" enter="highlightSearchText(false)" change="searchTermChanged()" width="100%" minWidth="100"/>
						<mx:Button label="{lang('Search')}" click="highlightSearchText(true)" repeatDelay="1"/>
					</mx:HBox>
					<ui:CustomViewStack id="editors" width="100%" height="100%">
						<mx:VBox width="100%" height="100%">
							<mx:HBox width="100%" verticalAlign="middle">
								<mx:Label id="firstLine" fontFamily="_typewriter"/>
								<mx:Spacer width="100%"/>
								<mx:Button label="{lang('Copy path')}" click="copyPathToClipboard();"/>
								<mx:Button label="{lang('Copy state')}" click="copyToClipboard();"/>
							</mx:HBox>
							<ui:CodeEditor id="textEditor" focusIn="handleEditorFocusIn()" change="handleTextAreaChange()" wordWrap="{wordWrap.selected}"/>
							<mx:Label id="lastLine" fontFamily="_typewriter"/>
						</mx:VBox>
						<mx:VBox width="100%" height="100%">
							<mx:HBox width="100%">
								<mx:Spacer width="100%"/>
								<mx:Button label="{lang('Copy path')}" click="copyPathToClipboard();"/>
							</mx:HBox>
							<mx:DataGrid id="gridEditor" wordWrap="false" editable="true" focusIn="handleEditorFocusIn()" fontAntiAliasType="normal" fontSize="11"
										 fontFamily="_typewriter" itemEditEnd="handleDataGridChange(event)" width="100%" height="100%" verticalScrollPolicy="auto" 
										 horizontalScrollPolicy="auto" variableRowHeight="false" rowHeight="24"/> 
						</mx:VBox>
					</ui:CustomViewStack>
					<mx:HBox width="100%">
						<mx:CheckBox id="preferDataGrid" label="{lang('Prefer grid view')}"
									 click="handlePreferDGChange()"
									 toolTip="{lang('Check this box to prefer the grid view when possible.')}"
									 enabled="{!useJSON.selected}"
									 selected="true"/>
						<mx:CheckBox id="useJSON" label="{lang('Edit as JSON')}"
									 change="if (useJSON.selected) preferDataGrid.selected = false; loadSessionStateInView()"
									 selected="false"/>
						<mx:CheckBox id="wordWrap" label="{lang('Word wrap')}" selected="false"/>
						<mx:Spacer width="100%"/>
						<mx:Button id="showConsole" label="{lang('Show console')}" toggle="true" selected="{console.height > 0}" click="toggleShowConsole()"/>
					</mx:HBox>
				</mx:VBox>
			</mx:HDividedBox>
		</mx:VBox>
		<ui:Console id="console" height="0"/>
	</mx:VDividedBox>
	<mx:Script>
		<![CDATA[
			import flash.desktop.Clipboard;
			import flash.desktop.ClipboardFormats;
			
			import mx.binding.utils.BindingUtils;
			import mx.collections.ArrayCollection;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.INavigatorContent;
			import mx.core.mx_internal;
			import mx.events.DataGridEvent;
			import mx.utils.ObjectUtil;
			
			import weave.Weave;
			import weave.api.core.DynamicState;
			import weave.api.core.ILinkableDynamicObject;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.core.ILinkableVariable;
			import weave.api.data.IColumnWrapper;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.getLinkableOwner;
			import weave.api.getSessionState;
			import weave.api.objectWasDisposed;
			import weave.api.reportError;
			import weave.api.setSessionState;
			import weave.compiler.Compiler;
			import weave.core.ClassUtils;
			import weave.core.LinkableDynamicObject;
			import weave.core.LinkableString;
			import weave.core.LinkableSynchronizer;
			import weave.core.StageUtils;
			import weave.core.WeaveXMLDecoder;
			import weave.core.WeaveXMLEncoder;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.ExtendedDynamicColumn;
			import weave.menus.WeaveContextMenu;
			import weave.primitives.WeaveTreeItem;
			import weave.utils.ColumnUtils;
			import weave.utils.DebugUtils;
			import weave.utils.EventUtils;
			import weave.utils.PopUpUtils;
			use namespace mx_internal;

		    private var _needRefresh:Boolean = false;
		    private const refreshTimer:Timer = new Timer(200, 0);
			private var autoRefresh:Boolean = false;
		    private var _textModified:Boolean = false;
			
			private var _currentSelectedObject:ILinkableObject = null;
			private var _currentSessionStateXML:XML = null;
			private var _currentSessionStateDataProvider:ArrayCollection = null; 
			
			private var _textStartSearchIndex:int = 0;
			private var _gridStartSearchIndex:int = 0; 
			
			private static const DATA_GRID:String = 'DataGrid';
			private static const TEXT_EDITOR:String = 'TextArea';
			private const NAME_FIELD:String = "Name";
			private const VALUE_FIELD:String = "Value";
			private var _editor:String = DATA_GRID;
			private const _nameColumn:DataGridColumn = new DataGridColumn(NAME_FIELD);
			private const _valueColumn:DataGridColumn = new DataGridColumn(VALUE_FIELD);
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				_nameColumn.headerText = lang(NAME_FIELD);
				_valueColumn.headerText = lang(VALUE_FIELD);
			}
			
			override public function reposition():void
			{
				panelWidth.value = "900";
				panelHeight.value = "500";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				refreshTimer.addEventListener(TimerEvent.TIMER, handleRefreshTimer);
				refreshTimer.start();
				
				//handle keyboard event CTRL +F to Search Box
				this.addEventListener(KeyboardEvent.KEY_DOWN, handleCtrlFPressEvent)
				
				var handler:Function = EventUtils.generateDelayedCallback(this, handleSessionNavSelect, 0);
				BindingUtils.bindSetter(handler, sessionNav, "selectedItem");
				BindingUtils.bindSetter(handler, sessionNav, "selectedItems");
				
				sessionNav.addEventListener(KeyboardEvent.KEY_UP, confirmDeleteSelectedItem);
				
				changeView(_editor);
				_nameColumn.editable = false;
				_nameColumn.width = 192;
				loadSelectedSessionObjectInView();
				
				textEditor.getTextField().alwaysShowSelection = true;
				
				sessionNav.contextMenu = WeaveContextMenu.create([
					{
						shown: isObjectSelected,
						label: lang('Copy path to selected object'),
						click: copyPathToClipboard
					}, {
						shown: isObjectSelected,
						label: lang('Link session state with another object'),
						click: linkStatePath
					}, {
						shown: isObjectSelected,
						label: lang('Watch selected object'),
						click: function():void { DebugUtils.watch(sessionNav.getSelectedLinkableObject()); }
					}, {
						shown: isObjectSelected,
						label: lang('Delete selected object'),
						click: deleteSelectedItem
					}
				]);
		    }
			
			private function isObjectSelected():Boolean
			{
				return sessionNav.getSelectedLinkableObject() != null;
			}
			
			public function setRootObject(rootObject:ILinkableObject):void
			{
				if (sessionNav.rootObject)
				{
					getCallbackCollection(sessionNav.rootObject).removeCallback(handleRootObjectDispose);
				}
				
				if (objectWasDisposed(rootObject))
					rootObject = null;
				
				sessionNav.rootObject = rootObject;
				
				if (rootObject)
				{
					getCallbackCollection(rootObject).addDisposeCallback(this, handleRootObjectDispose);
					refresh();
				}
				else
				{
					_currentSelectedObject = null;
					_textModified = false;
					_needRefresh = false;
					autoRefresh = false;
					refresh();
					removePanel();
				}
			}
			
			private function handleRootObjectDispose():void
			{
				setRootObject(null);
			}
			
			private function handleRefreshTimer(event:TimerEvent):void
		    {
				if (objectWasDisposed(this))
					return;
				
				if (visible && parent && autoRefresh && !_textModified && detectLinkableObjectChange(handleRefreshTimer, _currentSelectedObject)) 
					loadSelectedSessionObjectInView();
		    }
			
			private function handleEditorFocusIn():void
			{
				autoRefresh = true;
			}

			private function handleTextAreaChange():void
		    {
		    	_textModified = true;
		    }
		    
			public function refresh():void
			{
				if (_textModified == false || objectWasDisposed(_currentSelectedObject))
				{
					loadSelectedSessionObjectInView();
					return;
				}
				
				_textModified = false;
				var functionSave:Function = function():void 
				{ 
					try
					{
						saveSessionState(); 
					}
					catch (e:Error)
					{
						reportError(e);
					}
				};
				askToSave(functionSave, loadSelectedSessionObjectInView);
			}
			
			private function askToSave(save:Function, discard:Function):void
			{
				PopUpUtils.confirm(
					this,
					lang("Save?"),
					lang("Session state has been changed.  Save Changes?"),
					save, discard,
					lang('Save'), lang('Discard')
				);
			}

			private function loadSelectedSessionObjectInView(object:ILinkableObject = null):void
			{
				// to avoid a flex error, make sure the dataGrid has no selected items
				if (_editor == DATA_GRID)
				{
					gridEditor.selectedItems = [];
				}
				
				_needRefresh = false;

				if (sessionNav.selectedTreeItem == null && object == null)
				{
					// clear and disable view
					if (_editor == TEXT_EDITOR)
					{
						textEditor.text = '';
					}
					else if (_editor == DATA_GRID)
					{
						var item:Object = {};
						item[NAME_FIELD] = '';
						item[VALUE_FIELD] = ' ';
						gridEditor.dataProvider = [item];
					}
					editors.enabled = false;
					return;
				}

				// enable view
				editors.enabled = true;
				
				if (object != null)
					_currentSelectedObject = object;
				else
					_currentSelectedObject = sessionNav.selectedTreeItem.data as ILinkableObject;

				loadSessionStateInView();
				_textModified = false;
			}
			
			private function loadSessionStateInView():void
			{
				var sessionState:Object = _currentSelectedObject ? getSessionState(_currentSelectedObject) : null;
				if (_currentSelectedObject is ILinkableVariable || _currentSelectedObject is ILinkableDynamicObject)
					changeView(TEXT_EDITOR);
				else
					changeView( preferDataGrid.selected ? DATA_GRID : TEXT_EDITOR );
				
				if (_editor == TEXT_EDITOR)
				{
					var vsp:Number = textEditor.verticalScrollPosition;
					var hsp:Number = textEditor.horizontalScrollPosition;
					
					if (_currentSelectedObject is LinkableString)
					{
						_currentSessionStateXML = null;
						textEditor.text = sessionState as String;
						
						firstLine.text = '';
						lastLine.text = '';
					}
					else if (useJSON.selected)
					{
						_currentSessionStateXML = null;
						textEditor.text = Compiler.stringify(sessionState, null, 2, true);
						
						firstLine.text = '';
						lastLine.text = '';
					}
					else
					{
						_currentSessionStateXML = WeaveXMLEncoder.encode(sessionState, "SessionState");
						textEditor.text = _currentSessionStateXML.children().toXMLString();
						
						var xmlCopy:XML = _currentSessionStateXML.copy();
						xmlCopy.setChildren(<dummy/>);
						var xmlLines:Array = xmlCopy.toString().split('\n');
						firstLine.text = xmlLines[0];
						lastLine.text = xmlLines[xmlLines.length - 1];
					}
					textEditor.validateNow();
					textEditor.verticalScrollPosition = vsp;
					textEditor.horizontalScrollPosition = hsp;
				}
				else if (_editor == DATA_GRID)
				{
					var tempValue:Object;
					var dataGridProvider:ArrayCollection = new ArrayCollection();
					var childObject:ILinkableObject;
					
					for each (var node:WeaveTreeItem in sessionNav.selectedTreeItem.children)
					{
						childObject = node.data as ILinkableObject;
						if (childObject is ILinkableVariable)
						{
							tempValue = getSessionState(childObject);
							if (tempValue === null || (tempValue as String) === '')
								tempValue = ' ';
							if (typeof tempValue == 'object')
								continue;
							var item:Object = {};
							item[NAME_FIELD] = node.label;
							item[VALUE_FIELD] = tempValue.toString();
							dataGridProvider.addItem(item);
						}
					}
					
					var grid_vsp:Number = gridEditor.verticalScrollPosition;
					_currentSessionStateDataProvider = dataGridProvider;
					gridEditor.columns = [ _nameColumn, _valueColumn ];
					gridEditor.dataProvider = dataGridProvider;
					gridEditor.editable = true;
					gridEditor.variableRowHeight = false;
					gridEditor.wordWrap = false;
					gridEditor.validateNow();
					gridEditor.verticalScrollPosition = grid_vsp;
				}
			}
			
			private function unlinkNestedColumns():void
			{
				var selected:IColumnWrapper = sessionNav.getSelectedLinkableObject() as IColumnWrapper;
				if (!selected)
				{
					reportError('Please select a DynamicColumn.');
					return;
				}
				ColumnUtils.unlinkNestedColumns(selected);
				refresh();
			}

		    private function linkSelectedObject():void
		    {
				var dynamicObject:LinkableDynamicObject = sessionNav.getSelectedLinkableObject() as LinkableDynamicObject;
		    	if (dynamicObject)
		    	{
		    		dynamicObject.globalName = linkNameInput.text.length > 0 ? linkNameInput.text : null;
		    		refresh();
		    	}
		    }
			private function handleSessionNavSelect():void
			{
				var selectedTreeItem:WeaveTreeItem = sessionNav.selectedTreeItem;
				var vsp:Number = gridEditor.verticalScrollPosition;
				if (selectedTreeItem)
				{
					if (console.context == selectedTreeItem.data)
						return; // no change
					console.context = selectedTreeItem.data;
				}
				else
					console.context = null;
				
				var dynamicObject:LinkableDynamicObject = sessionNav.getSelectedLinkableObject() as LinkableDynamicObject;
				if (dynamicObject)
				{
					linkNameInput.text = dynamicObject.globalName;
					linkControls.enabled = true;
					nestedUnlinkButton.enabled = dynamicObject is IColumnWrapper;
				}
				else
				{
					linkNameInput.text = '';
					linkControls.enabled = false;
				}
				
				refresh();
				
				gridEditor.verticalScrollPosition = vsp;
			}
			
		    private function handleApplyClick():void
		    {
				saveSessionState();
				refresh();
		    }

			private function highlightSearchText(switchFocus:Boolean):Boolean
			{
				var i:int;
				var searchTerm:String = search.text.toLowerCase();
				if (_editor == TEXT_EDITOR)
				{
					var text:String = textEditor.text.toLowerCase();
					// search through the text
					for (i = 0; i < 2; i++) // 
					{
						_textStartSearchIndex = text.indexOf(searchTerm, _textStartSearchIndex + 1); // +1 so it won't find the same thing twice 
						if (_textStartSearchIndex >= 0)
						{
							textEditor.setSelection(_textStartSearchIndex, _textStartSearchIndex+searchTerm.length);
							if (switchFocus)
								textEditor.setFocus();
							return true;
						}
						//end of file reached. start search again.
					}
				}
				else if (_editor == DATA_GRID && _currentSessionStateDataProvider !== null)
				{
					// this loop is to make sure we wrap around to find it
					for (var j:int = 0; j < 2; ++j)
					{
						var rows:Array = _currentSessionStateDataProvider.source;
						
						for (i = _gridStartSearchIndex + 1; i < rows.length; ++i)
						{
							var row:Object = rows[i];
							for each (var string:String in row)
							{
								if (string === null)
									continue;
								_gridStartSearchIndex = string.toLowerCase().indexOf(searchTerm);
								if (_gridStartSearchIndex >= 0)
								{
									_gridStartSearchIndex = i;
									gridEditor.selectedIndex = i;
									gridEditor.validateNow();
									gridEditor.scrollToIndex(i);
									return true;
								}
							}
						}
					}
				}
				
				Alert.show(lang("Not found: ")+searchTerm, lang("Search"));
				return false;
			}
			
			private function searchTermChanged():void
			{
				_textStartSearchIndex = -1;
				_gridStartSearchIndex = -1;
			}
			
			private function handleCtrlFPressEvent(event:KeyboardEvent):void
			{
				if (event.ctrlKey && event.keyCode == 70)
				{
					search.setFocus();
				}
			}
			
			private function confirmDeleteSelectedItem(event:KeyboardEvent):void
			{
				if (event.keyCode == Keyboard.DELETE || event.keyCode == Keyboard.BACKSPACE)
				{
					var item:WeaveTreeItem = sessionNav.selectedTreeItem;
					if (!item)
						return;
					var parent:ILinkableObject = getLinkableOwner(item.data as ILinkableObject);
					if (!parent)
						return;
					var hashMap:ILinkableHashMap = parent as ILinkableHashMap;
					var dynamicObject:ILinkableDynamicObject = parent as ILinkableDynamicObject;
					if (hashMap || dynamicObject)
						PopUpUtils.confirm(this, lang("Confirm Delete"), lang("Delete Selected Item?"), deleteSelectedItem, null, lang('Delete'), lang('Cancel'));
				}
			}
			
			private function deleteSelectedItem():void
			{
				var item:WeaveTreeItem = sessionNav.selectedTreeItem;
				if (!item)
					return;
				var parent:ILinkableObject = getLinkableOwner(item.data as ILinkableObject);
				if (!parent)
					return;
				var hashMap:ILinkableHashMap = parent as ILinkableHashMap;
				var dynamicObject:ILinkableDynamicObject = parent as ILinkableDynamicObject;
				
				var oldObject:ILinkableObject = item.data as ILinkableObject;
				if (hashMap)
					hashMap.removeObject(hashMap.getName(oldObject));
				else if (dynamicObject)
					dynamicObject.removeObject();
				
				if (objectWasDisposed(oldObject))
					refresh();
				else
					Alert.show(lang("Object is locked and cannot be deleted."), lang("Delete Failed"));
			}

			private function handleDataGridChange(event:DataGridEvent):void
			{
				var row:int = int(event.rowIndex);
				var element:String = gridEditor.dataProvider.getItemAt(row)[NAME_FIELD];
				var oldValue:String = gridEditor.dataProvider.getItemAt(row)[VALUE_FIELD];
				var newValue:String = gridEditor.itemEditorInstance[gridEditor.columns[event.columnIndex].editorDataField];
				newValue = newValue.replace(/(\r\n)|\r/gm, "\n");
				gridEditor.itemEditorInstance[gridEditor.columns[event.columnIndex].editorDataField] = newValue;

				if ( oldValue != newValue ) 
					_textModified = true;
			}

			private function handlePreferDGChange():void
			{
				var newEditor:String = preferDataGrid.selected ? DATA_GRID : TEXT_EDITOR;
				changeView(newEditor);
				loadSelectedSessionObjectInView();
			}
			
			private function changeView(newValue:String = null):void
			{
				if (newValue == null)
					newValue = _editor == DATA_GRID ? TEXT_EDITOR : DATA_GRID;
				_editor = newValue;
				editors.selectedChild = (_editor == DATA_GRID ? gridEditor.parent : textEditor.parent) as INavigatorContent;
				//loadSelectedSessionObjectInView();
			}
			
			private function saveSessionState():void
		    {
				_textModified = false;
				
				if (objectWasDisposed(_currentSelectedObject))
				{
					refresh();
					return;
				}
				
				try
				{
					if (_currentSelectedObject != null)
					{
						if (_editor == TEXT_EDITOR)
						{
							// Note: use === to work around bug with (<tag>null</tag> == null) evaluating to true
							if (_currentSelectedObject is LinkableString)
							{
								setSessionState(_currentSelectedObject, textEditor.text);
							}
							else if (useJSON.selected)
							{
								var fromJson:Object;
								var json:Object = ClassUtils.getClassDefinition('JSON');
								if (json)
									fromJson = json.parse(textEditor.text);
								else
									fromJson = Compiler.parseConstant(textEditor.text);
								setSessionState(_currentSelectedObject, fromJson);
							}
							else
							{
								var xml:XML = XML(firstLine.text + textEditor.text + lastLine.text); // will throw error if xml is invalid
								var decodedStateObject:Object = WeaveXMLDecoder.decode(xml);
								setSessionState(_currentSelectedObject, decodedStateObject, true);
							}
						}
						else if (_editor == DATA_GRID && _currentSessionStateDataProvider != null)
						{
							var newValue:Object;
							var newSessionState:Object;
							var i:int, j:int;
							
							_currentSessionStateDataProvider = gridEditor.dataProvider as ArrayCollection;
							
							// special case of just one object to set
							if (_currentSelectedObject is ILinkableVariable && _currentSessionStateDataProvider.length == 1)
							{
								newSessionState = _currentSessionStateDataProvider[0][VALUE_FIELD];
								if (newSessionState === ' ')
									newSessionState = '';
								newSessionState = WeaveXMLDecoder.decode(<tag>{newValue}</tag>);
								setSessionState(_currentSelectedObject, newSessionState, true);
								return;
							}
							
							var oldSessionState:Object = _currentSelectedObject ? getSessionState(_currentSelectedObject) : null;
							// special case of DynamicState objects
							if (_currentSelectedObject is ILinkableHashMap) 
							{
								newSessionState = (oldSessionState as Array).concat(); // make a copy and copy over the changes
								for (j = 0; j < _currentSessionStateDataProvider.length; ++j)
								{
									var lookupName:String = _currentSessionStateDataProvider[j][NAME_FIELD];
									for (i = 0; i < newSessionState.length; ++i)
									{
										if (newSessionState[i][DynamicState.OBJECT_NAME] == lookupName)
										{
											newValue = _currentSessionStateDataProvider[j][VALUE_FIELD];
											if (newValue === ' ')
												newValue = '';
											newValue = WeaveXMLDecoder.decode(<tag>{newValue}</tag>);
											newSessionState[i][DynamicState.SESSION_STATE] = newValue;
											break;
										}
									}
								}
								
								setSessionState(_currentSelectedObject, newSessionState, false);
								return;
							}
							
							// general case of just an object mapping
							newSessionState = new Object();
							for (i = 0; i < _currentSessionStateDataProvider.length; ++i)
							{
								newValue = _currentSessionStateDataProvider[i][VALUE_FIELD];
								if (newValue === ' ')
									newValue = '';
								newValue = WeaveXMLDecoder.decode(<tag>{newValue}</tag>);
								newSessionState[_currentSessionStateDataProvider[i][NAME_FIELD]] = newValue;
							}
							
							setSessionState(_currentSelectedObject, newSessionState, false); // do not remove any missing things
						}
					}
				}
				catch (e:Error)
				{
					reportError(e);
				}
		    }

			private function saveAndClosePanel():void
		    {
				try
				{
					saveSessionState();
					super.removePanel();
				}
				catch (e:Error)
				{
					reportError(e);
				}
		    }
			
			override public function removePanel():void
			{
				if (_textModified)
					askToSave(saveAndClosePanel, super.removePanel);
				else
					super.removePanel();
			}
			
			private function toggleShowConsole():void
			{
				if (console.height == 0)
				{
					// make sure the divider moves appropriately
					vDividedBox.moveDivider(vDividedBox.getChildIndex(console) - 1, -vDividedBox.height / 2);
					console.percentHeight = 100;
					console.input.setFocus();
				}
				else
				{
					console.percentHeight = 0;
				}
			}
			
			private function linkStatePath():void
			{
				var json:Object = ClassUtils.getClassDefinition('JSON');
				if (!json)
					json = {"parse": Compiler.parseConstant};
				
				var primaryPath:Array = sessionNav.getSelectedPath();
				var atb:AlertTextBox = AlertTextBox.show(
					"Link session state",
					"Enter the path to the other object",
					_lastCopiedPathStr,
					validateInput,
					handleInput
				);
				atb.getExpandButton().expanded = true;
				
				function validateInput(input:String):Boolean
				{
					try {
						return json.parse(input) is Array;
					} catch (e:Error) { }
					return false;
				}
				function handleInput(input:String):void
				{
					var otherPath:Array = json.parse(input) as Array;
					var ls:LinkableSynchronizer = WeaveAPI.globalHashMap.requestObject(null, LinkableSynchronizer, false);
					ls.primaryPath.setSessionState(primaryPath);
					ls.secondaryPath.setSessionState(otherPath);
				}
			}
			
			private var _lastCopiedPathStr:String;
			
			private function copyPathToClipboard():void
			{
				var path:Array = sessionNav.getSelectedPath();
				var str:String = '';
				if (path)
				{
					path = path.map(
						function(item:*, i:*, a:*):*
						{
							return item ? Compiler.encodeString(item) : 'null';
						}
					);
					str = "[" + path.join(", ") + "]";
				}
				_lastCopiedPathStr = str;
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, str);
			}
			private function copyToClipboard():void
			{
				Clipboard.generalClipboard.setData(ClipboardFormats.TEXT_FORMAT, textEditor.text);
			}
			
			//-----------------------------------------------------------------
			
			public static function openDefaultEditor(rootObject:ILinkableObject = null):void
			{
				var defaultEditor:SessionStateEditor = DraggablePanel.openStaticInstance(SessionStateEditor);
				
				if (rootObject == null)
					rootObject = WeaveAPI.globalHashMap;
				
				defaultEditor.setRootObject(rootObject);
			}
			
			private static var _profileWithErrorLogPanel:Boolean = true;
			private static var _showProfileData:Boolean = false;
			
			private static function handleStagePointClick():void
			{
				var event:MouseEvent = WeaveAPI.StageUtils.mouseEvent;
				if (event.stageX <= 1 && event.stageY <= 1)
				{
					openConsole();
					Weave.properties.enableMenuBar.value = true;
					Weave.properties.enableSessionMenu.value = true;
					Weave.properties.enableSessionHistoryControls.value = true;
				}
			}
			
			private static var _lastKeyboardEvent:KeyboardEvent = null;
			
			private static function handleKeyDown():void
			{
				var event:KeyboardEvent = WeaveAPI.StageUtils.keyboardEvent;
				if( _lastKeyboardEvent && _lastKeyboardEvent.keyCode == event.keyCode )
					return;
				
				_lastKeyboardEvent = event;
				if (event.keyCode == Keyboard.F8) // F8 to show profile data
					openConsole();
			}
			private static function handleKeyUp():void
			{
				_lastKeyboardEvent = null;
			}
			private static function openConsole():void
			{
				var stage:Stage = (WeaveAPI.topLevelApplication as DisplayObject).stage;
				var stagePoint:Point = new Point(stage.mouseX, stage.mouseY);
				var objectsUnderPoint:Array = stage.getObjectsUnderPoint(stagePoint);
				
				// hold ctrl to toggle which panel to open
				if (WeaveAPI.StageUtils.ctrlKey)
					_profileWithErrorLogPanel = !_profileWithErrorLogPanel;
				
				var profileDump:Object = DebugUtils.profileDump(WeaveAPI.StageUtils.shiftKey); // hold shift to reset profile data
				var console:Console;
				if (_profileWithErrorLogPanel)
				{
					ErrorLogPanel.openErrorLog();
					console = ErrorLogPanel.getInstance().console;
				}
				else
				{
					var defaultEditor:SessionStateEditor = DraggablePanel.openStaticInstance(SessionStateEditor);
					// show console
					if (profileDump && !defaultEditor.showConsole.selected)
						defaultEditor.toggleShowConsole();
					console = defaultEditor.console;
				}
				
				// don't show any profile data until we have some.
				if (!_showProfileData)
					_showProfileData = profileDump != null;
				
				if (_showProfileData)
					console.consoleTrace(ObjectUtil.toString(profileDump));

				if (console.stage)
				{
					var top:DisplayObject = objectsUnderPoint[objectsUnderPoint.length - 1];
					var path:Array = [top];
					while (top && top.parent)
						path.unshift(top = top.parent);
					
					// assign debug ids to parent-child path first (lower numbers)
					path = path.map(getDebugId);
					objectsUnderPoint = objectsUnderPoint.map(getDebugId);
					
					console.consoleTrace('Objects under mouse: [ ' + objectsUnderPoint.join(' ') + ' ]');
					console.consoleTrace('Parent-child path: [ ' + path.join(' ') + ' ]');
					
					function getDebugId(o:*):* { return debugId(o); }
				}
			}
			
			public static function initializeShortcuts():void
			{
				WeaveAPI.StageUtils.addEventCallback(KeyboardEvent.KEY_DOWN, null, handleKeyDown);
				WeaveAPI.StageUtils.addEventCallback(KeyboardEvent.KEY_UP, null, handleKeyUp);
				WeaveAPI.StageUtils.addEventCallback(StageUtils.POINT_CLICK_EVENT, null, handleStagePointClick);
			}
		]]>
	</mx:Script>
</ui:DraggablePanel>
