<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 xmlns:settings="weave.ui.settings.*"
		 implements="weave.api.ui.IVisTool_Basic"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.core.DragSource;
			import mx.managers.DragManager;
			
			import weave.api.core.ILinkableObject;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.ui.IInitSelectableAttributes;
			import weave.api.ui.ISelectableAttributes;
			import weave.api.ui.IVisTool;
			import weave.api.unlinkSessionState;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableNumber;
			import weave.core.LinkableVariable;
			import weave.menus.ToolsMenu;
			import weave.menus.WeaveMenuItem;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.BasicLinkableLayoutManager;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.HistogramPlotter;
			import weave.visualization.plotters.SimpleAxisPlotter;
		
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, HistogramTool, "Histogram");
			
			internal function get plotter():HistogramPlotter { return mainPlotter as HistogramPlotter; }
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				// lock dynamic objects into place
				initializePlotters(HistogramPlotter, true);
				
				visualization.enableZoomAndPan.value = false;

				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "10";

				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				
				visualization.leftMarginClickCallbacks.addGroupedCallback(this, makeHistogram );
				visualization.bottomMarginClickCallbacks.addGroupedCallback(this, function():void { AttributeSelectorPanel.open(visualization.bottomMarginColumn); });
				
				ColumnUtils.getDataSources(visualization.leftMarginColumn);
			}
			private function makeHistogram():void {
				var name:String = this.name;
				var object:ILinkableObject = WeaveAPI.globalHashMap.requestObject(name, ScatterPlotTool, false);
				var tool:ScatterPlotTool = object as ScatterPlotTool;
				
				// put panel in front
				WeaveAPI.globalHashMap.setNameOrder([name]);
				
				var arr:Array = [this.plotter.binnedColumn, this.plotter.binnedColumn, this.plotter.binnedColumn];
				tool.initSelectableAttributes(arr);
				
				var dragSource:DragSource = new DragSource();
				var mouseEvent:MouseEvent = new MouseEvent(MouseEvent.MOUSE_DOWN, true, false, 500, 500);
				DragManager.doDrag(this, 
					dragSource, 
					mouseEvent, 
					null, 
					0 /*xOffset*/, 
					0 /*yOffset*/, 
					0.5 /*imageAlpha*/, 
					true);
				//WeaveAPI.globalHashMap.removeObject(this.name);
			}
			override public function initSelectableAttributes(input:Array):void
			{
				ColumnUtils.initSelectableAttributes([plotter.fillStyle.color], input);
			}
			
			override protected function handleToggleButtonClick():void {
				makeHistogram();
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				visualization.additionalProbeColumns = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Histogram of {0}", ColumnUtils.getTitle(plotter.fillStyle.color));
			}
			
			public const heightAxisTickCountRequested:LinkableNumber = registerLinkableChild(this, new LinkableNumber(10));
			
			private function getHeightAxisLabel(number:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.columnToAggregate, number);
			}
			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				
				var binAxisPlotter:SimpleAxisPlotter;
				var heightAxisPlotter:SimpleAxisPlotter;
				
				if (plotter.horizontalMode.value)
				{
					binAxisPlotter = yAxisPlotter;
					heightAxisPlotter = xAxisPlotter;
					visualization.bottomMarginColumn = plotter.columnToAggregate;
					visualization.leftMarginColumn = plotter.fillStyle.color;
					visualization.enableProbeLine(true, false);
					
				}
				else
				{
					binAxisPlotter = xAxisPlotter;
					heightAxisPlotter = yAxisPlotter;
					visualization.bottomMarginColumn = plotter.fillStyle.color;
					visualization.leftMarginColumn = plotter.columnToAggregate;
					visualization.enableProbeLine(false, true);
				}
				
				unlinkSessionState(heightAxisTickCountRequested, binAxisPlotter.tickCountRequested);
				binAxisPlotter.tickCountRequested.value = plotter.binnedColumn.numberOfBins;
				binAxisPlotter.tickMinValue.value = 0;
				binAxisPlotter.tickMaxValue.value = plotter.binnedColumn.numberOfBins - 1;	
				binAxisPlotter.setLabelFunction(plotter.binnedColumn.deriveStringFromNumber, plotter.binnedColumn);
				binAxisPlotter.forceTickCount.value = true;
				
				heightAxisPlotter.tickMinValue.value = NaN;
				heightAxisPlotter.tickMaxValue.value = NaN;
				heightAxisPlotter.forceTickCount.value = false;
				linkSessionState(heightAxisTickCountRequested, heightAxisPlotter.tickCountRequested);
				
				var binAxisTitle:String = ColumnUtils.getTitle(plotter.fillStyle.color);
				var heightAxisTitle:String = lang("Number of records");
				if (plotter.columnToAggregate.getInternalColumn())
				{
					if (plotter.aggregationMethod.value != HistogramPlotter.AG_COUNT)
					{
						heightAxisPlotter.setLabelFunction(getHeightAxisLabel, plotter.columnToAggregate);
						var agColTitle:String = ColumnUtils.getTitle(plotter.columnToAggregate);
						var method:String = plotter.aggregationMethod.value;
						if (method == HistogramPlotter.AG_MEAN)
							heightAxisTitle = lang("Mean of {0}", agColTitle);
						if (method == HistogramPlotter.AG_SUM)
							heightAxisTitle = lang("Sum of {0}", agColTitle);
					}
					else
						heightAxisPlotter.setLabelFunction(null, plotter.columnToAggregate);
				}
				else
				{
					// fall back to using binnedColumn
					heightAxisPlotter.setLabelFunction(null, plotter.binnedColumn);
				}
				
				xAxisPlotter.setSideAxisName(plotter.horizontalMode.value ? heightAxisTitle : binAxisTitle, 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisPlotter.setSideAxisName(plotter.horizontalMode.value ? binAxisTitle : heightAxisTitle, -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
		]]>
	</mx:Script>
	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox label="{lang('Basic')}">
			<ui:DynamicColumnComponent id="dataColumnComponent"/>
			<ui:BinningDefinitionEditor id="binEditor" showNoneOption="false"/>
		</mx:VBox>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				import weave.api.ui.IPlotter;
				import weave.visualization.plotters.HistogramPlotter;
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					var plotter:HistogramPlotter = outerDocument.plotter;
					plotter.columnToAggregate.addGroupedCallback(this, function():void {
						//agMethodCombo.enabled = false;
					}, true);
					
					plotter.fillStyle.color.internalDynamicColumn.addGroupedCallback(this, handleDynamicColorColumnChange, true);
					
					//TODO
					plotter.showValueLabels;
					plotter.valueLabelHorizontalAlign;
					plotter.valueLabelVerticalAlign;
					plotter.valueLabelRelativeAngle;		
					plotter.valueLabelColor;
					plotter.valueLabelMaxWidth;
				}
				
				private function handleDynamicColorColumnChange():void
				{
					if (!parent)
						return callLater(handleDynamicColorColumnChange);
					
					binEditor.setTarget(outerDocument.plotter.binnedColumn);
					dataColumnComponent.columnWrapper = outerDocument.plotter.fillStyle.color;
				}
				
			]]>
		</mx:Script>
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
