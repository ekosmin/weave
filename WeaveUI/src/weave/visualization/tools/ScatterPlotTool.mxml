<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" xmlns:editors="weave.editors.*" 
			   implements="weave.api.ui.IVisTool_Basic"
			   >
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import weave.api.core.ILinkableObject;
			import mx.controls.CheckBox;
			
			import weave.Weave;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.primitives.IBounds2D;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableVariable;
			import weave.core.UIUtils;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeMenuTool;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.layers.SimpleInteractiveVisualization;
			import weave.visualization.plotters.RegressionLinePlotter;
			import weave.visualization.plotters.ScatterPlotPlotter;

			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, ScatterPlotTool, "Scatterplot");
			
			[Bindable]
			public var plotter:ScatterPlotPlotter = null;
			
			public const REGRESSION_LAYER_NAME:String = "regressionLine";
			
			public const isVisibleEquationTextBoolean:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				// lock dynamic objects into place
				plotter = initializePlotters(ScatterPlotPlotter, true);
				
				visualization.enableProbeLine(true, true);
				
				//BEGIN TEMPORARY SOLUTION
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(plotter).addGroupedCallback(this, updateAxisLabels, true);
				// END TEMPORARY SOLUTION
				
				visualization.enableZoomAndPan.value = false;
				
				xAxisPlotter.setLabelFunction(labelFunctionX, plotter.dataX);
				yAxisPlotter.setLabelFunction(labelFunctionY, plotter.dataY);
				
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(plotter.dataX); })
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(plotter.dataY); })
				
				visualization.enableAutoZoomXToNiceNumbers.value = true;
				visualization.enableAutoZoomYToNiceNumbers.value = true;
				
				getCallbackCollection(plotter).addGroupedCallback(this, handlePanelTitleChange, true);
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "30";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "30";
				
				initializeUndefinedLayers();				
				initRegressionLayer();
				
				children.childListCallbacks.addGroupedCallback(this, handleChildrenChildList);
			}
			
			override public function initSelectableAttributes(input:Array):void
			{
				ColumnUtils.initSelectableAttributes([plotter.dataX, plotter.dataY, plotter.fill.color], input);
			}
			
			override protected function handleToggleButtonClick():void {
				var name:String = WeaveAPI.globalHashMap.generateUniqueName("Histogram");
				var object:ILinkableObject = WeaveAPI.globalHashMap.requestObject(name, HistogramTool, false);
				
				// put panel in front
				WeaveAPI.globalHashMap.setNameOrder([name]);
				
				var tool:HistogramTool = object as HistogramTool;
				tool.move(this.x, this.y);
				if (tool) {
					var arr:Array = [this.plotter.dataX];
					tool.initSelectableAttributes(arr);
				}
			}
			
			private function handleChildrenChildList():void
			{
				// this will make sure the undefined x,y visualizations are on top of the main vis.
				// get existing order
				var order:Array = children.getNames();
				var args:Array = [UNDEFINED_X_NAME, UNDEFINED_Y_NAME, UNDEFINED_XY_NAME];
				// remove vis_undef_* names
				for each (var name:String in args)
					order.splice(order.indexOf(name), 1);
				// replace the main vis name with the list of vis names
				var visName:String = children.getName(visualization);
				args.unshift(order.indexOf(visName), 1, visName);
				order.splice.apply(null, args);
				// save new order
				children.setNameOrder(order);
			}
		
			[Bindable]
			public var regressionPlotter:RegressionLinePlotter = null;
			
			private function initRegressionLayer():void
			{
				regressionPlotter = visualization.plotManager.plotters.requestObject(REGRESSION_LAYER_NAME, RegressionLinePlotter, true);
				visualization.plotManager.getLayerSettings(REGRESSION_LAYER_NAME).selectable.value = false;
				linkSessionState(plotter.dataX, regressionPlotter.xColumn);
				linkSessionState(plotter.dataY, regressionPlotter.yColumn);
				//regressionPlotter.currentTrendline.value = null;
				//regressionPlotter.drawLine.value = false;				
			}
			
			
			/*BEGIN UNDEFINED LAYER CODE*/
					
			private var vis_undef_x:SimpleInteractiveVisualization;
			private var vis_undef_y:SimpleInteractiveVisualization;
			private var vis_undef_xy:SimpleInteractiveVisualization;
			
			private const UNDEFINED_X_NAME:String = "undefinedX";
			private const UNDEFINED_Y_NAME:String = "undefinedY";
			private const UNDEFINED_XY_NAME:String = "undefinedXY";
			
			private const _tempBounds:Bounds2D = new Bounds2D();
			
			private function initializeUndefinedLayers():void
			{
				vis_undef_x = children.requestObject(UNDEFINED_X_NAME, SimpleInteractiveVisualization, true);
				vis_undef_y = children.requestObject(UNDEFINED_Y_NAME, SimpleInteractiveVisualization, true);
				vis_undef_xy = children.requestObject(UNDEFINED_XY_NAME, SimpleInteractiveVisualization, true);
				
				AttributeMenuTool.hack_skipToolTargets[vis_undef_x] = true;
				AttributeMenuTool.hack_skipToolTargets[vis_undef_y] = true;
				AttributeMenuTool.hack_skipToolTargets[vis_undef_xy] = true;

				vis_undef_x.toolTip = lang("Undefined X");
				vis_undef_y.toolTip = lang("Undefined Y");
				vis_undef_xy.toolTip = lang("Undefined X and Y");
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, resizeUndefinedLayers, true);
				
				for each (var vis:SimpleInteractiveVisualization in [vis_undef_x, vis_undef_y, vis_undef_xy])
				{
					vis.initializePlotters(ScatterPlotPlotter, false);
					vis.enableAutoZoomXToNiceNumbers.value = true;
					vis.enableAutoZoomYToNiceNumbers.value = true;
					
					var _plotter:ScatterPlotPlotter = vis.getMainPlotter() as ScatterPlotPlotter;
					linkSessionState(plotter.fill.color, _plotter.fill.color);
					linkSessionState(plotter.fill.alpha, _plotter.fill.alpha);
					linkSessionState(plotter.sizeBy, _plotter.sizeBy);					
					linkSessionState(plotter.defaultScreenRadius, _plotter.defaultScreenRadius);
					linkSessionState(plotter.maxScreenRadius, _plotter.maxScreenRadius);
					linkSessionState(plotter.minScreenRadius, _plotter.minScreenRadius);
					
					var undefSettings:LayerSettings = vis.getMainLayerSettings();
					undefSettings.hack_includeMissingRecordBounds = true;
					linkSessionState(visualization.getMainLayerSettings(), undefSettings);
					linkSessionState(visualization.plotManager.zoomBounds, vis.plotManager.zoomBounds);
				}
				
				var plotter_undef_x:ScatterPlotPlotter = vis_undef_x.getMainPlotter() as ScatterPlotPlotter;
				var plotter_undef_y:ScatterPlotPlotter = vis_undef_y.getMainPlotter() as ScatterPlotPlotter;
				var plotter_undef_xy:ScatterPlotPlotter = vis_undef_xy.getMainPlotter() as ScatterPlotPlotter;
				hack_setKeyInclusionLogic(plotter_undef_x, true, false);
				hack_setKeyInclusionLogic(plotter_undef_y, false, true);
				hack_setKeyInclusionLogic(plotter_undef_xy, true, true);
				
				linkSessionState(plotter.dataX, plotter_undef_y.dataX);
				linkSessionState(plotter.dataY, plotter_undef_x.dataY);
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, invalidateDisplayList);
				
				visualization.plotManager.marginTopNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.plotManager.marginBottomNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.plotManager.marginRightNumber.addImmediateCallback(this, invalidateDisplayList);
				visualization.plotManager.marginLeftNumber.addImmediateCallback(this, invalidateDisplayList);
				
				visualization.gridLineAlpha.addImmediateCallback(this, updateUndefLayerLines);
				visualization.gridLineColor.addImmediateCallback(this, updateUndefLayerLines);
				visualization.gridLineThickness.addImmediateCallback(this, updateUndefLayerLines, true);
			}
			private function hack_setKeyInclusionLogic(undef_plotter:ScatterPlotPlotter, undef_x:Boolean, undef_y:Boolean):void
			{
				undef_plotter.hack_setKeyInclusionLogic(
					function(key:IQualifiedKey):Boolean
					{
						return !isFinite(plotter.dataX.getValueFromKey(key, Number)) == undef_x
							&& !isFinite(plotter.dataY.getValueFromKey(key, Number)) == undef_y;
					},
					[plotter.dataX, plotter.dataY]
				);
			}
			
			private function updateUndefLayerLines():void
			{
				var args:Array = [visualization.gridLineThickness.value, visualization.gridLineColor.value, visualization.gridLineAlpha.value];
				(vis_undef_x.getMainPlotter() as ScatterPlotPlotter).hack_verticalBackgroundLineStyle = args;
				(vis_undef_y.getMainPlotter() as ScatterPlotPlotter).hack_horizontalBackgroundLineStyle = args;
				getCallbackCollection(vis_undef_x.getMainPlotter()).triggerCallbacks();
				getCallbackCollection(vis_undef_y.getMainPlotter()).triggerCallbacks();
			}
			private function resizeUndefinedLayers():void
			{
				var b:IBounds2D = _tempBounds;
				var marginRight:Number = visualization.plotManager.marginRightNumber.value;
				
				// right margin undefined x
				visualization.plotManager.zoomBounds.getScreenBounds(b);
				_tempBounds.setXMin(b.getXMax() + marginRight);
				_tempBounds.setWidth(b.getWidth() * 0.66);
				setDisplayObjectBounds(vis_undef_x, b);
				
				// top margin undefined y
				visualization.plotManager.zoomBounds.getScreenBounds(b);
				_tempBounds.setYMin(0);
				_tempBounds.setHeight(b.getHeight() * 0.66);
				setDisplayObjectBounds(vis_undef_y, b);
				
				// top-right corner undefined xy
				visualization.plotManager.zoomBounds.getScreenBounds(b);
				_tempBounds.setMinCoords(b.getXNumericMax() + marginRight, 0);
				_tempBounds.centeredResize(b.getWidth() / 2, b.getHeight() / 2);
				setDisplayObjectBounds(vis_undef_xy, b);
			}
			private function setDisplayObjectBounds(displayObject:DisplayObject, bounds:IBounds2D):void
			{
				displayObject.x = bounds.getXNumericMin();
				displayObject.y = bounds.getYNumericMin();
				displayObject.width = bounds.getXCoverage();
				displayObject.height = bounds.getYCoverage();
			}
			/*END UNDEFINED LAYER CODE*/
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				var columns:Array = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
				visualization.additionalProbeColumns = columns;
				vis_undef_x.additionalProbeColumns = columns;
				vis_undef_y.additionalProbeColumns = columns;
				vis_undef_xy.additionalProbeColumns = columns;
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Scatter Plot of {0} -vs- {1}", ColumnUtils.getTitle(plotter.dataX), ColumnUtils.getTitle(plotter.dataY));
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateEquation);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateEquation);
				getCallbackCollection(regressionPlotter).addGroupedCallback(this, updateEquation, true);
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateEquationStyle, true);
			}
			
			private function updateEquationStyle():void
			{
				LinkableTextFormat.defaultTextFormat.copyToStyle(equationText);
			}
			
			private function round(number:Number):Number
			{
				var result:Number = StandardLib.roundSignificant(number, 4);
				if (result == 0 && number != 0)
					return StandardLib.roundSignificant(number);
				return result;
			}
			private function updateEquation():void
			{
				var str:String = '';
				var slope:Number;
				var intercept:Number;
				var base:Number;
				var exponent:Number;
				var rsquared:Number
				// add switch block here
				if ( regressionPlotter.drawLine.value )
				{
					if (equationText.parent != visCanvas)
						visCanvas.addChild(equationText);
					if (regressionPlotter.coefficients != null)
					{
						if (regressionPlotter.currentTrendline.value == "Linear")
						{	
							slope = round(regressionPlotter.coefficients[1]);
							intercept = round(regressionPlotter.coefficients[0]);
							rsquared = round(regressionPlotter.rSquared);
							str = lang("y = {0}x + {1}\nR^2 = {2}", slope, intercept, rsquared);					
						}
					
						else if( regressionPlotter.currentTrendline.value == "Polynomial")
						{
							var rawCoefficients:Array = regressionPlotter.coefficients;
							var roundedCoefficients:Array = [];
							rsquared = round(regressionPlotter.rSquared);
							str = lang("y = ");
							var i:int = 0;
						
							for (i = 0; i < rawCoefficients.length ; i++ )
								if (isFinite(rawCoefficients[i]))
									roundedCoefficients.push(round(rawCoefficients[i])); 
						
							for (i = roundedCoefficients.length - 1; i >  0; i-- )
								if (isFinite(roundedCoefficients[i]))
									str += lang("{0}x^{1} + ", roundedCoefficients[i], i); 
							
							str += roundedCoefficients[0];
							str += lang("\nR^2 = {0}", rsquared);
							
						}
						else if (regressionPlotter.currentTrendline.value == "Exponential")
						{
							base = round(Math.exp(regressionPlotter.coefficients[0]));
							exponent = round(regressionPlotter.coefficients[1]);
							rsquared = round(regressionPlotter.rSquared);
							str = lang("y = {0}e^{1}x\nR^2 = {2}", base, exponent, rsquared);
						}
						else if ( regressionPlotter.currentTrendline.value == "Power")
						{
							base = round(Math.exp(regressionPlotter.coefficients[0]));
							exponent = round(regressionPlotter.coefficients[1]);
							rsquared = round(regressionPlotter.rSquared);
							str = lang("y = {0}x^{1}\nR^2 = {2}", base, exponent, rsquared);
						}
						else if ( regressionPlotter.currentTrendline.value == "Logarithmic")
						{
							base = round(regressionPlotter.coefficients[1]);
							exponent = round(regressionPlotter.coefficients[0]);
							rsquared = round(regressionPlotter.rSquared);
							str = lang("y = {0}ln(x)+{1}\nR^2 = {2}", base, exponent, rsquared);
						}
					}
				}
				else
				{ 
					if (equationText.parent)
						equationText.parent.removeChild(equationText);
				}
				equationText.text = str;
				
				equationText.validateNow();
//				// severely hacked This needs to be fixed.
//				equationText.width = visualization.plotManager.marginLeftNumber.value * 8;
//				equationText.height = Math.min(equationText.textHeight + 14, visualization.plotManager.marginBottomNumber.value);
			}
			private function updateAxisLabels():void
			{
				visualization.bottomMarginColumn = plotter.dataX;
				visualization.leftMarginColumn = plotter.dataY;
				
				xAxisPlotter.setSideAxisName(
					ColumnUtils.getTitle(plotter.dataX), 
					0,   
					0, visualization.plotManager.marginBottomNumber.value - 3, 
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				
				yAxisPlotter.setSideAxisName(
					ColumnUtils.getTitle(plotter.dataY), 
					-90, 
					-visualization.plotManager.marginLeftNumber.value, 0, 
					BitmapText.VERTICAL_ALIGN_TOP
				);
			}
			
			public function labelFunctionX(value:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.dataX, value);
			}
			public function labelFunctionY(value:Number):String
			{
				return ColumnUtils.deriveStringFromNumber(plotter.dataY, value);
			}
			
			public function createLegend():void
			{
				var sizeBinLegendTool:SizeBinLegendTool = Weave.root.requestObject(null, SizeBinLegendTool, false);
				sizeBinLegendTool.dynamicScatterPlotTool.globalName = Weave.root.getName(this);
			}
			
		]]>
	</mx:Script>
	<ui:Paragraph id="equationText" trim="false" selectable="true"
		wordWrap="false" width="NaN"
		verticalScrollPolicy="off"
		horizontalScrollPolicy="off"
		bottom="0"
		left="0"
		initialize="linkBindableProperty(isVisibleEquationTextBoolean, equationText, 'visible')"/>
	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				import weave.compiler.StandardLib;
				import weave.core.UIUtils;
				import weave.visualization.plotters.RegressionLinePlotter;
			]]>
		</mx:Script>
		<mx:VBox id="VizControlsPanel" label="{lang('Visualization Controls')}">
			<editors:ScatterPlotPlotterEditor id="plotEditor" width="100%" creationComplete="plotEditor.setTarget(outerDocument.plotter)"/>
			<mx:Button label="{lang('Show legend')}" click="outerDocument.createLegend()"/>
		</mx:VBox>
		<mx:VBox id="AdvancedPanel" label="{lang('Advanced')}">
			
			<ui:SelectableAttributesCheckBoxList id="selectedAttrList" creationComplete="selectedAttrList.setup(outerDocument, outerDocument.attributesToIncludeInProbe)"/>
			
			<!-- @author fkamayou 
				 Beginning of trendline option 
			-->
			<ui:CheckBoxWithNestedOptions id= "trendlineCheckBox" label="{lang('Enable Trendline (Requires Rserve on the server)')}"
							 creationComplete="linkBindableProperty(outerDocument.regressionPlotter.drawLine, event.target, 'selected')">
				<mx:HBox>
					<mx:ComboBox enabled="{trendlineCheckBox.selected}" 
								 id="trendlineComboBox" dataProvider="{RegressionLinePlotter.trendlines}"
								 creationComplete="linkBindableProperty(outerDocument.regressionPlotter.currentTrendline,event.target,'selectedItem')"/>
					<mx:HBox visible="{trendlineComboBox.selectedItem == 'Polynomial'}"
							 includeInLayout="{trendlineComboBox.selectedItem == 'Polynomial'}">
						<mx:Label text = "{lang('Degree')}" />
						<mx:HSlider id="polynomialDegreeSlider"
									creationComplete="linkBindableProperty(outerDocument.regressionPlotter.polynomialDegree, event.target, 'value')"									
									minimum="2" maximum="6" snapInterval="1" liveDragging="true"
									tickInterval="1"/>
					</mx:HBox>
				</mx:HBox>
				<mx:Label id="lineEquation" text="{StandardLib.replace(outerDocument.equationText.text, '\n', '    ')}" visible="{lineEquation.text ? true : false}" includeInLayout="{lineEquation.text ? true : false}"/>
				<mx:CheckBox id="hideEquationCheckBox" label="{lang('Display the equation in the visualization')}" labelPlacement="right"
							 creationComplete="linkBindableProperty(outerDocument.isVisibleEquationTextBoolean, event.target, 'selected')"/>
				<ui:Indent label="{lang('Line Color')}">
					<ui:CustomColorPicker id="regressionColorPicker" 
									creationComplete="linkBindableProperty(outerDocument.regressionPlotter.lineStyle.color.defaultValue, event.target, 'selectedColor')"
									enabled="{trendlineCheckBox.selected}"/>
				</ui:Indent>
				<ui:Indent label="{lang('Line Thickness')}">
					<mx:HSlider id="regressionThicknessSlider"
								creationComplete="linkBindableProperty(outerDocument.regressionPlotter.lineStyle.weight.defaultValue, event.target, 'value')"
								enabled="{trendlineCheckBox.selected}"
								minimum="1" maximum="10" snapInterval="1" liveDragging="true"
								tickInterval="1"/>
				</ui:Indent>
				<ui:Indent label="{lang('Line Opacity')}">
					<mx:HSlider id="regressionAlphaSlider"
								enabled="{trendlineCheckBox.selected}"
								minimum="0.1" maximum="1" snapInterval=".1" liveDragging="true"
								tickInterval="0.1"
								creationComplete="linkBindableProperty(outerDocument.regressionPlotter.lineStyle.alpha.defaultValue, event.target, 'value')"/>
				</ui:Indent>
			</ui:CheckBoxWithNestedOptions>
		</mx:VBox>
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
