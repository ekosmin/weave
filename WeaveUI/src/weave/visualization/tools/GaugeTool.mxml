<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*">
	<mx:Script>
		<![CDATA[
			import mx.managers.CursorManager;
			
			import weave.Weave;
			import weave.api.getCallbackCollection;
			import weave.api.ui.IVisTool;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.CustomCursorManager;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.InteractiveVisualization;
			import weave.visualization.plotters.GaugePlotter;
		
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, GaugeTool, "Gauge Tool");
			
			internal function get plotter():GaugePlotter { return mainPlotter as GaugePlotter; }
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, handleMarginChange);
			}
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				initializePlotters(GaugePlotter, false);
				
			
				//plotter.dynamicColorColumn.addGroupedCallback(this, handleDynamicColorColumnChange);
				
				// by default this tool only displays the probed records.
				//TEMPORARY SOLUTION until we start using VisToolGroup
				mainPlotter.filteredKeySet.keyFilter.targetPath = [Weave.DEFAULT_PROBE_KEYSET];
				//mainLayerSettings.subsetFilter.globalName = Weave.DEFAULT_PROBE_KEYSET;
				mainLayerSettings.selectionFilter.removeObject();
				mainLayerSettings.probeFilter.removeObject();

				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				plotter.meterColumn.addGroupedCallback(this, updateMarginLabel, true);
				visualization.bottomMarginClickCallbacks.addGroupedCallback(this, handleMarginLabelClick);
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
				
				visualization.plotManager.marginBottom.value    = DEFAULT_MARGIN_BOTTOM.toString();
			}
			
			private function invalidateAxes():void
			{
				handlePanelTitleChange();
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Gauge of {0}", ColumnUtils.getTitle(plotter.meterColumn));
			}
			
			[Bindable]
			private var marginLabelText:String = "";
			
			private function handleMarginLabelClick():void
			{
				AttributeSelectorPanel.open(plotter.meterColumn);
			}
			
			private function showLinkCursor():void
			{
				if (Weave.properties.enableToolControls.value)
					CustomCursorManager.showCursor(InteractiveVisualization.CURSOR_LINK);
			}
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				marginLabelText = ColumnUtils.getTitle(plotter.meterColumn);
				
				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}
			
			internal static const DEFAULT_MARGIN_BOTTOM:int = 35;
			private function handleMarginChange():void
			{
				marginLabelCheckBox_selected = visualization.plotManager.marginBottomNumber.value != 0;
				marginLabel.height = visualization.plotManager.marginBottomNumber.value;
				marginLabel.visible = visualization.plotManager.marginBottomNumber.value > 0
			}
			[Bindable] internal var marginLabelCheckBox_selected:Boolean;
		]]>
	</mx:Script>
	<mx:TextArea id="marginLabel"
				 fontWeight="bold" click="handleMarginLabelClick()" 
				 paddingLeft="5" paddingRight="5"
				 text="{marginLabelText}" width="100%"
				 rollOver="showLinkCursor();"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off"
				 rollOut="CursorManager.removeAllCursors()"
				 wordWrap="true" selectable="false" editable="false"
				 borderThickness="0" backgroundAlpha="0"
				 bottom="0"
				 textAlign="center"
				 toolTip="{lang('{0}\n\tClick here to select a different attribute.', marginLabelText)}"/>
	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Gauge properties')}" >
			<ui:DynamicColumnComponent label="{lang('Gauge column:')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = outerDocument.plotter.meterColumn"/>
			<mx:CheckBox id="marginLabelCheckBox" label="{lang('Show attribute name')}" selected="{outerDocument.marginLabelCheckBox_selected}" change="outerDocument.visualization.plotManager.marginBottom.value = String(marginLabelCheckBox.selected ? GaugeTool.DEFAULT_MARGIN_BOTTOM : 0);"/>
			<ui:ColorRampEditor id="cRampEditor" creationComplete="cRampEditor.colorRamp = outerDocument.plotter.colorRamp;"/>
		</mx:VBox>
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
