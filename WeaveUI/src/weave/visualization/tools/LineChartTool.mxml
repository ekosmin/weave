<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 implements="weave.api.ui.IVisTool_Basic"
		 xmlns:settings="weave.ui.settings.*" layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.data.ColumnMetadata;
			import weave.api.data.DataType;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IColumnWrapper;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.getSessionState;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.api.setSessionState;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableVariable;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.AlwaysDefinedColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.EquationColumn;
			import weave.primitives.Bounds2D;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.ColumnListComponent;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.PlotterUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.plotters.OldParallelCoordinatesPlotter;
			import weave.visualization.plotters.TextGlyphPlotter;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, LineChartTool, "Line Chart");
			
			internal var _plotter:OldParallelCoordinatesPlotter = null;
			internal var labelPlotter:TextGlyphPlotter = null ;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "30";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "80";
				
				// lock dynamic objects into place
				_plotter = initializePlotters(OldParallelCoordinatesPlotter, true);
				// default axis values
				yAxisPlotter.tickCountRequested.value = 5;
				
				xAxisPlotter.setLabelFunction(_plotter.xAxisLabelFunction, null);
				yAxisPlotter.setLabelFunction(_plotter.yAxisLabelFunction, null);
				
				
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.lock();
				visualization.enableZoomAndPan.value = false;

				//This variable represents whether or not the tool is a 
				//lineChart(false) or parallelCoords(true)
				_plotter.normalize.value = false;
				_plotter.normalize.lock();
				
				addLabelLayer();
				
				linkSessionState(labelPlotter.zoomToSubset, _plotter.zoomToSubset);

				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxes);
				
				// BEGIN TEMPORARY SOLUTION
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginTopNumber.addGroupedCallback(this, updateAxes);
				visualization.plotManager.marginRightNumber.addGroupedCallback(this, updateAxes);

				getCallbackCollection(_plotter).addGroupedCallback(this, updateAxes, true);
				// END TEMPORARY SOLUTION
				var self:* = this;
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void {
					if (_plotter.enableGroupBy.value)
						AttributeSelectorPanel.open(_plotter.yData);
					else
						AttributeSelectorPanel.open(labelPlotter.text);
				});
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void {
					if (_plotter.enableGroupBy.value)
						AttributeSelectorPanel.open(_plotter.xData);
					else
						AttributeSelectorPanel.open(_plotter.columns);
				});
				
				linkSessionState(visualization.plotManager.marginRightNumber, labelPlotter.maxWidth);
			}

			override public function initSelectableAttributes(input:Array):void
			{
				const MAX_DEFAULT_COLUMNS:int = 10;
				input.slice(0, MAX_DEFAULT_COLUMNS)
					.forEach(function(item:Object, i:int, a:Array):void {
						ColumnUtils.initSelectableAttribute(_plotter.columns, item, i == 0);
					});
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				visualization.additionalProbeColumns = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				xAxisPlotter.axisLabelRelativeAngle.value = -45;
				xAxisPlotter.labelHorizontalAlign.value = BitmapText.HORIZONTAL_ALIGN_RIGHT;
				xAxisPlotter.labelVerticalAlign.value = BitmapText.VERTICAL_ALIGN_TOP;
				
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.value = false;
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return super.getSelectableAttributeNames().concat([_plotter.enableGroupBy.value ? 'Group label' : 'Label']);
			}
			override public function getSelectableAttributes():Array
			{
				return super.getSelectableAttributes().concat([labelPlotter.text]);
			}
			
			private function getColumnObjects():Array
			{
				return _plotter.xColumns.getObjects(IAttributeColumn);
			}
			
			private static const tempBounds:Bounds2D = new Bounds2D(); // reusable temporary object
			
			
			private function updateAxes():void
			{
				handlePanelTitleChange();
				
				var columns:Array = _plotter.columns.getObjects();
			
				if(_plotter.usingXAttributes)
				{
					visualization.plotManager.zoomBounds.getDataBounds(tempBounds);
					tempBounds.yMax = tempBounds.yMin;
					xAxisPlotter.axisLineMinValue.value = tempBounds.xMin;
					xAxisPlotter.axisLineMaxValue.value = tempBounds.xMax;
					xAxisPlotter.axisLineDataBounds.copyFrom(tempBounds);
					xAxisPlotter.forceTickCount.value = false;
					xAxisPlotter.tickCountRequested.value = 10;
				}
				else
				{
					xAxisPlotter.tickCountRequested.value = Math.max(2, columns.length);
					xAxisPlotter.forceTickCount.value = true;
				}
				
				visualization.plotManager.zoomBounds.getDataBounds(tempBounds);
				tempBounds.xMax = tempBounds.xMin;
				yAxisPlotter.axisLineMinValue.value = tempBounds.yMin;
				yAxisPlotter.axisLineMaxValue.value = tempBounds.yMax;
				yAxisPlotter.axisLineDataBounds.copyFrom(tempBounds);
				
				var xAxisName:String = '';
				var yAxisName:String = '';
				if (_plotter.enableGroupBy.value)
				{
					xAxisName = ColumnUtils.getTitle(_plotter.xData);
					yAxisName = ColumnUtils.getTitle(_plotter.yData);
				}
				xAxisPlotter.setSideAxisName(
					xAxisName,
					0,
					0, visualization.plotManager.marginBottomNumber.value - 3,
					BitmapText.VERTICAL_ALIGN_BOTTOM
				);
				yAxisPlotter.setSideAxisName(
					yAxisName,
					-90,
					-visualization.plotManager.marginLeftNumber.value, 0,
					BitmapText.VERTICAL_ALIGN_TOP
				);

				xAxisPlotter.updateLabels();
				yAxisPlotter.updateLabels();			
			}
			
			override public function get defaultPanelTitle():String
			{
				var columns:Array = _plotter.columns.getObjects();
				if (columns.length == 0)
					return lang('Line Chart');
				
				if (_plotter.enableGroupBy.value)
					return lang("Line Chart of {0} by {1}", ColumnUtils.getTitle(_plotter.yData), ColumnUtils.getTitle(_plotter.xData));
				
				var newTitle:String = lang("Line Chart of ");
				for (var i:int = 0; i < columns.length; i++)
				{
					if (i > 0)
						newTitle += lang(', ');
					newTitle += ColumnUtils.getTitle(columns[i]);
				}
				return newTitle;
			}
			
			private function addLabelLayer():void
			{
				var name:String = "label";
				labelPlotter = visualization.plotManager.plotters.requestObject(name, TextGlyphPlotter, true);
				var settings:LayerSettings = visualization.plotManager.getLayerSettings(name);
				settings.selectable.value = false;
				settings.selectable.lock();
				
				_plotter.columns.addImmediateCallback(this, updateColumns, true);
				_plotter.xColumns.addImmediateCallback(this, updateColumns, true);

				labelPlotter.xScreenOffset.value = 5;
				labelPlotter.hAlign.defaultValue.value = BitmapText.HORIZONTAL_ALIGN_LEFT;
				labelPlotter.hideOverlappingText.value = true;
				linkSessionState(labelPlotter.dataY, labelPlotter.sortColumn);
				labelPlotter.hack_setSingleKeySource(_plotter.filteredKeySet);
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateLabel, true);
			}
			private function updateLabel():void
			{
				labelPlotter.setDefaultTextFormat(LinkableTextFormat.defaultTextFormat);
			}
			
			private function updateColumns():void
			{
				var _columns:Array = _plotter.columns.getObjects();
				var _xattrObjects:Array = _plotter.xColumns.getObjects();
				
				if (_columns.length == 0)
				{
					labelPlotter.dataY.removeObject();
					labelPlotter.dataX.removeObject();
					return;
				}
				
				// find last Y column with keys (for labels)
				var lastXCol:IAttributeColumn;
				var lastYCol:IAttributeColumn;
				var iCol:int = _columns.length;
				while ((!lastYCol || !lastYCol.keys.length) && iCol--)
				{
					lastXCol = _xattrObjects[iCol] as IAttributeColumn;
					lastYCol = _columns[iCol] as IAttributeColumn;
				}
				
				// set label x and y columns
				if (!_plotter.usingXAttributes)
				{
					var x:AlwaysDefinedColumn = labelPlotter.dataX.requestLocalObject(AlwaysDefinedColumn, false);
				    x.defaultValue.value = iCol;
				}
				else
				{
					labelPlotter.dataX.requestLocalObjectCopy(lastXCol as ILinkableObject);
				}
				labelPlotter.dataY.requestLocalObjectCopy(lastYCol as ILinkableObject);

				if (labelPlotter.text.getInternalColumn() == null)
				{
					var headers:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
					for (var i:int = 0; i < headers.length; i++)
					{
						if (ColumnUtils.getKeyType(headers[i]) == ColumnUtils.getKeyType(lastYCol))
						{
							labelPlotter.text.requestLocalObjectCopy(headers[i]);
							break;
						}
					}
				}
			}
		]]>
	</mx:Script>
	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Data')}">
			<ui:CheckBoxWithNestedOptions id="enableGroupByCheckBox" creationComplete="linkBindableProperty(_plotter.enableGroupBy, event.target, 'selected')"
										  label="{lang('Group records by column values')}">
				<ui:DynamicColumnComponent id="xDataSelector" creationComplete="initDynamicColumnComponent(xDataSelector, HELP_KT_XYGB)"/>
				<ui:DynamicColumnComponent id="yDataSelector" creationComplete="initDynamicColumnComponent(yDataSelector, HELP_KT_XYGB)"/>
				<ui:DynamicColumnComponent id="groupBySelector" creationComplete="initDynamicColumnComponent(groupBySelector, HELP_DT_GROUP)"/>
				<ui:Indent label="{lang('Group keyType')}">
					<ui:helpContent>
						Specifies the keyType of the foreign keys referenced by the "Group by" column.
						By default, the dataType of the "Group by" column is used as the foreign keyType.
					</ui:helpContent>
					<ui:TextInputWithPrompt id="groupKeyType" creationComplete="linkBindableProperty(_plotter.groupKeyType, groupKeyType, 'text', 500)"/>
				</ui:Indent>
				<ui:DynamicColumnComponent id="groupColorSelector" showLinkControl="false" creationComplete="initDynamicColumnComponent(groupColorSelector, HELP_KT_COLOR)"/>
				<ui:DynamicColumnComponent id="groupLabelSelector" creationComplete="initDynamicColumnComponent(groupLabelSelector, HELP_KT_LABEL)"/>
				<ui:Indent id="generateReverseLookupControls">
					<mx:Button label="{lang('Generate reverse lookup for \'Group label\'')}"
							   click="generateReverseLookup()"/>
					<ui:HelpComponent>
						Generates label equation from current Label column if its keyType matches the group-by keyType.
					</ui:HelpComponent>
				</ui:Indent>
				<ui:Indent label="{lang('Customize X values:')}">
					<mx:TextInput id="xValuesInput" toolTip="{lang('These values will appear on the x axis')}" width="100%"/>
					<mx:Button label="{lang('Apply')}" click="_plotter.xValues.value = xValuesInput.text;"/>
					<mx:Button label="{lang('Reset')}" click="_plotter.xValues.value = ''; updateFilterText();"/>
				</ui:Indent>
			</ui:CheckBoxWithNestedOptions>
			<mx:VBox width="100%" height="100%" visible="{!enableGroupByCheckBox.selected}" includeInLayout="{!enableGroupByCheckBox.selected}">
				<ui:DynamicColumnComponent id="colorSelector" showLinkControl="false"/>
				<ui:DynamicColumnComponent id="labelSelector"/>
				<ui:ColumnListComponent creationComplete="(event.target as ColumnListComponent).hashMap = _plotter.columns"/>
			</mx:VBox>
		</mx:VBox>
		<mx:VBox id="VizControlsPanel" label="{lang('Appearance')}">
			<mx:HBox verticalAlign="middle" width="100%">
				<mx:Label text="{lang('Shape:')}" 
						  toolTip="{lang('This controls what shape is used to indicate the data points on the axes.')}"/>
				<ui:CustomComboBox id="shapeCombo" dataProvider="{OldParallelCoordinatesPlotter.shapesAvailable}" initialize="shapeCombo.labelFunction = lang;"/>
				<mx:HBox enabled="{shapeCombo.selectedItem != OldParallelCoordinatesPlotter.NO_SHAPE}" verticalAlign="middle" width="100%">
					<mx:Label text="{lang('Size:')}"
							  toolTip="{lang('This controls the size of the shapes indicating the data points on the axes.')}"/>
					<mx:HSlider id="shapeSizeSlider"
								width="100%" minWidth="0" 
								snapInterval="1"
								tickInterval="5"
								labels="{['0','10','20','30','40']}"
								minimum="0" maximum="40"
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle" width="100%">
				<mx:HBox enabled="{shapeBorderSizeSlider.value != 0}">
					<mx:Label text="{lang('Shape border color:')}"/>
					<ui:CustomColorPicker id="shapeBorderColorPicker"
									toolTip="{lang('This controls color of the border around the shape at each point.')}"/>
				</mx:HBox>
				<mx:HBox verticalAlign="middle">
					<mx:Label text="{lang('Opacity:')}" toolTip="{lang('Use this control to see how transparent lines are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}"/>
					<mx:HSlider id="shapeBorderAlphaSlider" 
								width="100%" minWidth="0" 
								snapInterval="0.1"
								tickInterval="0.5" labels="{['0%', '50%', '100%']}"
								initialize="shapeBorderAlphaSlider.dataTipFormatFunction = PlotterUtils.alphaSliderFormatFunction;"
								minimum="0.0" maximum="1.0" 
								liveDragging="true"/>
				</mx:HBox>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:Label text="{lang('Thickness:')}" 
							  toolTip="{lang('This controls the border size of the shapes indicating the data points on the axes.')}"/>
					<mx:HSlider id="shapeBorderSizeSlider" 
								width="100%"  minWidth="0"
								snapInterval="1"
								tickInterval="1" 
								labels="{['0', '1', '2', '3', '4', '5']}"
								minimum="0" maximum="5"
								liveDragging="true"/>
				</mx:HBox>
			</mx:HBox>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Line Opacity:')}" toolTip="{lang('Use this control to see how transparent lines are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}"/>
				<mx:HSlider id="alphaSlider"
							width="100%" minWidth="0"
							snapInterval="0.1"
							tickInterval="0.5" labels="{['0%', '50%', '100%']}"
							initialize="alphaSlider.dataTipFormatFunction = PlotterUtils.alphaSliderFormatFunction;"
							minimum="0.0" maximum="1.0" 
							liveDragging="true"/>
				<mx:Label text="{lang('Thickness:')}"/>
				<mx:HSlider id="thicknessSlider" minimum="1" maximum="5" labels="{['1','2','3','4','5']}" snapInterval="1" liveDragging="true" tickInterval="1"/>
			</mx:HBox>
			
			<mx:CheckBox id="curveCheckBox" label="{lang('Curved lines')}"
						 change="_plotter.curveType.value = curveCheckBox.selected ? OldParallelCoordinatesPlotter.CURVE_DOUBLE : OldParallelCoordinatesPlotter.CURVE_NONE"/>
			
			<mx:HBox verticalAlign="middle">
				<mx:Label text="{lang('Label Text Size: ')}"/>
				<mx:HSlider id="labelSizeSlider"
							width="100%" minWidth="0"
							alpha="1.0"
							snapInterval="1"
							tickInterval="5" labels="{['5','10','15','20']}"
							minimum="5" maximum="20" 
							liveDragging="true"/>
				<mx:Label text="{lang('Color:')}"/>
				<ui:CustomColorPicker id="colorPicker"/>
			</mx:HBox>

			<mx:CheckBox id="zoomToSubsetCheckBox" label="{lang('Zoom to Subset')}" 
						 toolTip="{lang('Enables automatic zooming to the subset of data currently displayed')}"
						 creationComplete="linkBindableProperty(_plotter.zoomToSubset, event.target, 'selected')"/>
			
			<ui:SelectableAttributesCheckBoxList id="selectedAttrList" creationComplete="selectedAttrList.setup(outerDocument, outerDocument.attributesToIncludeInProbe)"/>
		</mx:VBox>
		<mx:Script>
			<![CDATA[
				import weave.api.data.ColumnMetadata;
				import weave.api.data.DataType;
				import weave.api.data.IColumnWrapper;
				import weave.api.detectLinkableObjectChange;
				import weave.api.getSessionState;
				import weave.api.linkBindableProperty;
				import weave.api.setSessionState;
				import weave.data.AttributeColumns.DynamicColumn;
				import weave.data.AttributeColumns.EquationColumn;
				import weave.utils.ColumnUtils;
				import weave.utils.PlotterUtils;
				import weave.visualization.plotters.OldParallelCoordinatesPlotter;
				import weave.visualization.plotters.TextGlyphPlotter;
				
				private function get _plotter():OldParallelCoordinatesPlotter
				{
					return outerDocument._plotter;
				}
				private function get labelPlotter():TextGlyphPlotter
				{
					return outerDocument.labelPlotter;
				}
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					colorSelector.columnWrapper = _plotter.lineStyle.color;
					labelSelector.dynamicObject = labelPlotter.text;
					
					xDataSelector.dynamicObject = _plotter.xData;
					yDataSelector.dynamicObject = _plotter.yData;
					groupBySelector.dynamicObject = _plotter.groupBy;
					groupLabelSelector.dynamicObject = labelPlotter.text;
					groupColorSelector.columnWrapper = _plotter.lineStyle.color;
					
					linkBindableProperty(labelPlotter.size.defaultValue, labelSizeSlider,"value");
					linkBindableProperty(labelPlotter.color.defaultValue, colorPicker, "selectedColor");
					linkBindableProperty(_plotter.shapeBorderAlpha, shapeBorderAlphaSlider, "value");
					linkBindableProperty(_plotter.lineStyle.alpha.defaultValue, alphaSlider, "value");
					linkBindableProperty(_plotter.shapeSize, shapeSizeSlider, "value");
					linkBindableProperty(_plotter.lineStyle.weight.defaultValue, thicknessSlider, "value");
					linkBindableProperty(_plotter.shapeToDraw, shapeCombo, "selectedItem");
					linkBindableProperty(_plotter.shapeBorderThickness, shapeBorderSizeSlider, "value");
					linkBindableProperty(_plotter.shapeBorderColor, shapeBorderColorPicker, "selectedColor");

					_plotter.curveType.addGroupedCallback(this, handleCurveType, true);
					function handleCurveType():void
					{
						curveCheckBox.selected = _plotter.curveType.value == OldParallelCoordinatesPlotter.CURVE_DOUBLE;
					}
					
					_plotter.groupBy.addGroupedCallback(this, updateGroupKeyTypePrompt, true);
					
					_plotter.xData.addGroupedCallback(this, updateFilterText);
					_plotter.xValues.addGroupedCallback(this, updateFilterText, true);
				}
				
				private function updateGroupKeyTypePrompt():void
				{
					groupKeyType.prompt = _plotter.groupBy.getMetadata(ColumnMetadata.DATA_TYPE);
				}
				
				private function updateFilterText():void
				{
					xValuesInput.text = WeaveAPI.CSVParser.createCSVRow(_plotter.getXValues());
				}
				
				private static const HELP_KT_XYGB:String = "'X', 'Y', and 'Group by' must all have the same keyType.";
				private static const HELP_DT_GROUP:String = HELP_KT_XYGB + " The values in the 'Group by' column should be foreign keys used by the 'Group color' and 'Group label' columns.";
				private static const HELP_KT_COLOR:String = "The keyType of the color column should match either the keyType of the 'Group by' column or the 'Group keyType.'";
				private static const HELP_KT_LABEL:String = "The keyType of the label column must equal the 'Group keyType.'";
				
				private var _groupByErrorStrings:Dictionary = new Dictionary(true);
				private function initDynamicColumnComponent(component:DynamicColumnComponent, helpContent:String):void
				{
					component.helpContent = helpContent;
					component.errorStringFunction = function():String {
						if (detectLinkableObjectChange(initDynamicColumnComponent, _plotter, labelPlotter))
						{
							var ktX:String = _plotter.xData.getMetadata(ColumnMetadata.KEY_TYPE);
							var ktY:String = _plotter.yData.getMetadata(ColumnMetadata.KEY_TYPE);
							var ktGB:String = _plotter.groupBy.getMetadata(ColumnMetadata.KEY_TYPE);
							var dtGB:String = _plotter.groupBy.getMetadata(ColumnMetadata.DATA_TYPE);
							var ktC:String = _plotter.lineStyle.color.getMetadata(ColumnMetadata.KEY_TYPE);
							var ktL:String = labelPlotter.text.getMetadata(ColumnMetadata.KEY_TYPE);
							var fkt:String = _plotter.getForeignKeyType();
							
							if (!dtGB || dtGB == DataType.STRING)
								dtGB = ktC;
							
							for each (var dcc:DynamicColumnComponent in [xDataSelector, yDataSelector, groupBySelector])
							{
								_groupByErrorStrings[dcc] = ktX == ktY && ktY == ktGB ? '' : lang(HELP_KT_XYGB);
								dcc.updateError();
							}
							
							_groupByErrorStrings[groupColorSelector] = ktC == ktGB || ktC == fkt ? '' : lang(HELP_KT_COLOR);
							_groupByErrorStrings[groupLabelSelector] = ktL == fkt ? '' : lang(HELP_KT_LABEL);
							
							groupColorSelector.updateError();
							groupLabelSelector.updateError();
							
							generateReverseLookupControls.visible =
								generateReverseLookupControls.includeInLayout =
								ktGB == ktL;
						}
						
						return _groupByErrorStrings[component];
					};
				}
				
				private function handleCurveCheckBox():void
				{
					if (curveCheckBox.selected)
						_plotter.curveType.value = OldParallelCoordinatesPlotter.CURVE_DOUBLE;
					else
						_plotter.curveType.value = OldParallelCoordinatesPlotter.CURVE_NONE;
				}
				
				/**
				 * This function generates a label equation using the current Label column and the plotter's filterColumn
				 * and makes it the new Label column
				 */
				private function generateReverseLookup():void
				{
					if (!_plotter.enableGroupBy.value)
						return;
					
					var col:IColumnWrapper = labelPlotter.text;
					// NOTE: the equation column that gets generated does not report the correct keys.
					// It incorrectly reports the keys of groupBy because those are the keys from the column variables.
					// Because of this, we cannot rely on it as a key source or a color column.
					
					var dataColumn:DynamicColumn = ColumnUtils.hack_findInternalDynamicColumn(col);
					
					if (!dataColumn.getInternalColumn())
						return;
					if (ColumnUtils.getKeyType(dataColumn) != ColumnUtils.getKeyType(_plotter.groupBy))
						return;
					if (dataColumn.getInternalColumn() is EquationColumn)
						return;
					
					var foreignKeyType:String = _plotter.getForeignKeyType();
					var dataTitle:String = ColumnUtils.getTitle(dataColumn);
					var dataType:String = ColumnUtils.getDataType(dataColumn);
					var dataState:Object = getSessionState(dataColumn);
					var dataEquation:EquationColumn = dataColumn.requestLocalObject(EquationColumn, false) as EquationColumn;
					dataEquation.delayCallbacks();
					var dataVariable:DynamicColumn = dataEquation.variables.requestObject("data", DynamicColumn, false);
					setSessionState(dataVariable, dataState);
					dataEquation.variables.requestObjectCopy("groupBy", _plotter.groupBy);
					dataEquation.setMetadataProperty(ColumnMetadata.TITLE, lang("{0} (reverse lookup)", dataTitle));
					dataEquation.setMetadataProperty(ColumnMetadata.KEY_TYPE, foreignKeyType);
					dataEquation.setMetadataProperty(ColumnMetadata.DATA_TYPE, dataType);
					dataEquation.equation.value = 'var associatedKeys = getAssociatedKeys(groupBy, key, true);\n' +
						'return associatedKeys ? data.getValueFromKey(associatedKeys[0], dataType) : cast(undefined, dataType);';
					dataEquation.resumeCallbacks();
				}

			]]>
		</mx:Script>
			
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
