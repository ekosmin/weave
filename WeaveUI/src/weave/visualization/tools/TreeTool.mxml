<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<ui:DraggablePanel xmlns="weave.visualization.tools.*"
                   xmlns:mx="http://www.adobe.com/2006/mxml"
                   xmlns:ui="weave.ui.*" 
                   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
                   layout="absolute" implements="weave.api.ui.IVisTool, weave.api.ui.ISelectableAttributes"
                   title="{lang('Tree')}" xmlns:editors="weave.editors.*">
<ui:CustomTree width="100%" height="100%" id="treeView" allowMultipleSelection="true" dataDescriptor="{new ParentColumnTreeDescriptor()}"/>
<mx:Script>
<![CDATA[
	import mx.controls.listClasses.IListItemRenderer;
	import mx.events.ListEvent;
	import mx.events.TreeEvent;
	import mx.rpc.events.ResultEvent;
	
	import weave.Weave;
	import weave.api.data.IQualifiedKey;
	import weave.api.getCallbackCollection;
	import weave.api.linkBindableProperty;
	import weave.api.newLinkableChild;
	import weave.api.ui.IVisTool;
	import weave.core.LinkableBoolean;
	import weave.core.LinkableHashMap;
	import weave.data.AttributeColumns.DynamicColumn;
	import weave.data.KeySets.KeyFilter;
	import weave.data.KeySets.KeySet;
	import weave.data.KeySets.KeySetUnion;

public const parentColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleParentChange, true);
public const labelColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleLabelColumnChange, true);
public const iconColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleIconColumnChange, true);
public const sortColumn:DynamicColumn = newLinkableChild(this, DynamicColumn, handleIconColumnChange, true);

public const enableProbing:LinkableBoolean = newLinkableChild(this, LinkableBoolean);
public const probeIncludesChildren:LinkableBoolean = newLinkableChild(this, LinkableBoolean);
public const selectIncludesChildren:LinkableBoolean = newLinkableChild(this, LinkableBoolean);
public const expandToShowSelected:LinkableBoolean = newLinkableChild(this, LinkableBoolean);

public const valueToIconMapping:LinkableHashMap = newLinkableChild(this, LinkableHashMap);

public const expandedItems:KeySet = newLinkableChild(this, KeySet);

private const _probe:KeySet = Weave.defaultProbeKeySet;
private const _selection:KeySet = Weave.defaultSelectionKeySet;
private const _subset:KeyFilter = Weave.defaultSubsetKeyFilter;

private const _columnUnion:KeySetUnion = new KeySetUnion();

private var dataDescriptor:ParentColumnTreeDescriptor;

WeaveAPI.ClassRegistry.registerImplementation(IVisTool, TreeTool, "Tree Tool");

override protected function inConstructor():void
{
    super.inConstructor();
    
}

private function handleSelectionChange(event:ListEvent):void
{
    if (treeView.selectedItems == null) 
    {
        _selection.clearKeys();
        return;
    }

    if (!selectIncludesChildren.value)
    {
        _selection.replaceKeys(treeView.selectedItems);
        return;
    }

    /* This is only reached if we are selecting all children for this node */
    var all_children:Array = [];

    for (var idx:String in treeView.selectedItems)
    {
        var item:IQualifiedKey = treeView.selectedItems[idx] as IQualifiedKey;
        var children:Array = dataDescriptor.getChildrenRecursive(item).source;
        all_children = all_children.concat(children);
    }

    _selection.replaceKeys(all_children);

    return;
}

private function handleItemExpansion(event:TreeEvent):void
{
    if (treeView.openItems as Array != null)
        expandedItems.replaceKeys(treeView.openItems as Array);
    return;
}

private function handleRollOver(event:ListEvent):void
{
    if (!enableProbing.value) return;

    var renderer:IListItemRenderer = treeView.indexToItemRenderer(event.rowIndex);
    var keys:Array;

    var probedKey:IQualifiedKey = renderer.data as IQualifiedKey;
    if (probeIncludesChildren.value)
    {
        keys = (treeView.dataDescriptor as ParentColumnTreeDescriptor).getChildrenRecursive(probedKey).source;
    }
    else
    {
        keys = [probedKey];
    }

    _probe.replaceKeys(keys);

    return;
}

private function handleRollOut(event:MouseEvent):void
{
    if (!enableProbing.value) return;

    _probe.clearKeys();
}
private function columnLabelFunction(item:Object):String
{
    var label:String;
    if (labelColumn.getInternalColumn())
    {
        label = labelColumn.getValueFromKey(item as IQualifiedKey, String);
    }
    else
    {
        label = (item as IQualifiedKey).localName;
    }
    return label;
}
private function iconFunction(item:Object):Class
{
	return null;
	//TODO - this won't work because we have to return a Class here.
	// Instead of using iconFunction, we need to use a custom TreeItemRenderer.
	
	var key:IQualifiedKey = item as IQualifiedKey;
	if (!key)
		return null;
	var url:String = iconColumn.getValueFromKey(key, String);
    var icon:* = _iconLookup[url];
	if (!icon && url)
		WeaveAPI.URLRequestUtils.getContent(this, new URLRequest(url), handleIcon, null, url);
	
	return icon; // BitmapData
}
private var _iconLookup:Object = {};
private function handleIcon(event:ResultEvent, url:String):void
{
	_iconLookup[url] = event.result;
	treeView.invalidateList();
}
private function updateSelection():void 
{
    treeView.selectedItems = _selection.keys;
}
/* TODO Fix probing */
private function updateProbe():void
{
	treeView.invalidateList();
	treeView.validateNow();
	treeView.highlightItemsForced(_probe.keys, _selection.containsKey);
}

private function updateExpanded():void
{
    treeView.openItems = expandedItems.keys;
}

override protected function childrenCreated():void
{
    super.childrenCreated();

    parentColumnComponent.dynamicObject = parentColumn;
    labelColumnComponent.dynamicObject = labelColumn;
    iconColumnComponent.dynamicObject = iconColumn;
    sortColumnComponent.dynamicObject = sortColumn;

    _columnUnion.addKeySetDependency(parentColumn);
    _columnUnion.addKeySetDependency(labelColumn);
    _columnUnion.addKeySetDependency(iconColumn);
    _columnUnion.addKeySetDependency(sortColumn);

    dataDescriptor = treeView.dataDescriptor as ParentColumnTreeDescriptor;

    treeView.addEventListener(ListEvent.ITEM_ROLL_OVER, handleRollOver);
    treeView.addEventListener(MouseEvent.ROLL_OUT, handleRollOut);
    treeView.addEventListener(ListEvent.CHANGE, handleSelectionChange);
    treeView.addEventListener(TreeEvent.ITEM_CLOSE, handleItemExpansion);
    treeView.addEventListener(TreeEvent.ITEM_OPEN, handleItemExpansion);

    treeView.labelFunction = columnLabelFunction;

    _selection.addGroupedCallback(this, updateSelection);
    _probe.addGroupedCallback(this, updateProbe);
    expandedItems.addGroupedCallback(this, updateExpanded);

    linkBindableProperty(enableProbing, enableProbingCheckBox, "selected");
    linkBindableProperty(probeIncludesChildren, probeIncludesChildrenCheckBox, "selected");
    linkBindableProperty(selectIncludesChildren, selectIncludesChildrenCheckBox, "selected");
    linkBindableProperty(expandToShowSelected, expandToShowSelectedCheckBox, "selected");
	
	// sorting depends on column statistics
	getCallbackCollection(WeaveAPI.StatisticsCache.getColumnStatistics(sortColumn)).addGroupedCallback(this, handleIconColumnChange, true);
}

private function handleIconColumnChange():void
{
    treeView.iconFunction = iconColumn.getInternalColumn() ? iconFunction : null;
    iconMappingGrid.enabled = (iconColumn.getInternalColumn() != null);
/*
    var idx:int;
    var values:Object = {};
    var keys:Array = iconColumn.keys;
    for (idx = 0; idx < keys.length; idx++)
    {
        var key:IQualifiedKey = keys[idx] as IQualifiedKey;
        values[key.localName] = true;
    }

    weaveTrace(values);
*/
    refresh();
}
private function handleLabelColumnChange():void
{
    refresh();
}
private function refresh():void
{
    dataDescriptor.updateCache(parentColumn, _columnUnion, sortColumn);
    treeView.dataProvider = dataDescriptor.getChildren(null);
    treeView.invalidateDisplayList();
}
private function handleParentChange():void
{
    dataDescriptor.updateCache(parentColumn, _columnUnion, sortColumn);
    treeView.dataProvider = dataDescriptor.getChildren(null);

    return;
}

public function getSelectableAttributes():Array
{
    return [parentColumn, labelColumn, sortColumn, iconColumn];
}

public function getSelectableAttributeNames():Array
{
    return ['Parent', 'Label', 'Sort' ,'Icon'];
}

]]>
</mx:Script>
<ui:ControlPanel>
        <mx:VBox label="{lang('Attributes')}">
            <ui:DynamicColumnComponent id="parentColumnComponent"/>
            <ui:DynamicColumnComponent id="labelColumnComponent"/>
            <ui:DynamicColumnComponent id="iconColumnComponent" includeInLayout="{iconMappingGrid.enabled}" visible="{iconMappingGrid.enabled}"/>
            <ui:DynamicColumnComponent id="sortColumnComponent" visible="true"/>
            <ui:Indent>
                <mx:VBox includeInLayout="{iconMappingGrid.enabled}" visible="{iconMappingGrid.enabled}">
                    <mx:Label text="{lang('Icon Column Value Mapping')}" enabled="{iconMappingGrid.enabled}"/>
                    <mx:DataGrid id="iconMappingGrid" enabled="false"/>
                </mx:VBox>
            </ui:Indent>
        </mx:VBox>
        <mx:VBox label="{lang('Advanced')}">
            <mx:CheckBox id="enableProbingCheckBox" label="{lang('Enable mouseover linking')}"/>
            <ui:Indent>
                <mx:CheckBox id="probeIncludesChildrenCheckBox" enabled="{enableProbingCheckBox.selected}" label="{lang('Linking includes all children.')}"/>
            </ui:Indent>
            <mx:CheckBox id="selectIncludesChildrenCheckBox" label="{lang('Include children in selections.')}"/>
            <mx:CheckBox id="expandToShowSelectedCheckBox" label="{lang('Expand to show selected children.')}" visible="false"/>
        </mx:VBox>
        <editors:WindowSettingsEditor target="{this}"/>
    </ui:ControlPanel>
</ui:DraggablePanel>