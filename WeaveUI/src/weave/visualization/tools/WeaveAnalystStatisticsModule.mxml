<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
	This exhibits all important statistics about a column in a datagrid
    It also allows for viewing different correlation coefficients between columns

	@author spurushe
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="Data Statistics"
				x="15%" width="70%" y="15%" height="70%"
				backgroundColor="#EFF4BC" 
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool_R" xmlns:userControls="weave.ui.userControls.*"
				>
	
	<mx:HBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
		
		<!--1-->
		<mx:VBox width="20%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" >
			<mx:Label text="Distribution of column data"/>
			<mx:List rowHeight="100" width="100%" height="100%" id="distrList" dataProvider = "{distributionObjCanvasArray}">
				<mx:itemRenderer>
					<mx:Component>
						<mx:HBox height="50%" verticalScrollPolicy="off" horizontalScrollPolicy="off" >
							<mx:Label id="lb"  fontWeight="bold"/>
							<mx:Image  id="img"  />
							<mx:Script>
								<![CDATA[
									override public function set data(value:Object):void{
										
										//super.data = value;
										if(value != null)
										{
											lb.text = value.label;
											img.source = value.icon;
										}
									}
								]]>
							</mx:Script>
							
						</mx:HBox>
					</mx:Component>
				</mx:itemRenderer>
			</mx:List>
		</mx:VBox>
		
		<!--2-->
		<mx:VBox paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
			
			<mx:Label text="Data Statistics"/>
			<mx:DataGrid id="dg">
				
			</mx:DataGrid>
		</mx:VBox>
		</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			import mx.controls.DataGrid;
			import mx.controls.Image;
			import mx.controls.List;
			import mx.managers.PopUpManager;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableHashMap;
			import weave.data.KeySets.KeySet;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DataStatisticsTool, "Data Statistics Tool");
			
			
			public const variables:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			public var script:String = "";
			private var joinedColumns:Array ;
			public var outputNames:Array = new Array();
			public var finalGridDisplayArray:Array = new Array();
			public var colNames:Array = new Array();
			public var latestjoinedColumnKeys:Array = new Array();
			public var sentToRcounter:int = 0; public var receivedFromRcounter:int = 0;
			public var sendingStatColstoR:int = 0;public var receivingStatColsFromR:int = 0;
			public var binnedColumns:Array = new Array();//columns containing binning information which are to be drawn
			public var attributeColumns:Array = new Array();
			
			override protected function inConstructor():void
			{
				super.inConstructor();				
			}
			
			override protected function childrenCreated():void
			{	
				super.childrenCreated();
			}
			
			private static function get selection():KeySet
			{
				return Weave.root.getObject(Weave.DEFAULT_SELECTION_KEYSET) as KeySet;
			}
			
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			}
			
			
			public function normalizationinR():void 
			{
				var analystInstance:WeaveAnalyst = WeaveAnalyst.getInstance();
				if (WeaveAPI.SessionManager.linkableObjectIsBusy(analystInstance.inputColumns))//do the next chunk of code only after _plotter.columns is filled
					return;
				
				var selectedColumns:Array = analystInstance.inputColumns.getObjects(); //Columns from ColumnListComponent 
				//var attributeColumns:Array = new Array();
				for (var f:int = 0; f < selectedColumns.length; f++)
				{
					var _col:IAttributeColumn = selectedColumns[f];
					var dataType:String = ColumnUtils.getDataType(_col);
					
					
					if(dataType == "number")//screening only numeric columns for normalization
					{
						colNames.push(ColumnUtils.getTitle(_col  as IAttributeColumn));
						attributeColumns.push( _col as IAttributeColumn);
					}
					
				}
				//columns sent as a matric, all at one time
				var inputValues:Array = new Array(); var inputNames:Array;
				var tag:String = "normalization"
				inputNames = ["mymatrix"];
				var outputNames:Array = ["normOutput"];
				var normScript:String = "frame <- data.frame(mymatrix)\n" +
					"donorm <- function(frame){\n" +
					"RR <- nrow(frame)\n"+
					"CC <- ncol(frame)\n"+
					"for (z in 1:CC){\n"+
					"maxr <- max(frame[z])\n"+
					"minr <- min(frame[z])\n"+
					"for(i in 1:RR){\n"+
					" frame[i,z] <- (frame[i,z] - minr) / (maxr - minr)\n"+
					" }\n"+
					"}\n"+
					"frame\n"+
					"}\n"+
					"normOutput <- donorm(frame)\n";
				
				var result:Array = joinColumns(attributeColumns);
				latestjoinedColumnKeys = result[0];
				joinedColumns = result[1];
				if ( latestjoinedColumnKeys.length != 0)
				{
					inputValues.push(joinedColumns); 
					var query:AsyncToken = Rservice.runScript(null,inputNames,inputValues,outputNames,normScript,"",false,false,false);
					addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault,[latestjoinedColumnKeys,tag]);
				}
			}
			
			
			
			//this function returns a histogram object from R for plotting in Weave
			private function binningDataFromR(_normColumns:Array):void
			{
					sentToRcounter = 0;
					receivedFromRcounter = 0;
					var tag:String = "binning";
				//columns sent as vectors, one at a time
					for(var i:int = 0; i < _normColumns.length; i++)
					{
						var inputValues:Array = new Array(); var inputNames:Array = new Array();
						inputValues.push(_normColumns[i]);
						inputNames = ["myColumn"];
						var binningScript:String = "answer <- hist(myColumn, plot = FALSE)";
						var resultNames: Array = new Array(); resultNames = ["answer$counts","answer$breaks"];
						
						var query:AsyncToken = Rservice.runScript(latestjoinedColumnKeys, inputNames, inputValues, resultNames, binningScript,"", false, false, false);
						addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault, [latestjoinedColumnKeys,tag]);
						sentToRcounter++;
					}
						
			
			}
			
			public function displayStatistics():void
			{
				var analystInstance:WeaveAnalyst = WeaveAnalyst.getInstance();
				
				if(WeaveAPI.SessionManager.linkableObjectIsBusy(analystInstance.inputColumns))
					return;
				
				
				var tag:String = "statistics";
				var statoutputNames:Array = ["StatObj$ObjMax", "StatObj$ObjMin","StatObj$ObjVar", "StatObj$ObjAvg", "StatObj$ObjMedian"];
				var statHeaders:Array = ["Maximum","Minimum","Variance","Mean","Median"];
				var statScript:String = "DoStat <- function(myVector)" +
				"structure(" +
				"list(ObjMax = max(myVector)," +
				"ObjMin = min(myVector)," +
				"ObjVar = var(myVector)," +
				"ObjAvg = mean(myVector)," +
				"ObjMedian = median(myVector)), class = \"DoStat\")\n" +
				"StatObj <- DoStat(myVector)\n";
					
				for (var u:int = 0 ; u < statHeaders.length; u++)
				{
					finalGridDisplayArray[u] = new Array();
					finalGridDisplayArray[u].push(statHeaders[u]);
				}
					
				for(var i:int = 0; i < attributeColumns.length; i++)
				{
					var inputValues:Array = new Array();
					inputValues.push(joinedColumns[i]);
					
					var inputNames:Array = ["myVector"];
					var query:AsyncToken = Rservice.runScript(latestjoinedColumnKeys,inputNames,inputValues, statoutputNames, statScript, "",false, false, false);
					addAsyncResponder(query,handleStatScriptResult, handleRunScriptFault,latestjoinedColumnKeys);
					sendingStatColstoR++;
				}
			}
			
			private function handleStatScriptResult(event:ResultEvent, token:Object = null):void
			{
				receivingStatColsFromR++;
				var Robj:Array = event.result as Array;
				var tempColumnNames:Array = new Array(); 
				for(var j:int = 0; j < colNames.length; j++)//we dont want to disturb or alter the colNames
				{
					tempColumnNames[j] = colNames[j];
				}
				var tempArray:Array = new Array();//collects results for one column
				
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					tempArray.push(rResult);
					finalGridDisplayArray[i].push(rResult.value);
				}
			
				
				if(sendingStatColstoR == receivingStatColsFromR)
				{
					tempColumnNames.unshift("Statistics");
					finalGridDisplayArray.unshift(tempColumnNames);
					dg.initialize();
					dg.dataProvider = finalGridDisplayArray;
				}
			}
			
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{
				/*One single handleRunScriptResult function handles different results returned from mutiple R asynchronous calls
				Hence we use the 'tag' parameter, which is a part of the token
				This tag tells us, which asynchronous call is being handled,  for example normalization, binning, etc*/
				
				
				var temRObjects:Array = new Array();
				var columnResult:Array = new Array();//collects results for one column
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;		
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					
					if(token[1] == "binning")
					{
						// now plot the bins 
						columnResult.push(rResult);
					
					}
					
					if(token[1] == "normalization")
					{
						temRObjects = (rResult.value) as Array;
					}
					
				}	
				
				if(token[1] == "normalization")
				{
					//Once normalized Columns are returned from R, send them into R for binning
					binningDataFromR(temRObjects);
					
				}
				
				if(token[1] == "binning")
				{
					receivedFromRcounter++;
					binnedColumns.push(columnResult);//collects results of all columns
					
				}
				
				//draw the distributions once all the binning data has been returned
				if(sentToRcounter == receivedFromRcounter)
				{
					drawingColumnDistribution(binnedColumns);
				}
				
			}
			
			
			[Bindable]
			public var distributionObjCanvasArray:Array = new Array();//collects all the canvases for all the columns (one canvas per column)
			private function drawingColumnDistribution(_binnedColumns:Array):void
			{
				//x axis values are normalized between 0 and 1 (are multipled by factor to fit canvas size)
				//bar heights are normalized using the tallest bar
				distributionObjCanvasArray = [];
				distrList.labelField = "label"; distrList.iconField = "icon";
				
				// looping over columns
				for(var k:int = 0; k < _binnedColumns.length; k++)
				{
					var distributionObj:Object = new Object();
					
					distributionObj["label"] = colNames[k];
					var can:Canvas = new Canvas();
					can.width= 100; 
					can.height = 100;
					can.graphics.clear();
					
					can.graphics.lineStyle(1,0x000000,0.75);
					
					var margin:Number = 20;
					var columnData:Array = _binnedColumns[k];
					var colFreq:Array = ((columnData[0] as RResult).value as Array);//first element is the frequencies, hence hard coded
					var colBreaks:Array = ((columnData[1] as RResult).value as Array);//second elemet is the range split
					
					//drawing x- axis
					can.graphics.moveTo(margin, (can.height - margin));
					can.graphics.lineTo((can.width - margin), (can.height - margin));
					
					//ratio
					var scaleFactor:Number = can.height - (margin*2); //margin on the left and right hand side
					
					var maxColHeight:Number = Math.max.apply(null,colFreq);//getting the maximum height of the bars and normalizing the bar height
					
					
					var startPoint:Point = new Point(); startPoint.x = 20; startPoint.y = (can.height - margin);
					
					//drawing the distribution
					can.graphics.moveTo(startPoint.x, startPoint.y);
					//looping over the bins in each column
					for(var i :int = 0; i < colFreq.length; i++)
					{
						var endP:Point = new Point();
						var middleP:Point = new Point();
						var middleP2:Point = new Point();
						
						var normBarHeight:Number = colFreq[i]/maxColHeight;//gives a value between 0 and 1
						//range between two succesiive bins
						var range: Number = colBreaks[i+1] - colBreaks[i];
						middleP.x = startPoint.x ; middleP.y =  startPoint.y - (normBarHeight * scaleFactor);
						middleP2.x = middleP.x + (range * scaleFactor); middleP2.y = middleP.y;
						endP.x = middleP2.x; endP.y = startPoint.y ;
						
						
						can.graphics.lineTo(middleP.x,  middleP.y);
						can.graphics.lineTo(middleP2.x, middleP2.y);
						can.graphics.lineTo(endP.x, endP.y);
						
						startPoint = endP;
						can.graphics.moveTo(startPoint.x, startPoint.y);
						
					} 
					
				
					distributionObj["icon"] = can;
					distributionObjCanvasArray[k] = distributionObj;//pushing the respective distribution of the column
				}
				 
			}
			
			
			//This function handles the matrices returned by the correlation scripts
			private function handleCorrRunScriptResult(event:ResultEvent, token:Object = null):void
			{
				var Robj:Array = event.result as Array;				
				
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
				}	
				
				var dg:DatagridDisplay = new DatagridDisplay();dg.initialize();
				dg.title = (token[0] as String); 
				dg.actualDG.dataProvider = rResult.value;
				mx.managers.PopUpManager.addPopUp(dg, this,false);
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError(event);
			}
			
			
		]]>
	</mx:Script>
</DraggablePanel>