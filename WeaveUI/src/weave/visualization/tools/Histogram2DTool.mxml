<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:userControls="weave.ui.userControls.*"
			   xmlns:settings="weave.ui.settings.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableVariable;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.ColorController;
			import weave.ui.DraggablePanel;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.Histogram2DPlotter;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, Histogram2DTool, "Histogram 2D");
			
			internal function get plotter():Histogram2DPlotter
			{
				return mainPlotter as Histogram2DPlotter;
			}
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				// lock dynamic objects into place
				initializePlotters(Histogram2DPlotter, true);
				visualization.enableProbeLine(false, true);
				
				xAxisPlotter.forceTickCount.value = true;
				yAxisPlotter.forceTickCount.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.enableProbeLine(true, true);
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "10";
				
				visualization.plotManager.marginLeftNumber.addGroupedCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this, updateAxisLabels);
				getCallbackCollection(mainPlotter).addGroupedCallback(this, updateAxisLabels, true);
				
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(plotter.xColumn); })
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(plotter.yColumn); })
						
				visualization.enableAutoZoomXToNiceNumbers.value = false;
				visualization.enableAutoZoomYToNiceNumbers.value = false;
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				visualization.additionalProbeColumns = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("2D Histogram of {0} vs {1}", ColumnUtils.getTitle(plotter.xColumn), ColumnUtils.getTitle(plotter.yColumn));
			}
			
			public const customTickCounts:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			
			private function updateAxisLabels():void
			{
				handlePanelTitleChange();
				visualization.bottomMarginColumn = plotter.xColumn;
				visualization.leftMarginColumn = plotter.yColumn;
				
				var xBinCol:BinnedColumn = plotter.xBinnedColumn;
				
				if (!customTickCounts.value)
					xAxisPlotter.tickCountRequested.value = xBinCol.numberOfBins;
				xAxisPlotter.tickMinValue.value = 0;
				xAxisPlotter.tickMaxValue.value = xBinCol.numberOfBins - 1;	
				xAxisPlotter.setLabelFunction(xBinCol.deriveStringFromNumber, xBinCol);
				
				var yBinCol:BinnedColumn = plotter.yBinnedColumn;
				
				if (!customTickCounts.value)
					yAxisPlotter.tickCountRequested.value = yBinCol.numberOfBins;
				yAxisPlotter.tickMinValue.value = 0;
				yAxisPlotter.tickMaxValue.value = yBinCol.numberOfBins - 1;	
				yAxisPlotter.setLabelFunction(yBinCol.deriveStringFromNumber, yBinCol);
				
				
				xAxisPlotter.setSideAxisName(ColumnUtils.getTitle(plotter.xColumn), 0, 0, visualization.plotManager.marginBottomNumber.value - 3, BitmapText.VERTICAL_ALIGN_BOTTOM);
				yAxisPlotter.setSideAxisName(ColumnUtils.getTitle(plotter.yColumn), -90, -visualization.plotManager.marginLeftNumber.value, 0, BitmapText.VERTICAL_ALIGN_TOP);
			}
		]]>
	</mx:Script>

	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox label="{lang('Visualization Controls')}">
			<ui:DynamicColumnComponent id="xColumnComponent" label="{lang('X Column')}"/>
			<ui:DynamicColumnComponent id="yColumnComponent" label="{lang('Y Column')}"/>
			<ui:SelectableAttributesCheckBoxList id="selectedAttrList" creationComplete="selectedAttrList.setup(outerDocument, outerDocument.attributesToIncludeInProbe)"/>
		</mx:VBox>
		<mx:VBox label="{lang('Binning Controls')}">
				<mx:HBox>
					<mx:Label text="{lang('Select Column:')}"/>
					<mx:RadioButtonGroup id="binColGroup" change="handleBinColRadioButtonChange()"/>
					<mx:RadioButton groupName="binColGroup" label="{lang('X Column')}" value="xBinCol" id="xBinColRadioButton" selected="true"/>
					<mx:RadioButton groupName="binColGroup" label="{lang('Y Column')}" value="yBinCol" id="yBinColRadioButton"/>
				</mx:HBox>
			<ui:BinningDefinitionEditor id="binEditor" showNoneOption="false"/>
		</mx:VBox>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				import weave.ui.ColorController;
				import weave.ui.DraggablePanel;
				import weave.visualization.plotters.Histogram2DPlotter;
				
				private function get plotter():Histogram2DPlotter { return outerDocument.plotter; }
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					handleBinColRadioButtonChange();
					xColumnComponent.dynamicObject = plotter.xColumn;
					yColumnComponent.dynamicObject = plotter.yColumn;
				}
				
				private function handleBinColRadioButtonChange():void
				{
					var selectedCol:String = binColGroup.selectedValue as String;
					
					//it is null when the tool loads for the first time and so it defaults to the x column
					if (selectedCol == "xBinCol" || selectedCol == null)
					{
						xBinColRadioButton.setStyle('fontWeight','bold');
						yBinColRadioButton.setStyle('fontWeight','normal');
						
						binEditor.setTarget(plotter.xBinnedColumn);
					}
					else if (selectedCol == "yBinCol")
					{
						yBinColRadioButton.setStyle('fontWeight','bold');
						xBinColRadioButton.setStyle('fontWeight','normal');
						
						binEditor.setTarget(plotter.yBinnedColumn);
					}
				}

			]]>
		</mx:Script>
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
