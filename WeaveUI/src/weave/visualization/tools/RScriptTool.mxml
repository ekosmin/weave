<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				xmlns:ui="weave.ui.*" 
				title="{lang('R Script Tool')}"
				>
	<mx:Panel id="userControlPanel"
			  borderColor="0x000000" 
			  backgroundColor="0x000000" 
			  backgroundAlpha="0.21" 
			  headerHeight="5" 
			  height="100%" 
			  width="100%" 
			  borderAlpha="0.2"
			  cornerRadius="0">
		
		<mx:Accordion height="100%" 
					  width="100%"
					  backgroundAlpha="0.21" 
					  borderThickness="5.0" 
					  borderStyle="outset"  borderColor="0xFFFFFF"
					  creationPolicy="all">
			<mx:Panel id="RscriptPanel" label="{lang('KMeans Clustering')}">
				<ui:DynamicColumnComponent label="{lang('R-Script Xcolumn')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = xRcolumn"/>
				<ui:DynamicColumnComponent label="{lang('R-Script ycolumn')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = yRcolumn"/>
				<mx:HBox>
					<mx:VBox>
						<mx:Label text="{lang('Number of Clusters:')}"/>
						<mx:Label text="{lang('Number of Iterations:')}"/>
					</mx:VBox>
					<mx:VBox>
						<mx:TextInput id="clusterNum" text="{clusterNumValue}"/>							
						<mx:TextInput id="iterNum" text="{iterNumValue}"/>							
					</mx:VBox>
					
				</mx:HBox>
				
				<mx:Button id="rScriptButton" label="{lang('Run Script')}" click="Kmeans_clickHandler(event)"/>						
			</mx:Panel>	
			<mx:Panel id="UserScript" label="{lang('User Script')}">
				
			</mx:Panel>
		</mx:Accordion>		
	</mx:Panel>
	<mx:Script>
		<![CDATA[
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.reportError;
			import weave.data.AttributeColumns.CSVColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.KeySet;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
		
			[Bindable]
			private var clusterNumValue:int = 3;
			[Bindable]
			private var iterNumValue:int = 3;
			
		
			override protected function inConstructor():void
			{
				super.inConstructor();
			}
			
			private function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			
			
			public const xRcolumn:DynamicColumn = new DynamicColumn();
			public const yRcolumn:DynamicColumn = new DynamicColumn();
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			private var _sessionFileLoader:FileReference = null;
			private var _defaultsFilename:String = null;
			
			protected function Kmeans_clickHandler(event:MouseEvent):void
			{
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 
				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				
				attributeColumns.push(xRcolumn as IAttributeColumn);
				attributeColumns.push(yRcolumn as IAttributeColumn);
				
				//joinColumns Called only When columns are added to ColumnListComponent
				
				result = joinColumns(attributeColumns);
				joinedColumnKeys = result[0];
				joinedColumns = result[1];
				
				
				//Values need to assign for Column names in R
				var inputValues:Array = joinedColumns;
				var clusterNumArray:Array = [Number(clusterNum.text)];
				inputValues.push(clusterNumArray);
				var iterNumArray:Array = [Number(iterNum.text)];
				inputValues.push(iterNumArray);
				//Names for Column that need to be used in R
				var inputNames:Array =["ReferencedColumn","ReferencedColumn2"];
				inputNames.push("cnum");
				inputNames.push("inum");
				//Script for R input
				var Rstring:String = "dataframe1 <- data.frame(ReferencedColumn, ReferencedColumn2)\n"
+"Clustering <- function(clusternumber,iter.max){\n"
+"result1 <- kmeans(dataframe1, clusternumber, iter.max)\n"
+"result2 <- kmeans(dataframe1, clusternumber, (iter.max - 1))\n"
+"while(result1$centers != result2$centers){\n"
+"iter.max <- iter.max + 1\n"
+"result1 <- kmeans(dataframe1, clusternumber, iter.max)\n"
+"result2 <- kmeans(dataframe1, clusternumber, (iter.max - 1))\n"
+"}\n"
+"print(result1)\n"
+"print(result2)\n"
+"}\n"
+"Cluster <- Clustering(cnum,inum)\n";
				// "\r" - replaced by "/n" in all occurance
				/*  while(Rstring.search("\r") > 0){
					Rstring = Rstring.replace("\r","\n");
				}  */
				var script:String = Rstring;
				
				//Script to get output from R
				var RscriptOutput:String = "Cluster$cluster" ;
				var outputNames:Array;
				if(RscriptOutput != ""){
					outputNames = RscriptOutput.split("\r");
				}
					//to avoid null reference
				else{
					outputNames = new Array();
				}
				var plotScript:String = "";
				
				//Query is created from runScript with same signature from Jave side
				var query:AsyncToken = Rservice.runScript(null, inputNames, inputValues, outputNames, script,plotScript,false,false, false);
				//Keys are passed as token 
				addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,query.operation]);			
				
			}
			
			protected function rScriptButton_clickHandler(event:MouseEvent):void
			{
				try
				{
					var loadedXML:XML = new XML();
					if(_sessionFileLoader == null)
					{
						_sessionFileLoader = new FileReference();
						
						_sessionFileLoader.addEventListener(Event.SELECT,   function (e:Event):void { _sessionFileLoader.load(); _defaultsFilename = _sessionFileLoader.name; } );
						_sessionFileLoader.addEventListener(Event.COMPLETE, function (e:Event):void {loadedXML = XML(e.target.data) ;loadXMLtoUI(loadedXML);} );
					}
					
					_sessionFileLoader.browse([new FileFilter("XML", "*.xml")]);			
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			protected function loadXMLtoUI(loadedXML:XML):void{
				
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 
			
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				
					attributeColumns.push(xRcolumn as IAttributeColumn);
					attributeColumns.push(yRcolumn as IAttributeColumn);
				
				//joinColumns Called only When columns are added to ColumnListComponent
				
					result = joinColumns(attributeColumns);
					joinedColumnKeys = result[0];
					joinedColumns = result[1];
				
				
				//Values need to assign for Column names in R
				var inputValues:Array = joinedColumns;
				//Names for Column that need to be used in R
				var inputNames:Array =(String(loadedXML.columnNames)).split(",");
				//Script for R input
				var Rstring:String = loadedXML.inputScript;
				// "\r" - replaced by "/n" in all occurance
				while(Rstring.search("\r") > 0){
					Rstring = Rstring.replace("\r","\n");
				}
				var script:String = Rstring;
				
				//Script to get output from R
				var RscriptOutput:String = loadedXML.outputScript ;
				var outputNames:Array;
				if(RscriptOutput != ""){
					outputNames = RscriptOutput.split("\r");
				}
					//to avoid null reference
				else{
					outputNames = new Array();
				}
				
				//Query is created from runScript with same signature from Jave side
				var query:AsyncToken = Rservice.runScript(null,inputNames, inputValues, outputNames, script,"",false,false,false);
				//Keys are passed as token 
				addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,query.operation]);  
			}
			
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{	
				
				var Robj:Object = new Object();
				Robj = event.result;
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for(var i:int = 0; i<(event.result).length; i++){
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);				
				}
				
							
				//To make availabe for Weave -Mapping with key returned from Token
				var keys:Array = token[0];
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for(var p:int = 0;p < RresultArray.length; p++)
				{
					if((RresultArray[p].value).length == keys.length)
					{
						var table:Array = [];
						for (var k:int = 0; k < keys.length; k++)
							table.push([ (keys[k] as IQualifiedKey).localName, Robj[p].value[k] ]);
						
						//testColumn are named after respective Objects Name (i.e) object{name: , value:}
						var testColumn:CSVColumn = Weave.root.requestObject(RresultArray[p].name, CSVColumn, false);
						testColumn.keyType.value = keys.length > 0 ? (keys[0] as IQualifiedKey).keyType : null;
						testColumn.numericMode.value = true;
						testColumn.data.setSessionState(table);
						testColumn.title.value = RresultArray[p].name;
					}					
				}
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace("fault on "+token, event.message);
			}
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]]
			 */
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			}
		]]>
	</mx:Script>
	
</DraggablePanel>
