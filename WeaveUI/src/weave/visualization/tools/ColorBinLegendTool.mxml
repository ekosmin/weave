<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 implements="weave.api.ui.IVisTool_Basic"
	     layout="absolute" xmlns:userControls="weave.ui.userControls.*">
	<mx:Script>
		<![CDATA[
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableVariable;
			import weave.data.AttributeColumns.BinnedColumn;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.plotters.ColorBinLegendPlotter;

			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, ColorBinLegendTool, "Color Legend");
			
			internal var _plotter:ColorBinLegendPlotter = null;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(ColorBinLegendPlotter, false);

				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.topMarginClickCallbacks.addGroupedCallback(this, handleMarginLabelClick);
				
				panelWidth.value = "20%";
				panelHeight.value = "50%";
				
				visualization.plotManager.marginBottom.value = "10";
				visualization.plotManager.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.plotManager.marginLeft.value   = "10";
				visualization.plotManager.marginRight.value  = "10";
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkBindableProperty(visualization.plotManager.marginTopNumber, marginLabel, "height");
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
				_plotter.legendTitleFunction.addGroupedCallback(this, updateMarginLabel, true);
				_plotter.dynamicColorColumn.addGroupedCallback(this, updateMarginLabel, true);
				visualization.topMarginColumn = _plotter.dynamicColorColumn;
			}
			
			internal function get internalColorRamp():ColorRamp
			{
				var cc:ColorColumn = _plotter.getInternalColorColumn();
				if (cc)
					return cc.ramp;
				return null;
			}
			
			internal function get internalBinnedColumn():BinnedColumn
			{
				var cc:ColorColumn = _plotter.getInternalColorColumn();
				if (cc)
					return cc.getInternalColumn() as BinnedColumn
				return null;
			}

			internal function get internalDataColumn():DynamicColumn
			{
				var bc:BinnedColumn = internalBinnedColumn;
				if (bc)
				{
					var fc:FilteredColumn = bc.getInternalColumn() as FilteredColumn;
					if (fc)
						return fc.internalDynamicColumn;
				}
				return null;
			}
			
			private function handleMarginLabelClick():void
			{
				AttributeSelectorPanel.open(_plotter.dynamicColorColumn);
			}
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				var colTitle:String = ColumnUtils.getTitle(_plotter.dynamicColorColumn);
				try
				{
					marginLabel.text = _plotter.legendTitleFunction.apply(null, [colTitle, _plotter.dynamicColorColumn]);
				}
				catch (e:Error)
				{
					marginLabel.text = colTitle;
				}
				
				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}

			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				visualization.additionalProbeColumns = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Color Legend");
			}
			
			internal static const DEFAULT_MARGIN_TOP:int = 25;
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
				 visible="{marginLabel.height > 0}"
				 mouseChildren="false" mouseEnabled="false"
				 x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5" width="100%"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off"
				 wordWrap="true" selectable="false" editable="false"
				 borderThickness="0" backgroundAlpha="0"/>
	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox label="{lang('Binning')}">
			<ui:DynamicColumnComponent id="dataColumnComponent" label="{lang('Color data')}" showLinkControl="false"/>
			<ui:BinningDefinitionEditor id="binEditor" width="100%"/>
		</mx:VBox>
		<mx:VBox label="{lang('Appearance')}">
			<ui:SelectableAttributesCheckBoxList id="selectedAttrList" creationComplete="selectedAttrList.setup(outerDocument, outerDocument.attributesToIncludeInProbe)"/>
			<ui:LegendControls id="legendControls"/>
			<ui:Indent label="{lang('Shape type')}">
				<ui:CustomComboBox dataProvider="{ColorBinLegendPlotter.ENUM_SHAPE_TYPE}" labelFunction="lang"
								   creationComplete="linkBindableProperty(outerDocument._plotter.shapeType, event.target, 'selectedItem')"/>
			</ui:Indent>
			<ui:Indent label="{lang('Max shape size')}">
				<mx:HSlider liveDragging="true" minimum="10" maximum="100" tickInterval="10" snapInterval="5" width="100%" dataTipFormatFunction="{Math.round}"
							creationComplete="linkBindableProperty(outerDocument._plotter.shapeSize, event.target, 'value')"/>
			</ui:Indent>
			<ui:CustomCheckBox id="centerAtZero" label="{lang('Center color ramp at zero (when binning is disabled')}" change="handleCenterAtZero()"/>
			<ui:ColorRampEditor id="cRampEditor"/>
		</mx:VBox>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				import weave.data.AttributeColumns.ColorColumn;
				import weave.visualization.plotters.ColorBinLegendPlotter;
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					outerDocument._plotter.dynamicColorColumn.addImmediateCallback(this, colorColumnCallback, true);
					dataColumnComponent.columnWrapper = outerDocument._plotter.dynamicColorColumn;
					outerDocument.visualization.plotManager.marginTopNumber.addImmediateCallback(this, handleMarginChange);
					
					linkBindableProperty(outerDocument._plotter.maxColumns, legendControls.numColumns, 'value');
					linkBindableProperty(outerDocument._plotter.reverseOrder, legendControls.reverseOrderCheck, 'selected');
					linkBindableProperty(outerDocument._plotter.itemLabelFunction, legendControls.txtLegendValuesFunction, 'text', 500);
					linkBindableProperty(outerDocument._plotter.legendTitleFunction, legendControls.txtLegendAttrNameFunc, 'text', 500);
					
					legendControls.chkShowLegendAttrName.addEventListener(Event.CHANGE, toggleShowAttributeName);
				}
				
				private function handleCenterAtZero():void
				{
					var cc:ColorColumn = outerDocument._plotter.getInternalColorColumn();
					if (cc)
						cc.rampCenterAtZero.value = centerAtZero.selected;
				}
				
				private function colorColumnCallback():void
				{
					var cc:ColorColumn = outerDocument._plotter.getInternalColorColumn();
					centerAtZero.selected = cc && cc.rampCenterAtZero.value;
					binEditor.setTarget(outerDocument.internalBinnedColumn);
					cRampEditor.colorRamp = outerDocument.internalColorRamp;
				}
				
				private var _prevMarginTop:String = String(ColorBinLegendTool.DEFAULT_MARGIN_TOP); // this stores the previous nonzero top margin setting
				private function handleMarginChange():void
				{
					if (outerDocument.visualization.plotManager.marginTopNumber.value != 0)
					{
						_prevMarginTop = outerDocument.visualization.plotManager.marginTop.value;
						legendControls.chkShowLegendAttrName.selected = true;
					}
					else
						legendControls.chkShowLegendAttrName.selected = false;
				}
				private function toggleShowAttributeName(e:Event):void
				{
					outerDocument.visualization.plotManager.marginTop.value = legendControls.chkShowLegendAttrName.selected ? _prevMarginTop : '0';
				}

			]]>
		</mx:Script>
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
