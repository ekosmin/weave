<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SliderTool
	xmlns="weave.visualization.tools.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	xmlns:settings="weave.ui.settings.*"
	xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
	verticalScrollPolicy="off"
	width="400" 
	title="{lang('Time Slider Tool')}"
	height="40">

<mx:Script>
		<![CDATA[
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IDataSource;
			import weave.api.ui.IVisTool;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.utils.VectorUtils;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, TimeSliderTool, "Time Slider Tool");
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				showLinkControls = true;
			}
			
			public const SEARCH_FIELDS_OPTIONAL:Array = ['dataTable'];
			public const SEARCH_FIELDS_REQUIRED:Array = ['name'];
			public const FILTER_FIELD:String = 'year';
			
			//overrides of abstract SliderTool functions
			
			/**
			 * This function finds a list of attribute tags in the same attribute hierarchy
			 * that have the same @dataTable and @name attributes, then returns a list of
			 * their @year values.
			 * @param ref A reference to an attribute tag in an AttributeHierarchy.
			 * @return An Array of @year values that the referenced column is defined for.
			 */
			override protected function getValuesFromColHier(rc:ReferencedColumn):Array
			{
				var times:Array = getFilterValuesFromHierarchy(rc, ['name'], 'year');
				if (times.length > 0)
					addToListOfDims(rc);
				return times;
			}
			
			/** 
			 * change - this method is automatically called when the hslider
			 *  is changed.  Here we update all the visualization tools to 
			 *  the new time.  
			 * **/
			override public function handleSliderChange():void
			{
				var filterValue:String = sliderValue;
				if (!filterValue)
					return;
				
				var _unlinkedTools:Array = getUnlinkedTools();
				
				// get descendants of all global objects
				var obj:Object;
				var dd:Dictionary = new Dictionary(true);
				var names:Array = WeaveAPI.globalHashMap.getNames();
				for each (var name:String in names)
				{
					if (_unlinkedTools.indexOf(name) >= 0)
						continue;
					var object:ILinkableObject = WeaveAPI.globalHashMap.getObject(name);
					if (object is LineChartTool && !linkLineCharts.value)
						continue;
					if (!linkGlobalColumns.value && object is IAttributeColumn)
						continue;
					for each (obj in WeaveAPI.SessionManager.getLinkableDescendants(object, ReferencedColumn))
						dd[obj] = true;
				}
				
				// for each referenced column, update the reference accordingly
				var descendants:Array = VectorUtils.getKeys(dd);
				var len:int = descendants.length;
				for (var i:int = 0; i < len; i++)
				{
					var rc:ReferencedColumn = descendants[i] as ReferencedColumn;
					
					var columnFilterValue:String = rc.getMetadata(FILTER_FIELD);
					if (!columnFilterValue || columnFilterValue == filterValue)
						continue; // either column doesn't specify filter value or it is already the desired value
					
					// get required field values
					var found:int = 0;
					var metadata:Object = {};
					var field:String;
					for each (field in SEARCH_FIELDS_REQUIRED)
					{
						var value:String = rc.getMetadata(field);
						metadata[field] = value;
						if (value)
							found++;
					}
					if (found != SEARCH_FIELDS_REQUIRED.length)
						continue; // required fields missing
					
					// get optional field values
					for each (field in SEARCH_FIELDS_OPTIONAL)
						if (rc.getMetadata(field))
							metadata[field] = rc.getMetadata(field);
					
					// set filter field value
					metadata[FILTER_FIELD] = filterValue;
					
					// update the column reference
					var dataSource:IDataSource = rc.getDataSource();
					rc.setColumnReference(dataSource, metadata);
				}
			}
			
			/**
			 * Searches a hierarchy for all values of a filter property that can be used to find related columns.
			 * @param ref A column reference.
			 * @param groupNames Names of properties used for grouping columns (example: ["dataTable", "name"])
			 * @param filterName The name of a property used for filtering columns out of a group (example: "year")
			 */
			protected function getFilterValuesFromHierarchy(rc:ReferencedColumn, groupNames:Array, filterName:String):Array
			{
				var filterValues:Array = [];
				/*
				var dataSource:IDataSource_old = rc.getDataSource() as IDataSource_old;
				if (dataSource == null)
					return filterValues;
				
				var hierarchy:XML = dataSource.attributeHierarchy.value;
				if (!hierarchy)
					return filterValues;
				
				var node:XML = HierarchyUtils.getNodeFromPath(hierarchy, path);
				var otherNodes:XMLList;
				if (node)
				{
					// found matching node in hierarchy, so just search the current category
					otherNodes = XML(node.parent()).child("attribute");
				}
				else
				{
					node = HierarchyUtils.getNodeFromPath(path, path); // get leaf node
					otherNodes = hierarchy.descendants("attribute");
				}
				
				var groupValues:Array = groupNames.map(function(name:String, i:*, a:*):String { return node.attribute(name); });
				var filterValue:String;
				outerLoop: for (var i:int = 0; i < otherNodes.length(); i++)
				{
					var otherNode:XML = otherNodes[i];
					for (var j:int = 0; j < groupNames.length; j++)
						if (String(otherNode.attribute(groupNames[j])) != groupValues[j])
							continue outerLoop;
					filterValue = otherNode.attribute(filterName);
					if (filterValue)
						filterValues.push(filterValue);
				}
				*/
				return filterValues;		
			}
		]]>
	</mx:Script>
</SliderTool>
