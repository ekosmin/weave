<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.copySessionState;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableDynamicObject;
			import weave.data.AttributeColumns.ReferencedColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.layers.SimpleInteractiveVisualization;
			import weave.visualization.plotters.BarChartLegendPlotter;
			import weave.visualization.plotters.ColorBinLegendPlotter;
			
			[Bindable] internal var _barLegendPlotter:BarChartLegendPlotter;
			private const _colorLegendLayerName:String = "color legend";
			private function get _colorLegendLayerSettings():LayerSettings
			{
				return visualization.plotManager.getLayerSettings(_colorLegendLayerName);
			}
			internal var _colorLegendPlotter:ColorBinLegendPlotter;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				// lock dynamic objects into place
				
				// create bar chart legend
				_barLegendPlotter = initializePlotters(BarChartLegendPlotter, false);
				
				// create global color ramp legend
				_colorLegendPlotter = visualization.plotManager.plotters.requestObject(_colorLegendLayerName, ColorBinLegendPlotter, true);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.topMarginColumn = _colorLegendPlotter.dynamicColorColumn;
				visualization.topMarginClickCallbacks.addImmediateCallback(this, handleMarginLabelClick);
				_colorLegendPlotter.dynamicColorColumn.addGroupedCallback(this, updateMarginLabel, true);

				panelWidth.value = "20%";
				panelHeight.value = "50%";

				visualization.plotManager.marginBottom.value = "5";
				visualization.plotManager.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.plotManager.marginLeft.value   = "5";
				visualization.plotManager.marginRight.value  = "5";
				
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				// backwards compatibility - bar legend order takes priority
				linkSessionState(_barLegendPlotter.reverseOrder, _colorLegendPlotter.reverseOrder);
				
				linkBindableProperty(visualization.plotManager.marginTopNumber, marginLabel, "height");
				_barLegendPlotter.legendTitleFunction.addGroupedCallback(this, updateMarginLabel, true);
				//_colorLegendPlotter.legendTitleFunction.addGroupedCallback(this, updateMarginLabel, true);
			}
			
			public const dynamicBarChartTool:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(CompoundBarChartTool), handleBarChartChange, true);
			
			internal function get barChart():CompoundBarChartTool
			{
				return dynamicBarChartTool.internalObject as CompoundBarChartTool;
			}
			
			private function handleBarChartChange():void
			{
				// update the legend properties to reflect the new bar chart properties.
				
				if (barChart != null)
				{
					copySessionState(barChart.chartColors, _barLegendPlotter.chartColors);
					copySessionState(barChart.heightColumns, _barLegendPlotter.columns);
					copySessionState(barChart.colorIndicatesDirection, _barLegendPlotter.colorIndicatesDirection);
				}
				
				var showBarLegend:Boolean = barChart && (_barLegendPlotter.columns.getObjects().length > 1 || _barLegendPlotter.colorIndicatesDirection.value);
				_colorLegendLayerSettings.visible.value = !showBarLegend;
				visualization.plotManager.getLayerSettings(SimpleInteractiveVisualization.MAIN_PLOT_LAYER_NAME).visible.value = showBarLegend;
				
				updateMarginLabel();
			}
			
			private function handleMarginLabelClick():void
			{
				if (_barLegendPlotter.columns.getObjects().length == 1 || barChart == null)
					AttributeSelectorPanel.open(_colorLegendPlotter.dynamicColorColumn);
				else
					AttributeSelectorPanel.open(barChart.heightColumns);
			}
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				if (_barLegendPlotter.columns.getObjects().length <= 1 || barChart == null)
				{
					visualization.topMarginToolTip = null;
					var colTitle:String = ColumnUtils.getTitle(_colorLegendPlotter.dynamicColorColumn);
					try
					{
						marginLabel.text = _barLegendPlotter.legendTitleFunction.apply(null, [colTitle]);
					}
					catch (e:Error)
					{
						marginLabel.text = colTitle;
					}
					visualization.additionalProbeColumns = WeaveAPI.SessionManager.getLinkableDescendants(_colorLegendPlotter.dynamicColorColumn, ReferencedColumn);
				}
				else
				{
					visualization.topMarginToolTip = lang("Click to select the attribute(s) used for the bars.");
					try
					{
						marginLabel.text = _barLegendPlotter.legendTitleFunction.apply() || defaultTitle;
					}
					catch (e:Error)
					{
						marginLabel.text = defaultTitle;
					}
					visualization.additionalProbeColumns = null;
				}
				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}
			
			private function get defaultTitle():String
			{
				return lang('Bar color')
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Bar Chart Legend");
			}
			
			internal static const DEFAULT_MARGIN_TOP:int = 25;
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
			visible="{marginLabel.height > 0}"
			mouseChildren="false" mouseEnabled="false"
			fontWeight="bold" 
			x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5" width="100%"
			horizontalScrollPolicy="off" verticalScrollPolicy="off"
			wordWrap="true" selectable="false" editable="false"
			borderThickness="0" backgroundAlpha="0"/>
	
	<editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox width="100%" label="{lang('Legend')}">
			<ui:LegendControls id="legendControls"/>
			<mx:Button label="{lang('Edit Bar Chart')}" click="outerDocument.barChart.toggleControlPanel();"/>
		</mx:VBox>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					outerDocument.visualization.plotManager.marginTopNumber.addGroupedCallback(this, handleMarginChange, true);
					
					linkBindableProperty(outerDocument._barLegendPlotter.maxColumns, legendControls.numColumns, 'value');
					linkBindableProperty(outerDocument._colorLegendPlotter.maxColumns, legendControls.numColumns, 'value');
					linkBindableProperty(outerDocument._barLegendPlotter.reverseOrder, legendControls.reverseOrderCheck, 'selected');
					linkBindableProperty(outerDocument._colorLegendPlotter.reverseOrder, legendControls.reverseOrderCheck, 'selected');
					linkBindableProperty(outerDocument._barLegendPlotter.itemLabelFunction, legendControls.txtLegendValuesFunction, 'text', 500);
					linkBindableProperty(outerDocument._colorLegendPlotter.itemLabelFunction, legendControls.txtLegendValuesFunction, 'text', 500);
					linkBindableProperty(outerDocument._barLegendPlotter.legendTitleFunction, legendControls.txtLegendAttrNameFunc, 'text', 500);
					linkBindableProperty(outerDocument._colorLegendPlotter.legendTitleFunction, legendControls.txtLegendAttrNameFunc, 'text', 500);
					legendControls.chkShowLegendAttrName.addEventListener(Event.CHANGE, toggleShowAttributeName);
				}
				
				private var _prevMarginTop:String = String(BarChartLegendTool.DEFAULT_MARGIN_TOP); // this stores the previous nonzero top margin setting
				private function handleMarginChange():void
				{
					if (outerDocument.visualization.plotManager.marginTopNumber.value != 0)
					{
						_prevMarginTop = outerDocument.visualization.plotManager.marginTop.value;
						legendControls.chkShowLegendAttrName.selected = true;
					}
					else
					{
						legendControls.chkShowLegendAttrName.selected = false;
					}
				}
				
				private function toggleShowAttributeName(e:Event):void
				{
					outerDocument.visualization.plotManager.marginTop.value = legendControls.chkShowLegendAttrName.selected ? _prevMarginTop : '0';
				}
			]]>
		</mx:Script>
	</ui:ControlPanel></mx:Component></editorFactory>
</SimpleVisTool>
