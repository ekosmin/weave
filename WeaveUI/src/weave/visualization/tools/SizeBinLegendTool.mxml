<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*"
			   layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableDynamicObject;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.visualization.layers.LayerSettings;
			import weave.visualization.layers.SimpleInteractiveVisualization;
			import weave.visualization.plotters.ColorBinLegendPlotter;
			import weave.visualization.plotters.SizeBinLegendPlotter;
			
			private const indent:int = 120;
			private const inputWidth:int = 64;
			private const COLOR_LEGEND_LAYER_NAME:String = "color legend";
			private var _sizeBinLegendPlotter:SizeBinLegendPlotter;
			private var _sizeBinLegendLayerSettings:LayerSettings;
			private var _colorLegendLayerSettings:LayerSettings;			
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				// lock dynamic objects into place
				
				_sizeBinLegendPlotter = initializePlotters(SizeBinLegendPlotter, false);
				visualization.plotManager.plotters.requestObject(COLOR_LEGEND_LAYER_NAME, ColorBinLegendPlotter, true);
				
				_sizeBinLegendLayerSettings = visualization.plotManager.getLayerSettings(SimpleInteractiveVisualization.MAIN_PLOT_LAYER_NAME);
				_colorLegendLayerSettings = visualization.plotManager.getLayerSettings(COLOR_LEGEND_LAYER_NAME);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.enableZoomAndPan.value = false;
				
				visualization.plotManager.marginBottom.value = "5";
				visualization.plotManager.marginTop.value    = DEFAULT_MARGIN_TOP.toString();
				visualization.plotManager.marginLeft.value   = "5";
				visualization.plotManager.marginRight.value  = "5";

				visualization.topMarginClickCallbacks.addImmediateCallback(this, handleMarginLabelClick);
				colorColumn.addImmediateCallback(this, updateMarginLabel, true);
				
				panelWidth.value = "20%";
				panelHeight.value = "50%";

				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateMarginLabel, true);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				visualization.plotManager.marginTopNumber.addGroupedCallback(this, handleMarginChange);
				linkBindableProperty(visualization.plotManager.marginTopNumber, marginLabel, "height");
				
				
				var delay:int = 500;
				linkBindableProperty(_sizeBinLegendPlotter.numberOfCircles, numOfCirclesNumericStepper, 'value', delay);
				linkBindableProperty(_sizeBinLegendPlotter.customCircleRadiuses, circleRadiusesTextInput, 'text', delay);
				
				_sizeBinLegendPlotter.typeRadio.addImmediateCallback(this, updateTypeRadioUI);
				
				marginLabelCheckBox.addEventListener(Event.CHANGE, toggleShowAttributeName);
			}
			
			private function updateTypeRadioUI():void
			{
				if (_sizeBinLegendPlotter.typeRadio.value == SizeBinLegendPlotter.simpleRadio)
					typeGroup.selection = simpleRadio;
				else if (_sizeBinLegendPlotter.typeRadio.value == SizeBinLegendPlotter.customRadio)
					typeGroup.selection = customRadio;
			}
			
			private function handleTypeRadio():void
			{
				// this may be zero even if children are created.
				if (typeGroup.numRadioButtons == 0) return;
				
				if (typeGroup.selection == simpleRadio)
					_sizeBinLegendPlotter.typeRadio.value = SizeBinLegendPlotter.simpleRadio;
				else if (typeGroup.selection == customRadio)
					_sizeBinLegendPlotter.typeRadio.value = SizeBinLegendPlotter.customRadio;
			}
			
			private function getMarginColumn():IAttributeColumn
			{
				if (scatterPlot == null || !scatterPlot.plotter.sizeBy.internalObject)
					return visualization.topMarginColumn = colorColumn;
				else
					return visualization.topMarginColumn = _sizeBinLegendPlotter.radiusColumn;
			}
			
			// Get called in handleScatterPlotChange
			override public function get defaultPanelTitle():String
			{
				if (getMarginColumn() == colorColumn)
					return lang("Color legend of " + ColumnUtils.getTitle(getMarginColumn()));
				else
					return lang("Size legend of " + ColumnUtils.getTitle(getMarginColumn()));
			}
			
			private static const DEFAULT_MARGIN_TOP:int = 25;
			private var _prevMarginTop:String = String(DEFAULT_MARGIN_TOP); // this stores the previous nonzero top margin setting
			private function handleMarginChange():void
			{
				if (visualization.plotManager.marginTopNumber.value != 0)
				{
					_prevMarginTop = visualization.plotManager.marginTop.value;
					marginLabelCheckBox.selected = true;
				}
				else
					marginLabelCheckBox.selected = false;
			}
			
			private function toggleShowAttributeName(e:Event):void
			{
				visualization.plotManager.marginTop.value = marginLabelCheckBox.selected ? _prevMarginTop : '0';
			}
			
			public const dynamicScatterPlotTool:LinkableDynamicObject = registerLinkableChild(this, new LinkableDynamicObject(ScatterPlotTool), handleScatterPlotChange, true);
			private function get scatterPlot():ScatterPlotTool
			{
				return dynamicScatterPlotTool.internalObject as ScatterPlotTool;
			}
			
			private function handleScatterPlotChange():void
			{
				// update the legend properties to reflect the new ScatterPlot properties.
				
				if (scatterPlot != null)
				{
					// One time session state copy
					copySessionState(scatterPlot.plotter.sizeBy, _sizeBinLegendPlotter.radiusColumn);
					copySessionState(scatterPlot.plotter.minScreenRadius, _sizeBinLegendPlotter.minScreenRadius);
					copySessionState(scatterPlot.plotter.maxScreenRadius, _sizeBinLegendPlotter.maxScreenRadius);
					
					copySessionState(scatterPlot.plotter.colorBySize, _sizeBinLegendPlotter.colorBySize);
					copySessionState(scatterPlot.plotter.colorNegative, _sizeBinLegendPlotter.colorNegative);
					copySessionState(scatterPlot.plotter.colorPositive, _sizeBinLegendPlotter.colorPositive);
				}
				
				if (getMarginColumn() == colorColumn)
				{
					// show global color ramp legend
					_colorLegendLayerSettings.visible.value = true;
					_sizeBinLegendLayerSettings.visible.value = false;
				}
				else
				{
					// show size bin legend
					_colorLegendLayerSettings.visible.value = false;
					_sizeBinLegendLayerSettings.visible.value = true;
				}
				
				updateMarginLabel();
				handlePanelTitleChange();
			}
			
			private function handleMarginLabelClick():void
			{
				AttributeSelectorPanel.open(getMarginColumn());
			}
			
			private function updateMarginLabel():void
			{
				if (!parent)
					return callLater(updateMarginLabel);
				
				marginLabel.text = ColumnUtils.getTitle(getMarginColumn());

				LinkableTextFormat.defaultTextFormat.copyToStyle(marginLabel);
			}
			
			private function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			private var _cursorId:int;
		]]>
	</mx:Script>
	
	<mx:TextArea id="marginLabel"
				 visible="{marginLabel.height > 0}"
				 mouseChildren="false" mouseEnabled="false"
				 x="0" y="0" paddingLeft="5" paddingTop="5" paddingRight="5" width="100%"
				 horizontalScrollPolicy="off" verticalScrollPolicy="off"
				 wordWrap="true" selectable="false" editable="false"
				 borderThickness="0" backgroundAlpha="0"/>

	<ui:ControlPanel>
		<mx:VBox width="100%" label="{lang('Legend')}">
			<mx:Label text="{lang('Tick Marks')}"/>
			<mx:VBox width="100%" paddingLeft="20">
				<mx:RadioButtonGroup id="typeGroup" change="handleTypeRadio()"/>
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:RadioButton id="simpleRadio" label="{lang('Equally Spaced')}" groupName="typeGroup" selected="true" width="100%"/>
					<mx:Label text="{lang('Number of Radiuses:')}"/>
					<mx:NumericStepper enabled="{simpleRadio.selected}" minimum="2" maximum="50" stepSize="1" id="numOfCirclesNumericStepper" width="{inputWidth}"/>
					<ui:HelpComponent label="{simpleRadio.label}">
						Example: If your data is between 0 and 100 and you specify 3 radiuses,
						the following radiuses will be created: 0, 50, 100
					</ui:HelpComponent>
				</mx:HBox>
				
				<mx:HRule width="100%"/>
				
				<mx:HBox width="100%" verticalAlign="middle">
					<mx:RadioButton id="customRadio" label="{lang('Custom Radiuses')}" groupName="typeGroup" width="100%"/>
					<mx:TextInput enabled="{customRadio.selected}" id="circleRadiusesTextInput" width="100%"/>
					<ui:HelpComponent label="{customRadio.label}">
						Enter comma-separated custom break values.
					</ui:HelpComponent>
				</mx:HBox>
			</mx:VBox>
			<mx:CheckBox id="marginLabelCheckBox" label="{lang('Show legend attribute name')}"/>
			<mx:Button label="{lang('Edit ScatterPlot')}" click="scatterPlot.toggleControlPanel();"/>
		</mx:VBox>
	</ui:ControlPanel>
</SimpleVisTool>
