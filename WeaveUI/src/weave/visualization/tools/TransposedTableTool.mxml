<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*" 
				   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
				   layout="absolute"
				   title="{lang('Transposed Data Table')}" xmlns:editors="weave.editors.*"
				   implements="weave.api.ui.IVisTool, weave.api.ui.ISelectableAttributes"
				   >
	
	<mx:VBox width="100%" height="100%" id="tableArea" verticalGap="0">
		
		
		<mx:DataGrid id="table"  
						   horizontalScrollPolicy="auto" verticalScrollPolicy="auto"
						   width="100%" height="100%"
						   allowMultipleSelection="true"
						   dataProvider="{sourceArrayCollection}"
						   paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"
						   fontWeight="normal"
						   alternatingItemColors="{[0xffffff, 0xEEF6FF]}"
						   rollOverColor="0xDADAFF"
						   selectionColor="0xFFAAAA"
						   lockedColumnCount="1"
						   columnStretch="handlerHeaderRelease(event)"
						   showDataTips="true"
						   />
		
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.events.DataGridEvent;
			
			import weave.Weave;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.KeySets.FilteredKeySet;
			import weave.data.KeySets.KeySet;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.NumberUtils;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, TransposedTableTool, "Transposed Data Table");
			
			public const columns:LinkableHashMap = newLinkableChild(this,LinkableHashMap,handleColumnsListChange,true);
			public const headerAttributeColumn:DynamicColumn = newLinkableChild(this,DynamicColumn,createHeaderColumns,true);
			public const keySet:FilteredKeySet = newLinkableChild(this, FilteredKeySet, handleKeysChange, true);
			public const headerText:LinkableString = registerLinkableChild(this,new LinkableString(""),updateHeaderText);
			public const headerColumnWidth:LinkableString = registerLinkableChild(this,new LinkableString("10%", NumberUtils.verifyNumberOrPercentage),handleColumnWidthChange,true);
			public const dataColumnWidth:LinkableString = registerLinkableChild(this,new LinkableString("10%", NumberUtils.verifyNumberOrPercentage),handleColumnWidthChange,true);
			
			[Bindable]
			private var sourceArrayCollection:ArrayCollection = new ArrayCollection();

			override protected function inConstructor():void
			{
				super.inConstructor();
				keySet.keyFilter.targetPath = [Weave.DEFAULT_SUBSET_KEYFILTER];
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				getCallbackCollection(LinkableTextFormat.defaultTextFormat).addImmediateCallback(this,invalidateDisplayList);
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (detectLinkableObjectChange(updateDisplayList, LinkableTextFormat.defaultTextFormat))
				{
					LinkableTextFormat.defaultTextFormat.copyToStyle(table);
				}
				handleColumnWidthChange();
				super.updateDisplayList(unscaledWidth,unscaledHeight);
			}
			
			public function getSelectableAttributeNames():Array
			{
				return ["Header row", "Data rows"];
			}
			public function getSelectableAttributes():Array
			{
				return [headerAttributeColumn,columns];
			}
			
 			private function handleColumnsListChange():void
			{
				var columnObjects:Array = columns.getObjects();
				sourceArrayCollection.removeAll();
				
				createHeaderColumns();
				for (var i:int = 0; i < columnObjects.length; i++)
				{
					var rowObject:Object = new Object();
					
					var keys:Array = columnObjects[i].keys;
					
					//We create an object with the first item as _name_ mapped to the Attribute Column name
					//and then we create a mapping of the key to value 
					rowObject["_name_"] = ColumnUtils.getTitle(columnObjects[i]);
					for (var k:int = 0; k < keys.length; k++ )
					{
						var keyName:String = (keys[k] as IQualifiedKey).localName;
						rowObject[keyName] = columnObjects[i].getValueFromKey((keys[k] as IQualifiedKey),String);
					}
					
					sourceArrayCollection.addItem(rowObject);
				}
				
				handleColumnWidthChange();
			}
			
			/**
			 *@private createHeaderColumns
			 *This function creates an array of DataGridColumns and assigns it to the data grid
			 * @param col The Attribute Column to be set as the Header Column
			 * @param emptyHeader If false use the values in the Attribute Column as the header text
			 * else leaves it empty.
			 * */
			private function createHeaderColumns():void
			{
				var cols:Array = columns.getObjects();
				cols.unshift(headerAttributeColumn);
				
				keySet.setColumnKeySources(cols);
			}
			
			private function handleKeysChange():void
			{
				var hasHeader:Boolean = headerAttributeColumn.getInternalColumn() != null;
				var keys:Array = keySet.keys;
				
				var columnsToAdd:Array = [];
				table.columns = [];
				for (var i:int=0; i<keys.length; i++ )
				{
					var colName:String = " ";
					if (hasHeader)
						colName = headerAttributeColumn.getValueFromKey((keys[i] as IQualifiedKey),String);
					var gridColumn:DataGridColumn = new DataGridColumn(colName);
					
					gridColumn.dataField = (keys[i] as IQualifiedKey).localName;
					columnsToAdd.push(gridColumn);
				}
				
				//the first column is the list of the attribute column names
				var headerColName:String = headerText.value
				//if headerText is an empty string we set the header text of the first column to a string a single whitespace
				//because if we set it to empty string it defaults to the dataField value which is "_name_"
				if (!headerColName)
					headerColName = " ";
				var nameGridColumn:DataGridColumn = new DataGridColumn(headerColName);
				nameGridColumn.dataField = "_name_";
				
				columnsToAdd.unshift(nameGridColumn);
				
				//if you need to add header columns you need to add all the columns to an Array and then 
				//assign the array to grid.columns. You cannot do grid.columns.push
				//more here: http://flexoop.com/2008/07/using-actionscript-to-set-datagrid-columns/
				table.columns = columnsToAdd;
				if(table.columns.length != 0)
					table.lockedColumnCount= 1;
				
				handleColumnWidthChange();
			}
			
			private function updateHeaderText():void
			{
				var cols:Array = table.columns;
				
				if(cols.length <1)
					return;
				
				//if headerText is an empty string we set the header text of the first column to a string a single whitespace
				//because if we set it to empty string it defaults to the dataField value which is "_name_"
				if(headerText.value)
					(cols[0] as DataGridColumn).headerText = headerText.value;
				else
					(cols[0] as DataGridColumn).headerText = " ";
			}
			
			
			private function handlerHeaderRelease(event:DataGridEvent):void
			{
				var columnWidth:Number = (table.columns[event.columnIndex] as DataGridColumn).width;
				var target:LinkableString = (event.columnIndex == 0) ? headerColumnWidth : dataColumnWidth;
				if (enablePercentageCoords)
					target.value = String(columnWidth / unscaledWidth * 100) + '%';
				else
					target.value = String(columnWidth);
			}
			
			private function handleColumnWidthChange():void
			{
				if (table.columnCount == 0)
					return;
				
				var headerWidth:Number = NumberUtils.getNumberFromNumberOrPercent(headerColumnWidth.value, unscaledWidth);
				(table.columns[0] as DataGridColumn).width = headerWidth;
				
				var dataWidth:Number = NumberUtils.getNumberFromNumberOrPercent(dataColumnWidth.value, unscaledWidth);
				for (var i:int = 1; i < table.columnCount; i++)
				{
					(table.columns[i] as DataGridColumn).width = dataWidth;
				}
				
				// this avoids a crash when clicking the scrollbar after subset changes.
				if (table.horizontalScrollPosition >= table.columnCount)
					table.horizontalScrollPosition = 0;
			}
			
			[Deprecated(replacement="headerColumnWidth")] public function set headerColumnPercentWidth(value:Number):void
			{
				headerColumnWidth.value = String(value) + '%';
			}
			
			[Deprecated(replacement="dataColumnWidth")] public function set dataColumnPercentWidth(value:Number):void
			{
				dataColumnWidth.value = String(value) + '%';
			}
			
			[Deprecated] public function set filterKeySet(value:Object):void
			{
				var ks:KeySet = keySet.keyFilter.requestLocalObject(KeySet, false);
				ks.setSessionState(value);
			}
		]]>
	</mx:Script>
	<ui:editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Data')}">
			<mx:HBox>
				<mx:Label text="{lang('Corner header:')}"/>
				<mx:TextInput id="headerTextInput" width="300"/>
			</mx:HBox>
			<ui:DynamicColumnComponent id="headerColumn" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = outerDocument.headerAttributeColumn" />
			<ui:ColumnListComponent id="columnsList" backgroundAlpha="0.7" height="100%" width="100%"/>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{outerDocument}"/>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					columnsList.hashMap = outerDocument.columns;
					linkBindableProperty(outerDocument.headerText, headerTextInput, "text");
				}
			]]>
		</mx:Script>
	</ui:ControlPanel></mx:Component></ui:editorFactory>
</ui:DraggablePanel>
