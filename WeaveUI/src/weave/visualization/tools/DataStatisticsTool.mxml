<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
	This exhibits all important statistics about a column in a datagrid
    It also allows for viewing different correlation coefficients between columns

	@author spurushe
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off"
				title="Data Statistics"
				x="15%" width="70%" y="15%" height="70%"
				backgroundColor="#EFF4BC" 
				layout="horizontal"
				autoLayout="true"
				implements="weave.api.ui.IVisTool_R" xmlns:ui="weave.ui.*"
				>
	
	<mx:HBox width="100%" height="100%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
		<ui:CustomTabNavigator width="100%" height="100%">
			
			<mx:VBox  verticalGap="0" label="Statistics" id="statisticsBox">
			
			</mx:VBox>
			
			
		</ui:CustomTabNavigator>
		
		
		</mx:HBox>
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.DataGrid;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.core.ICallbackCollection;
			import weave.api.core.ILinkableHashMap;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.disposeObject;
			import weave.api.newDisposableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.core.CallbackCollection;
			import weave.core.LinkableHashMap;
			import weave.data.AttributeColumns.NumberColumn;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, DataStatisticsTool, "Data Statistics Tool");
			
			
			public var _variables:ILinkableHashMap = null;
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			
			public var finalGridDisplayArray:Array = new Array();
			public var colNames:Array = new Array();
			public var latestjoinedColumnKeys:Array = new Array();
			public var attributeColumns:Array = new Array();
			
			public var selectedRecords:Array = new Array();//when a subset selected from a visualization is the input for Dm algos
			private var finalColumnsGroup:ICallbackCollection;
			public var subsetFinalColumns:Array = new Array();
			public var finalColumns:Array = new Array();
			
			private var statDataGrid:DataGrid = null;
			private var columnObjectCollection:ArrayCollection = new ArrayCollection();
			
			private static var statToolInstance : DataStatisticsTool = null;
			override protected function inConstructor():void
			{
				super.inConstructor();				
				
			}
			public static function getStatToolInstance():DataStatisticsTool 
			{
				if(statToolInstance == null) statToolInstance = new DataStatisticsTool();
				return statToolInstance;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				//preprocessingColumns();
				//variables.addImmediateCallback(this, columnProcessing);
				//variables.addImmediateCallback(this, getStatR, true);
			}
			public function get inputVariables():ILinkableHashMap
			{
				return _variables;
			}
			
			public function set inputVariables(value:ILinkableHashMap):void
			{
				/*Setting the input hashmap everytime
				the tool can be openened for loading in columns or for running of subsets selected
				in each case clear the hashmap previously used*/
				
				if(value)
				{
					_variables = value;
					(_variables as LinkableHashMap).addImmediateCallback(this,preprocessingColumns,true); 
				}
				
			}
			
			// we need only numerical columns for clustering
			private function preprocessingColumns():void
			{
				var colObjects:Array = inputVariables.getObjects(IAttributeColumn);
				colNames = [];
				
				var attributeColumns :Array = new Array();
				for (var i:int = 0; i < colObjects.length; i++)
				{
					var col:IAttributeColumn = colObjects[i] as IAttributeColumn;
					var datatype:String = ColumnUtils.getDataType(col);
					if(datatype == "number")
					{
						attributeColumns.push(col);
						colNames.push(ColumnUtils.getTitle(col));
					}
				}
				
					handleColumnsForSubsetSelection(attributeColumns);//when user wants to run data mining algorithms on selected subsets 
				
			}
			
			
			private function handleColumnsForSubsetSelection(attributeColumns:Array):void
			{
				var tempColumns:Array = new Array();
				for(var h :int = 0; h < attributeColumns.length; h++)
				{
					tempColumns[h] = new Array();
				}
				
				for(var s:int = 0; s < attributeColumns.length; s++)
				{
					var testCol:IAttributeColumn = attributeColumns[s];
					for(var f:int = 0; f < selectedRecords.length; f++)
					{
						var key:IQualifiedKey = selectedRecords[f] as IQualifiedKey;
						tempColumns[s].push(testCol.getValueFromKey(key,Number));
					}
				}
				
				//converting subsetcollection into columns
				disposeObject(finalColumnsGroup);
				finalColumnsGroup = newDisposableChild(this, CallbackCollection);
				for (var j:int = 0 ; j < tempColumns.length; j++)
				{
					var pickUpColumn:IAttributeColumn = (attributeColumns[j] as IAttributeColumn);
					var testcol:NumberColumn = ResultUtils.resultAsNumberColumn(selectedRecords,tempColumns[j],(ColumnUtils.getTitle(pickUpColumn)+"norm"));
					subsetFinalColumns.push(testcol);
					registerLinkableChild(finalColumnsGroup, testcol);
				}
				
				finalColumnsGroup.addImmediateCallback(this, checkifColumnsFilled);
				
			}
			
			
			//call made to R
			private function checkifColumnsFilled():void
			{
				if (WeaveAPI.SessionManager.linkableObjectIsBusy(finalColumnsGroup))//do the next chunk of code only after columns have been generated and collected
					return;
				
				//columns sent as a matrix, all at one time
				var inputValues:Array = new Array(); 
				var inputNames:Array =  ["myMatrix"];
				
				var normScript:String = " frame <- data.frame(myMatrix)\n" +
					"lappend <- function(lst, stat, name) {\n" +
					"lst[name] <- stat\n" +
					"return(lst)}\n" +
					"getAllColumnStats <- function(myMatrix){\n" +
					"allColumnStats <- list()\n" +
					"oneColumnStat <- list()\n" +
					"answer <- list()\n" +
					"columnName <- \"\"\n" +
					"stgOne <- \"ColumnMaximum\"\n" +
					"stgTwo <- \"ColumnMinimum\"\n" +
					"stgThree <- \"ColumnMean\"\n" +
					"stgFour <- \"ColumnVariance\"\n" +
					"for( i in 1:length(myMatrix)){\n" +
					"columName <- \"\"\n" +
					"answer <- lappend(answer, colMax <- max(myMatrix[[i]]), stgOne)\n" +
					"answer <- lappend(answer, colMin <- min(myMatrix[[i]]), stgTwo)\n" +
					"answer <- lappend(answer, colMean <- mean(myMatrix[[i]]), stgThree)\n" +
					"answer <- lappend(answer, colVariance <- var(myMatrix[[i]]), stgFour)\n" +
					"columnName <- sprintf(\"Column%.0f\",i)\n" +
					"oneColumnStat <- list(answer)\n" +
					"allColumnStats[columnName] <- oneColumnStat\n" +
					"}\n" +
					"return(allColumnStats)\n" +
					"}\n" +
					"finalStatResult <- getAllColumnStats(frame)\n";;
				
				var joinedColumns:Array ;
				    joinedColumns = ResultUtils.joinColumns(subsetFinalColumns);
				latestjoinedColumnKeys = joinedColumns[0];
				finalColumns = joinedColumns[1];
				
				if ( latestjoinedColumnKeys.length != 0)
				{
					inputValues.push(finalColumns); 
					var outputNames:Array = new Array();
					for( var s:int = 1 ; s <=  finalColumns.length; s++)
					{
						outputNames.push("finalStatResult$Column" +[s]);
					} 
					var query:AsyncToken = Rservice.runScript(null,inputNames,inputValues,outputNames,normScript,"",false,false,false);
					addAsyncResponder(query, handleNormScriptResult, handleRunScriptFault,latestjoinedColumnKeys);
				}
				
				
			}
			
			private function handleNormScriptResult(event:ResultEvent, token:Object = null):void
			{
				if (token != latestjoinedColumnKeys){return;}//handles two asynchronous calls made one after the other
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;	
				var allStatRResults:Array = new Array();//collects the statistics objects
				
				if (Robj == null)
				{
					reportError("R Servlet did not return an Array of results as expected.");
					return;
				}
				
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
						allStatRResults.push(rResult);
					
				}	
				
				displayStatistics(allStatRResults);
				subsetFinalColumns = [];//clearing the array before every call
				
			}
			private function displayStatistics(allStatRResults:Array):void
			{
				if(statDataGrid == null)
				{
					statDataGrid = new DataGrid();
					statDataGrid.percentWidth = 100;
					statDataGrid.percentHeight = 100; 
				}
				
				statDataGrid.initialize();
				
				columnObjectCollection.removeAll();
				statDataGrid.dataProvider = columnObjectCollection;
				for (var k:int = 0; k < allStatRResults.length; k++)
				{
					var columnObject:Object = new Object(); 
					//TO:DO find a better way of looping through arrays and assign properties without hardcoding
					var valueArray:Array = ((allStatRResults[k] as RResult).value) as Array
					columnObject.Column = colNames[k];
					columnObject.SubsetMaximum = valueArray[0];
					columnObject.SubsetMinimum = valueArray[1];
					columnObject.SubsetAverage = valueArray[2];
					columnObject.SubsetVariance = valueArray[3];
					
					columnObjectCollection.addItem(columnObject);
				}
				
				statisticsBox.addChild(statDataGrid);
			}
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError((event));
			}
			
			
			
			
			
			
		]]>
	</mx:Script>
</ui:DraggablePanel>