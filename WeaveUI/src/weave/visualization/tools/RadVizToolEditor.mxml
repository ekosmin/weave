<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author spurushe
@author fkamayou
-->
<ui:CustomTabNavigator xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:userControls="weave.ui.userControls.*"		 
			   implements="weave.api.ui.ILinkableObjectEditor"
			   label="{lang('RadViz settings')}"
			   initialize="UIUtils.pad(this, 8);"
			   >
	
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			
			import weave.services.beans.ClassDiscriminationResult;
			
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.linkBindableProperty;
			import weave.api.reportError;
			import weave.core.UIUtils;
			import weave.data.DataSources.CSVDataSource;
			import weave.radviz.ClassInfoObject;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.utils.ColumnUtils;
			
			
			[Bindable] public var _target:RadVizTool = null;
				
			
			[Bindable] 
			public var selectedColumnName:String;
			public var selectedAlgoOption:String;
			private var thrValue:Number; private var layoutMeasure:String = new String();
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);

			 override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				(size as DynamicColumnComponent).dynamicObject = _target._plotter.radiusColumn ;
				(colorComponent as DynamicColumnComponent).columnWrapper = _target._plotter.fillStyle.color;
				columnList.hashMap = _target._plotter.columns;

				// this will set the columns for the point sensitivity
				//poinstSensitivityColumnList.hashMap = _target._plotter.pointSensitivityColumns;
				(classDis as DynamicColumnComponent).dynamicObject = _target.classDiscriminatorColumn;
				linkBindableProperty(_target._plotter.enableJitter,jitterckbx,'selected');
				linkBindableProperty(_target._anchorPlotter.unrestrictAnchors, unrestrictAnchorsckbx, 'selected');
				linkBindableProperty(_target._plotter.radiusConstant,sizeSlider,'value');				
				linkBindableProperty(_target._plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_target._plotter.jitterLevel, jitterSlider, "value" );
				WeaveAPI.globalHashMap.childListCallbacks.addGroupedCallback(this, handleGlobalNamesChange, true);
				_target._plotter.columns.childListCallbacks.addImmediateCallback(this, function():void { pointSensitivityChecklist.dataProvider = _target._plotter.columns.getObjects(); }, true);
				_target._plotter.columns.childListCallbacks.addImmediateCallback(this, function():void { pointSensitivityChecklist.labelFunction = ColumnUtils.getColumnListLabel; }, true);
				linkBindableProperty(_target._plotter.pointSensitivitySelection, pointSensitivityChecklist, 'selection');
			} 
			
			
			private function handleGlobalNamesChange():void
			{
				if (!csvDataComboBox)
				{
					callLater(handleGlobalNamesChange);
					return;
				}
				csvDataComboBox.dataProvider = WeaveAPI.globalHashMap.getNames(CSVDataSource);
			}
			
			public function setTarget(object:ILinkableObject):void
			{
				_target = object as RadVizTool;
			}
			public function hasPendingChanges():Boolean { return false; }
			public function applyChanges():void { }
	
			
			private function alphaSliderFormatFunction(item:Number):String 
			{
				return int((item * 100)) + "% Opaque" + "\n" + int(100 - (item * 100)) + "% Transparent";
			}
			
			
			//these two counters keep track of the asynchronos calls made to R and the results returned
			private var sentToRCounter:Number;
			private var receivedFromRCounter:int = 0;
			private var RCallGroupNumber:int = 0;
			
			/**this function handles the results returned from R (the t-statistic and the p-values)*/
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{
				
				/*  if (delay)
				{
					DebugUtils.callLater(10000, handleRunScriptResult, [event, token, false]);
					return;
				}  */
				
				 //handles two ansynchronous calls made to R
				 //This results in the most recent R call being processed
				// if(token[2] != RCallGroupNumber) {return};
				 
				receivedFromRCounter++;
					//Object to stored returned result - Which is array of object{name: , value: }
					var result:ClassDiscriminationResult = new ClassDiscriminationResult(event.result);				
				
					if (result == null)
					{
						reportError("Error running the class discrimination script");
						return;
					}
					
					//var colIndex:int = token[1];
				     var colIndex: int = _target._plotter.columns.getNames().indexOf(token[1]);
					//Fills in the t-statistic and pValues(hard coded since we will be receiving only two values from R)
					(token[0] as ClassInfoObject).tStatisticArray[colIndex] = result.statistic;
					(token[0] as ClassInfoObject).pValuesArray[colIndex] = result.pvalue;
					trace("handlescript successful!");
					trace("receivedFromRCounter :" + receivedFromRCounter);
					trace("sentToRCounter :" + sentToRCounter);
					
					if(sentToRCounter == receivedFromRCounter)
					{
						doCdLayout();
					}
					
					
			}
			
	
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
					trace(["fault", token, event.message].join('\n'));
					reportError(event);
			}
		
			
			
			// identifies which measure (pvalue or t-statistic) has been selected by the user for the CD algorithm 
			protected function measureCheck():String
			{
				var layoutMeasure:String = new String();
				if(useThresholdCB.selected)
				{
					if(tStatCB.selected){ layoutMeasure = "Tstat";}
					if(pValCB.selected) { layoutMeasure = "PVal";}
					if(tStatCB.selected && pValCB.selected){ Alert.show("Please select only one option","Alert Box",Alert.OK);}
				}
				
				return layoutMeasure;
			}
			
			/*-----------------------------------------BUTTON CLICK HANDLERS----------------------------------------------------------*/		
			
			
			/**
			 * This function runs the Class discrimination algorithm on the current columns. Every time a column is aded or removed
			 * this algortihm must be redrawn 
			 * */
			/**this function sends columns to R for calculation of the t-statistic and p-value*/
			protected function DOcdButton_clickHandler(event:MouseEvent):void
			{
				var script:String = "";
				var flag:Boolean;  
				sentToRCounter = 0;
				var selectedOptionName:String= layoutAlgoCB.selectedLabel;
				
				if (selectedOptionName == "t-statistic = variance"){flag = true;}
				
				if (selectedOptionName == "t-statistic != variance"){flag = false;}  
				
				/* Call to R
				FOr a type(example "American") sends one column at a time and a two-sample t-test is performed in R
				For each column the t-statistic and p-value are returned from R
				*/
				
				var colObjects:Array = _target._plotter.columns.getObjects();//user selected columns
				if(colObjects.length == 0)
					return;
				
				for (var type:Object in _target.cdLayout.ClassToColumnMap)
				{						
					for(var l:int = 0; l < colObjects.length; l++)
					{
						var inputValues:Array = new Array();//sending two vectors to R
						
						inputValues.push((_target.cdLayout.ClassToColumnMap[type] as ClassInfoObject).columnMapping[_target._plotter.columns.getNames()[l]]);//pushing col belonging to type
						
						var temArray:Array = new Array();
						for(var comparetype:Object in _target.cdLayout.ClassToColumnMap)
						{
							if(type!= comparetype)//collecting the values of the same column for other types
							{
								temArray = temArray.concat((_target.cdLayout.ClassToColumnMap[comparetype]as ClassInfoObject).columnMapping[_target._plotter.columns.getNames()[l]]);
							}
						}
						
						inputValues.push(temArray);
						
						//send one column to R at a time
						var query:AsyncToken = Rservice.doClassDiscrimination(inputValues[0], inputValues[1], flag);
						addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault,[_target.cdLayout.ClassToColumnMap[type],_target._plotter.columns.getNames()[l]]);
						sentToRCounter++;
						//addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault,[cdLayout.ClassToColumnMap[type],l]);
					}
					
				}
				
			}
			
			private function doCdLayout():void
			{
				receivedFromRCounter = 0;
				
				//testing
				//check if columns are present
				var colObjects:Array = _target._plotter.columns.getObjects();//user selected columns
				if (colObjects.length == 0)
					return;
				
				var thrValue:Number;
				var columnNumPerClass:Number;
				if(thresholdValue.text != "")//check done because if left empty automatically assigned to zero(not desired)
				    thrValue = Number(thresholdValue.text);
				_target._anchorPlotter.anchorThreshold = thrValue;
				//if(columninClassTI.text != "")
				    //columnNumPerClass = Number(columninClassTI.text);//limits the number of columns in each class to this number
				var layoutMeasure:String = new String();
				if(useThresholdCB.selected){layoutMeasure = measureCheck();} 
				else{
					layoutMeasure = "Tstat";
				}
				
				_target.cdLayout.performClassDiscrimination(_target._plotter.columns.getNames(),_target.cdLayout.ClassToColumnMap,layoutMeasure,thrValue,columnNumPerClass);
				_target._anchorPlotter.drawingClassLines = true;//cd coloring
				_target._anchorPlotter.doCDLayout = true;//cd layout needed for tstat rendering
				_target._anchorPlotter.anchorClasses = _target.cdLayout.tAndpMapping;//we need this to be able to draw the classlines and color the anchors accorsing to the class they belong to
				_target._plotter.setclassDiscriminationMetric(_target.cdLayout.tAndpMapping, _target.cdLayout.tandpValuesMapping);
				_target._plotter.LayoutClasses = _target.cdLayout.tAndpMapping; //for setting cd dimensional anchor  locations
				//_target._plotter.setAnchorLocations();
				_target._plotter.setClassDiscriminationAnchorsLocations();//cd layout
			}
				
			//restoring the default ordering
			protected function defaultDAs_clickHandler(event:MouseEvent):void
			{
				_target._anchorPlotter.doCDLayout = false;
				_target._anchorPlotter.anchorThreshold = NaN;//find a better way to do this
				_target._anchorPlotter.drawingClassLines = false;
				_target._plotter.setAnchorLocations();//normal layout
				
			}
			
			protected function useThresholdCB_clickHandler(event:MouseEvent):void
			{
				if(useThresholdCB.selected){ thresholdValue.enabled = true; thrValLabel.enabled = true;}
				if(!useThresholdCB.selected){ thresholdValue.enabled = false; thrValLabel.enabled = false;}
				
			}
			
		]]>
	</mx:Script>
	
	
		<mx:VBox id="attributesPanel" label="Attributes">
			<ui:DynamicColumnComponent id="colorComponent"/>
			<ui:DynamicColumnComponent id="size"/>
			<ui:ColumnListComponent id="columnList"/>
		</mx:VBox>		
		
		<mx:VBox id="VizControlsPanel" label="Appearance">
			<ui:Indent label="Point opacity"
					   width="100%"
					   toolTip="Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).">
				<mx:HSlider id="alphaSlider"
							width="100%"
							alpha="1.0"
							snapInterval="0.1"
							tickInterval="0.1" labels="{['10%', '30%', '50%', '70%', '90%', '100%']}"
							dataTipFormatFunction="alphaSliderFormatFunction"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="Point radius"
					   width="100%"
					   toolTip="Use this control to adjust point radius">
				<mx:HSlider id="sizeSlider"
							width="100%"
							alpha="1.0"
							tickInterval="1" 
							minimum="1" maximum="10" 
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="Label angle" width="100%">
				<mx:HSlider id="labelAngleSlider" width="100%"
					snapInterval="0.25" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
					dataTipFormatFunction="{function(v:Number):String { return String(Math.round(100*v))+'%' }}"
					creationComplete="linkBindableProperty(_target._anchorPlotter.labelAngleRatio, event.target, 'value')"/>
			</ui:Indent>
			<mx:Spacer height="10"/>
			
			
			<ui:Indent label="Circle line thickness" width="100%">
				<mx:HSlider id="circleLineThicknessSlider" width="100%"
							creationComplete="linkBindableProperty(_target._anchorPlotter.circleLineStyle.weight.defaultValue, event.target, 'value')"
							minimum="1" maximum="10" snapInterval="1" liveDragging="true"
							tickInterval="1"/>
			</ui:Indent>
			
			<ui:Indent label="Circle line opacity" width="100%">
				<mx:HSlider id="circleLineOpacitySlider" width="100%"
							creationComplete="linkBindableProperty(_target._anchorPlotter.circleLineStyle.alpha.defaultValue, event.target, 'value')"
							minimum="0" maximum="1" snapInterval="0.1" liveDragging="true"
							tickInterval="0.1"/>
			</ui:Indent>
			
			
			<ui:Indent label="Circle color" width="100%">
				<ui:CustomColorPicker id="circleColorPicker"
								creationComplete="linkBindableProperty(_target._anchorPlotter.circleLineStyle.color.defaultValue, event.target, 'selectedColor')" />
			</ui:Indent>
			
			<mx:Spacer height="10"/>
			
			
			<ui:Indent label="Anchor point radius" width="100%">
				<mx:HSlider width="100%"
							alpha="1.0"
							tickInterval="1" 
							minimum="1" maximum="10" 
							creationComplete="linkBindableProperty(_target._anchorPlotter.anchorRadius, event.target, 'value')"/>
				
			</ui:Indent>
			

			<ui:Indent label="Anchor point opacity">
				<mx:HSlider id="anchorPointOpacitySlider" width="100%" value="0.0"
							creationComplete="linkBindableProperty(_target._anchorPlotter.anchorFillStyle.alpha.defaultValue, event.target, 'value')"
							minimum="0" maximum="1" snapInterval="0.1" liveDragging="true"
							tickInterval="0.1"/>
							
			</ui:Indent>
			
			<ui:Indent label="Anchor point color">
				<ui:CustomColorPicker id="anchorColorPicker"
								selectedColor="0xFFFFFF"
								creationComplete="linkBindableProperty(_target._anchorPlotter.anchorFillStyle.color.defaultValue, event.target, 'selectedColor')" />
			</ui:Indent>	
			
		</mx:VBox>
		
		<mx:VBox id="advancedPanel" label="Advanced">			
			<mx:VBox>
				<mx:HBox
					creationComplete="linkBindableProperty(_target._plotter.localNormalization,normalizationType,'selectedValue')">
					<mx:Label text="Normalization method:"
							  toolTip="Select the type of normalization used to calculate record coordinates"/>
					<mx:RadioButtonGroup id="normalizationType"/>
					<mx:RadioButton groupName="normalizationType"
									id="localNorm"
									value="true"
									label="Local"
									/>
					<mx:RadioButton groupName="normalizationType"
									id="globalNorm"
									value="false"
									label="Global"
									/>
				</mx:HBox>
				<mx:HBox>
					<mx:Label text="Normalized Threshold value for Probe Lines: "/>
					<mx:TextInput width="50" creationComplete="linkBindableProperty(_target._plotter.probeLineNormalizedThreshold,event.target,'text')"/>
					<ui:HelpComponent>
						Enter a value between 0 and 1.
						Probe lines will only be drawn from the point to those dimensions whose normalized corresponding values are equal or higher than this value.
					</ui:HelpComponent>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:HBox>
					<mx:CheckBox id="jitterckbx" label="Apply Jitter:" 
							  toolTip="Use this control to change record coordinates by a random number"/>
					<mx:Button label="Randomize Jitter"
							   toolTip="Use this control to reseed jitter with new random values"
							   click="_target._plotter.setNewRandomJitterColumn();"/>
					<mx:Label text="Jitter Level:" 
							  enabled="{jitterckbx.selected}"
							  toolTip="Use slider to adjust the jitter level"/>					
					<mx:HSlider id="jitterSlider"
								enabled="{jitterckbx.selected}"
								width="100%"
								alpha="1.0"
								snapInterval="1"
								tickInterval="1"
								labels="{['1','2','3','4','5','6','7','8','9','10']}"
								showDataTip="false"
								minimum="-19" maximum="-10"
								liveDragging="true"/>
				</mx:HBox>
			</mx:VBox>
			
			<mx:Spacer height="10"/>

			<mx:VBox>
				<mx:CheckBox id="unrestrictAnchorsckbx" label="Enable unrestricted anchors"
							 toolTip="Use this controle to remove the RadViz circle and allow unrestricted anchor movement"/>
			</mx:VBox>
			
			<mx:Spacer height="10"/>

			<mx:VBox>
				<mx:Label text="Dimensional Anchor Reordering Algorithm:"
						  toolTip="Use this control to reorder the dimensional anchors"/>					
				<mx:ComboBox id="algorithmComboBox" dataProvider="{_target._plotter.algorithms}"
							 creationComplete="linkBindableProperty(_target._plotter.currentAlgorithm,event.target,'selectedItem')"/>
				<mx:HBox enabled="{algorithmComboBox.selectedIndex == 0}">
					<mx:Label text="Number of Iterations"/>
					<mx:TextInput id="iterationsTextInput" enabled="{algorithmComboBox.selectedIndex == 0}"
								  creationComplete="linkBindableProperty(_target._plotter.iterations, event.target, 'text')"/>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:HBox>
					<mx:CheckBox id="sampleCheckBox" label="Sample Data Set" labelPlacement="left" toolTip="Randomly sample the data set"/>
					<mx:Label text="Sample Name" />
					<mx:TextInput id="sampleTitle" toolTip="This name will be used for the new sample source"
								  enabled="{sampleCheckBox.selected}"
								  creationComplete="linkBindableProperty(_target._plotter.sampleTitle, event.target, 'text')"/>
				</mx:HBox>
				<mx:HBox>
					<mx:HBox>
						<mx:Label text = "Sample Size:" toolTip="Specify a sample size." />						
						<mx:TextInput id ="sampleSizeRows" text="300" enabled="{sampleCheckBox.selected}" width="50" toolTip="Rows"
									  creationComplete="linkBindableProperty(_target._plotter.sampleSizeRows, event.target, 'text')"/>
						<mx:Label text = "x"/>						
						<mx:TextInput id ="sampleSizeColumns" text="20" enabled="{sampleCheckBox.selected}" width="50" toolTip="Columns"
									  creationComplete="linkBindableProperty(_target._plotter.sampleSizeColumns, event.target, 'text')"/>

						
					</mx:HBox>
					
					
				</mx:HBox>
				<mx:VBox>
					<mx:HBox>
						<mx:Label text="Source name" />
						<mx:ComboBox id="csvDataComboBox"
									 enabled = "{sampleCheckBox.selected}"
									 creationComplete="linkBindableProperty(_target._plotter.dataSetName, event.target, 'selectedItem')"/>
					</mx:HBox>
					
					<!-- <mx:RadioButtonGroup id="sampleOptionRadioGroup"/>
						<mx:RadioButton paddingLeft="10" groupName="sampleOptionRadioGroup" label="Internal Sampling" id="internalSampling"
										selected="true" creationComplete="linkBindableProperty(_target._plotter.regularSampling, event.target, 'selected')"/>
						
						<mx:RadioButton paddingLeft="10" groupName="sampleOptionRadioGroup" label="R Sampling" id="rSampling" visible="false"
										creationComplete="linkBindableProperty(_target._plotter.RSampling, event.target, 'selected')"/>
					-->
					<mx:Button id= "sampleDataButton" label="Sample"
							   enabled = "{sampleCheckBox.selected}"
							   click="_target._plotter.sampleDataSet()"/>
					</mx:VBox>
				</mx:VBox>
		</mx:VBox>
	<mx:VBox id="cdlayout" label="CDLayout" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:VBox width="100%">
						<!--mx:Label text="Choose the class disciminator column"/-->
						<ui:DynamicColumnComponent id="classDis"/>
				<ui:Indent label="Layout Algorithm">
					
					<mx:ComboBox id="layoutAlgoCB" >
						<mx:ArrayCollection>
							<mx:String>Select an option</mx:String>
							<mx:String>t-statistic = variance</mx:String>
							<mx:String>t-statistic != variance</mx:String>
						</mx:ArrayCollection>
					</mx:ComboBox>
					</ui:Indent>
			
				
					<mx:Label text="Choose Class Discimination Metric"/>
				<mx:VBox>
					<mx:RadioButtonGroup id="classDisMetric"/>
						<mx:RadioButton paddingLeft="10" groupName="classDisMetric" label="t-statistic" id="tStatCB"/>
						<mx:RadioButton paddingLeft="10" groupName="classDisMetric" label="p-Value" id="pValCB"/>
					
				</mx:VBox>
				
			<mx:CheckBox paddingLeft="10" label="Use Threshold" id="useThresholdCB"  click="useThresholdCB_clickHandler(event)" />
			<mx:HBox>
				<mx:Label  id="thrValLabel" text="Threshold Value" enabled="false"/>
				<mx:TextInput  width="20%" id="thresholdValue" enabled="false"/>
				
			</mx:HBox>
			
				<mx:VBox>
					<mx:HBox paddingLeft="10">
						<mx:Button id="DOcd" label="Do Class Discrimination" click="DOcdButton_clickHandler(event)"/>
						<mx:Button id="defaultDAs" label="Restore default ordering" click="defaultDAs_clickHandler(event)"/>
					</mx:HBox>
					
					<!-- <mx:CheckBox paddingLeft="10" id="tInTableCB" label="Show t-statistic in table"/>
					<mx:CheckBox paddingLeft="10" id="pInTableCB" label="Show p values in table"/> -->
				</mx:VBox>
				
		</mx:VBox>
			
	</mx:VBox>
	<mx:VBox id="pointsensitivity" label="Point Sensitivity" horizontalScrollPolicy="off" verticalScrollPolicy="off">
		<mx:VBox width="100%">
			<mx:HBox width="100%">
				
				<mx:CheckBox id="barycenterCheckBox" label="Show Barycenter" labelPlacement="left" toolTip="Enabling this will show the DAs barycenter"
							 creationComplete="linkBindableProperty(_target._anchorPlotter.showBarycenter, event.target, 'selected')"
							 paddingLeft="40"/>
			
				<mx:CheckBox id="voronoiCheckBox" label="Draw Voronoi Diagram" labelPlacement="left" toolTip="Enabling this will draw the DAs voronoi diagram"
							 creationComplete="linkBindableProperty(_target._anchorPlotter.showVoronoi, event.target, 'selected')"
							 paddingLeft="40"/>
				
				<mx:CheckBox id="convexhullCheckBox" label="Draw Convex Hull" labelPlacement="left" toolTip="Enabling this will draw the DAs convex hull"
							 creationComplete="linkBindableProperty(_target._anchorPlotter.showConvexHull, event.target, 'selected')"
							 paddingLeft="40"/>
				
			</mx:HBox>
			
			<ui:Indent label="Barycenter point radius" width="100%">
				<mx:HSlider width="100%"
							alpha="1.0"
							tickInterval="1" 
							minimum="1" maximum="10" 
							creationComplete="linkBindableProperty(_target._anchorPlotter.barycenterRadius, event.target, 'value')"/>
				
			</ui:Indent>
			
			
			<ui:Indent label="Barycenter point opacity">
				<mx:HSlider id="barycennterOpacitySlider" width="100%" value="0.0"
							creationComplete="linkBindableProperty(_target._anchorPlotter.barycenterFillStyle.alpha.defaultValue, event.target, 'value')"
							minimum="0" maximum="1" snapInterval="0.1" liveDragging="true"
							tickInterval="0.1"/>
				
			</ui:Indent>
			
			<ui:Indent label="Barycenter point color">
				<mx:ColorPicker id="barycenterColorPicker"
								selectedColor="0xFFFFFF"
								creationComplete="linkBindableProperty(_target._anchorPlotter.barycenterFillStyle.color.defaultValue, event.target, 'selectedColor')" />
			</ui:Indent>
			
			
				
			<mx:CheckBox id="annulusCenterCheckBox" label="Show Annulus Center" labelPlacement="left"
							 creationComplete="linkBindableProperty(_target._plotter.showAnnulusCenter, event.target, 'selected')"
							 paddingLeft="40"/>
			
			<ui:Indent label="Point Sensitivity Columns"/>
			
			<ui:CheckBoxList id="pointSensitivityChecklist"/>

			
		</mx:VBox>
	</mx:VBox>
		
	
</ui:CustomTabNavigator>
