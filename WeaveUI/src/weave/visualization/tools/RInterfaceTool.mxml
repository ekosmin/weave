<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				horizontalScrollPolicy="off" verticalScrollPolicy="off" 
				xmlns:ui="weave.ui.*"  
				backgroundColor="0x87CEFF"
				x="15%" width="70%" y="15%" height="70%"
				title="{lang('R Interface Tool')}"
				layout="horizontal"
				autoLayout="true"
				creationComplete="draggablepanel1_creationCompleteHandler(event)"
				implements="weave.api.ui.IVisTool_R" xmlns:tools="weave.visualization.tools.*" xmlns:controlBars="weave.ui.controlBars.*" xmlns:DataMiningEditors="weave.ui.DataMiningEditors.*">
	
	<mx:VBox paddingLeft="10" paddingRight="5" paddingTop="5" paddingBottom="20" width="100%" height="100%">
		<mx:MenuBar id="ROptions" labelField="@label" fontWeight="bold" cornerRadius="8" itemClick="menuItemClickHandler(event)"
					change="onTopSelection(event)">
			<mx:dataProvider>
				<mx:XMLList xmlns="">
					
			<menuitem  id = "Hello" label="File">
				<menuitem label = "New Script"/>
				<menuitem label="Import Script" />
				<menuitem label="Export Script"/>
			</menuitem>
			<menuitem label = "Warnings">
				<menuitem label="On"/>
				<menuitem label="Off"/>
			</menuitem>
			<menuitem label="Intermediate Results">
				<menuitem label="Include"/>
				<menuitem label="Omit"/>
			</menuitem>
			<menuitem label="Run Script">
				<menuitem label="Clustering">
					<menuitem label= "KMeans" />
					<menuitem label= "Fuzzy KMeans Clustering"/>
					<menuitem label= "Hierarchical Clustering"/>
					<menuitem label = "Partition Around Medoids Clustering"/>
					<menuitem label = "Data mining Platter"/>
				</menuitem>
				<menuitem label="Classification">
					<menuitem label= "Classification 1" />
					<menuitem label= "Classification 2"/>
				</menuitem>
			</menuitem>
				</mx:XMLList>
			</mx:dataProvider>
		</mx:MenuBar>
	
	<mx:HBox paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" width="100%" height="100%">
		
			
		
		<!-- Data manipulation and value exhibit-->
		<mx:VBox id="dataBox" width="50%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
			<mx:Label text="(1) Select data to send to R" fontWeight="bold"/>
			<ui:CustomTabNavigator width="100%" height="100%">
				<mx:VBox label="Columns">
					<mx:HBox paddingLeft="5" paddingRight="5">
						<mx:CheckBox id="columnsasVectorCB" label="Send Columns to R as Vectors" enabled="false"/>
						<mx:CheckBox id="columnsasHashmapCB" label="Send Columns to R as Key - Value pairs" enabled="false"/>
					</mx:HBox>
				<ColumnListComponent id="data" width="100%" hashMap="{variables}" label="Columns" />
					
				</mx:VBox>
				<mx:VBox id="columndistribution" label="Distribution" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5">
					<mx:Label text="Distribution of column data"/>
					<mx:List rowHeight="100" width="100%" height="100%" id="distrList" dataProvider = "{distributionObjCanvasArray}">
						<mx:itemRenderer>
							<mx:Component>
								<mx:HBox height="50%" verticalScrollPolicy="off" horizontalScrollPolicy="off" >
									<mx:Label id="lb"  fontWeight="bold"/>
									<mx:Image  id="img"  />
									<mx:Script>
										<![CDATA[
											override public function set data(value:Object):void{
												
												//super.data = value;
												if(value != null)
												{
													lb.text = value.label;
													img.source = value.icon;
												}
											}
										]]>
									</mx:Script>
									
								</mx:HBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:List>
					
				</mx:VBox>
				<mx:VBox id="statisticsBox" label="Statistics" paddingLeft="5" paddingRight="5">
					
				</mx:VBox>
				
				<mx:VBox id="missingDataBox" label="Missing Data">
					
				</mx:VBox>
				
				<mx:VBox id="misc" label="Miscellaneous">
					<ui:CustomTabNavigator width="100%" height="100%">
						<mx:VBox id="sampling" label="Sampling">
							
							<mx:HBox width="100%" height="80%">
								<!-- Sampling Data records-->
								<mx:VBox width="50%" paddingRight= "5" paddingLeft="5" paddingTop="5">
									<mx:Label text="1. Sampling Records" fontWeight="bold"/>
									<DataMiningEditors:NumberInputComponent id="samplingRecordsTA" label="Enter the sample size" identifier="samplingRecords" />
										
								</mx:VBox>
								
								<!-- Sampling Data Columns-->
								<mx:VBox>
									<mx:Label text="2. Sampling Columns" fontWeight="bold"/>
									<DataMiningEditors:ChoiceInputComponent id="samplingColumnsCB" label="Choose constant columns" toolTip="These columns will always remain in the sample"/>
								</mx:VBox>
							</mx:HBox>
								<mx:Button id="runSampleBUtton" label="Sample" />
							
						</mx:VBox>
					</ui:CustomTabNavigator>
					
				</mx:VBox>
			</ui:CustomTabNavigator>
			<mx:Button id="assignmentButton" label="(2) Generate and assign Variables" click="updateVariableAssignment(event)"/>
			
			<mx:Label text="Orginal Columns" fontWeight="bold"/>
			<mx:AdvancedDataGrid id="columnValueexhibit" width="100%" defaultLeafIcon="{null}" initialize="gc.refresh();">
				<mx:dataProvider>
					<mx:GroupingCollection2 id="gc" source="{valueExhibitCollection}">
						<mx:grouping>
								<mx:Grouping label="Columns">
									<mx:GroupingField name = "Columns"/>
							</mx:Grouping>
						</mx:grouping>
					</mx:GroupingCollection2>
				</mx:dataProvider>        
				
				<mx:columns>
					<mx:AdvancedDataGridColumn dataField="GroupLabel" headerText="Columns"/>
					<mx:AdvancedDataGridColumn dataField="columnName" headerText="Attribute Name"/>
					<mx:AdvancedDataGridColumn dataField="assignedVariable" headerText="Variable Name"/>
					<mx:AdvancedDataGridColumn dataField="value" headerText="Value" showDataTips="true"/>
				</mx:columns>
			</mx:AdvancedDataGrid>
			
			<mx:Spacer height="10"/>
			
			<mx:Label text="R Script Results" fontWeight="bold"/>
			<mx:AdvancedDataGrid id="resultDatagrid" width="100%" defaultLeafIcon="{null}" initialize="resultgc.refresh();" >
				<mx:dataProvider>
					<mx:GroupingCollection2 id="resultgc" source="{scriptResultValueExhibitCollection}">
						<mx:grouping>
							<mx:Grouping label="Columns">
								<mx:GroupingField name="Columns"/>
							</mx:Grouping>
						</mx:grouping>
					</mx:GroupingCollection2>	
				</mx:dataProvider>
				
				<mx:columns>
					<mx:AdvancedDataGridColumn dataField="GroupLabel" headerText="ScriptResults"/>
					<mx:AdvancedDataGridColumn dataField="assignedVariable" headerText="Variable Name"/>
					<mx:AdvancedDataGridColumn dataField="value" headerText="Value"/>
				</mx:columns>
				
			</mx:AdvancedDataGrid>
			<!--mx:AdvancedDataGrid id="resultDatagrid" width="100%" defaultLeafIcon="{null}" initialize="resultgc.refresh();" >
				<mx:dataProvider>
					<mx:GroupingCollection2 id="resultgc" source="{scriptResultValueExhibitCollection}">
						<mx:grouping>
							<mx:Grouping label="Columns">
								<mx:GroupingField name = "Columns"/>
							</mx:Grouping>
						</mx:grouping>
					</mx:GroupingCollection2>
				</mx:dataProvider>        
				
				<mx:columns>
					<mx:AdvancedDataGridColumn dataField="GroupLabel" headerText="Columns"/>
					<mx:AdvancedDataGridColumn dataField="columnName" headerText="Attribute Name"/>
					<mx:AdvancedDataGridColumn dataField="assignedVariable" headerText="Variable Name"/>
					<mx:AdvancedDataGridColumn dataField="value" headerText="Value" showDataTips="true"/>
				</mx:columns>
			</mx:AdvancedDataGrid-->
						 
						 			
		</mx:VBox>
		
		<!--Script and Script Result-->
		<mx:VBox id="scriptBox" width="50%" paddingLeft="5" paddingRight="5" paddingTop="5" paddingBottom="5" height="100%">
			<!-- 1-->
			<mx:HBox>
				<mx:Label text="(3) Enter a title to your script" fontWeight="bold"/>
				<mx:TextInput id="scriptTitle"/>
				
			</mx:HBox>
			<mx:Label text="(4) Enter your Rscript" fontWeight="bold"/>
			<!--2-->
			<ui:CustomTabNavigator width="100%" height="50%">
				<mx:VBox id="RscriptTab" label="R Script">
					<mx:TextArea id="RScriptTA" width="100%" height="100%"/>
					<!--ui:TextInputWithPrompt width="100%" height="100%" id="searchAttrTerms"
											prompt="{lang('foo = attr0 + attr1')}"
											/-->
				</mx:VBox>
				
				<mx:VBox id="plotScriptTab" label="R plotscript">
					<mx:TextArea id="RPlotscriptTA" width="100%" height="100%"/>
				</mx:VBox>
				<!--To DO move to a separate class-->
				<mx:VBox id="archDemo" label="Demo">
					<mx:HBox paddingRight="5" paddingLeft="5" width="100%">
						<mx:Label text="Select dataset to use "/>
						<mx:ComboBox id="datasetChoice" dataProvider="{datasetCollection}" change="updateQueryObjectString(event)"/>
					</mx:HBox>
					
					<mx:HBox paddingLeft="5" paddingRight="5" width="100%">
						<mx:Label text="Select R script(s) to use"/>
						<mx:ComboBox id="scriptChoices" dataProvider="{scriptCollection}" change="updateQueryObjectString(event)"/>
					</mx:HBox>
					
					<mx:CheckBox  paddingLeft ="5" paddingRight="5" id="csvCB" label="Import from CSV" click="updateQueryObjectString(event)"/>
					
					<mx:VBox paddingLeft="5" paddingRight="5" width="100%">
						<mx:CheckBox id="sqlCB" label="Import from mySQL database" click="sqlCB_changeHandler(event)"/>
						<mx:HBox>
							<mx:Label id="schemaLabel" text="Select database schema" enabled="false"/>
							<mx:ComboBox id="schemaCB" dataProvider="{schemaChoices}" enabled="false" change="updateQueryObjectString(event)"/>
						</mx:HBox>
						<mx:Label id="paramLabel" text="Type in parameter names separated by commas" enabled="false"/>
						<mx:TextArea id="paramInputTA" width="100%" enabled="false"/>
					</mx:VBox>
					
					<mx:HBox width="100%">
						<mx:Spacer width="80%"/>
						<mx:Button id="servercall" label="Execute" click="servercall_clickHandler(event)"/>
					</mx:HBox>
				</mx:VBox>
				
				<mx:VBox id="queryObjectDisplay" label="Query Object">
					<mx:TextArea id="queryObjectTA" width="100%" height="100%"/>
				</mx:VBox>
				
			</ui:CustomTabNavigator>
			<mx:HBox>
			<mx:Spacer width="75%"	/>
			<!--mx:Button id="newScript" layoutDirection="rtl" label="New Script" click="newScript_clickHandler(event)"/-->
			</mx:HBox>
			<!--3-->
			<mx:Label text="(4) Enter script result variable name" fontWeight="bold"/>
			<!--4-->
			<mx:HBox width="100%">
				<mx:TextArea id="outputTA" width="75%" height="30%"/>
			<mx:Button id="B2" label="{lang('Run script')}" click="runningScript()"/>
				
			<!--mx:HBox>
				<mx:CheckBox id="intermediateResultCB" label="{lang('Verbose')}" toolTip="{lang('Show intermediate results from R')}"/>
				<mx:CheckBox id="warningCB" label="{lang('Warnings')}" toolTip="{lang('Show warnings from R')}"/>
			</mx:HBox-->
			</mx:HBox>
			<!--5-->
			<mx:Spacer height="5"/>
			<!--6-->
			<mx:Label text="Results returned from R" fontWeight="bold"/>
			<!--7-->
			<mx:TextArea id="RResultConsole" width="100%" height="40%"/>
			<!--8-->
			<Paragraph text="{lang('(6) Export your script for later use')}" fontWeight="bold"/>
			<!--9-->
			<mx:HBox>
				<mx:Button id="exportBtn" label="{lang('Export')}" />
				<mx:Button id="importBtn" label="{lang('Import')}" />	
			</mx:HBox>	
		</mx:VBox>			
		
	</mx:HBox>
	</mx:VBox>	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.DataGrid;
			import mx.core.FlexGlobals;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.MenuEvent;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.ObjectUtil;
			
			import spark.components.Image;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableString;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.DataSources.CSVDataSource;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.ui.DataMiningEditors.DataMiningPlatter;
			import weave.ui.DataMiningEditors.DataPreloadInR;
			import weave.ui.DataMiningEditors.FuzzyKMeansClusteringEditor;
			import weave.ui.DataMiningEditors.KMeansClusteringEditor;
			import weave.ui.DataMiningEditors.PamClusteringEditor;
			import weave.utils.ColumnUtils;
			import weave.utils.ResultUtils;

			//WeaveAPI.ClassRegistry.registerImplementation(IVisTool, RInterfaceTool, "RInterface");
			
			[Bindable]
		    public var valueExhibitCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var scriptResultValueExhibitCollection:ArrayCollection = new ArrayCollection();
			
			//TO DO: MOve this to a separate class hard coded for now
			[Bindable]
			public var datasetCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var scriptCollection:ArrayCollection = new ArrayCollection();
			[Bindable]
			public var schemaChoices:ArrayCollection = new ArrayCollection();
			public var datasets:Array = new Array(); 
			public var storedscripts:Array = new Array();
			public var schema:Array = new Array();
			
			
			public const variables:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const RScriptTAtext:LinkableString = newLinkableChild(this, LinkableString);
			public const RPlotscriptTALinkabletext:LinkableString = newLinkableChild(this, LinkableString);
			public var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			public var resultString:String = "";//this is the result of every script returned from R
			public var numberOfRCalls:int = 0;
			
			public const queryObjectDisplayString:LinkableString = newLinkableChild(this, LinkableString);
			
			public var columnNames:Array = new Array();
			public var inputNames:Array = new Array();
			public var variablesString:String = "" ;
			
			private var colorFlag:Boolean = false;
			private const ALTERNATING_COLOR1:uint = 0xADFF2F;
			private const ALTERNATING_COLOR2:uint = 0xA2CD5A;
			
			private var showWarnings:Boolean = false;
			private var showIntermediateResults:Boolean = false;
			
			
			private var joinedColumns:Array ;
			private var outputNames:Array = new Array();
			private var finalGridDisplayArray:Array = new Array();
			public var colNames:Array = new Array();//
			private var latestjoinedColumnKeys:Array = new Array();
			//drawing binned Columns obtained from R
			[Bindable]
			public var distributionObjCanvasArray:Array = new Array();//collects all the canvases for all the columns (one canvas per column)
			private var statDataGrid:DataGrid = null;
			private var columnObjectCollection:ArrayCollection = new ArrayCollection();
			
			private var rPreload:DataPreloadInR = DataPreloadInR.getDataPreloadInRinstance(fillingResult);//used for calculating certain statistics as soon as data is loaded
			private var normBinAndStatResult:Array = new Array();//object returned from R which contains stats, distributions 
			
			override protected function inConstructor():void
			{
				super.inConstructor();				
				var columns:Array = ColumnUtils.getColumnsWithCommonKeyType();
				for (var i:int = 0; i < columns.length; i++)
					variables.requestObjectCopy(null, columns[i]);
				
				//TO DO: MOve this to a separate class hard coded for now
				datasets = ["Select the dataset","SDoH2010Q.csv", "obesity.csv"];
				storedscripts = ["Select the script","brfssRRoutine.R","CDCSQLQueries.R","obesitySQLRoutine.R", "obesityCSVRoutine.R"];
				schema = ["Select the schema", "resd", "us"];
				
				datasetCollection.source = datasets;
				scriptCollection.source = storedscripts; 
				schemaChoices.source = schema;
				
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				linkBindableProperty(RScriptTAtext,RScriptTA,"text");
				linkBindableProperty(RPlotscriptTALinkabletext,RPlotscriptTA,"text");
				//move to a separate class
				linkBindableProperty(queryObjectDisplayString,queryObjectTA,"text");
				
				variables.addImmediateCallback(this, normaBinAndStatR, true);
			}
			
			private function fillingResult(_incomingObject:Array):void
			{
				normBinAndStatResult = _incomingObject;
				//drawing the column distributions
				distributionObjCanvasArray = rPreload.drawingColumnDistribution(normBinAndStatResult[0]);
				//displaying the statistics in a data grid
				var dg:DataGrid = rPreload.displayStatistics(normBinAndStatResult[1]);
				statisticsBox.addChild(dg);
			}
			
			//this function sneds the dataset to R, where the data is normalized, binned and statistics of each numerical column are calculated
			private function normaBinAndStatR():void 
			{
				if (WeaveAPI.SessionManager.linkableObjectIsBusy(variables))//do the next chunk of code only after _plotter.columns is filled
					return;
				
				var colObjects:Array = variables.getObjects(IAttributeColumn);
				
				//TO:Do figure out UI for choosing more than one column
				//in order to show column Names for sampling Column options
				/* for(var d:int = 0; d < colObjects.length; d++)
				{
					colNames.push(ColumnUtils.getTitle((colObjects[d] as IAttributeColumn)));
				}
				
				samplingColumnsCB.choiceBox.dataProvider = colNames; */
				
				rPreload.normaBinAndStatR(variables);
				if(normBinAndStatResult.length == 0)
					return;
			}
			
			
			
			protected function onTopSelection(event:MenuEvent):void
			{
				//trace("Hello");
			}
			
			
			private function menuItemClickHandler(e:Event):void
			{
				//series of checks to determine which menu item was clicked
				if((e as MenuEvent).label == "New Script")
				{
					newScript_clickHandler();
				}
				
				if((e as MenuEvent).label == "On")showWarnings = true;
				if((e as MenuEvent).label == "Off")showWarnings = false;
				
				
				if((e as MenuEvent).label == "Include")showIntermediateResults = true;
				if((e as MenuEvent).label == "Omit")showIntermediateResults = false;
				
				
				if((e as MenuEvent).label == "KMeans")
				{
					//to do :   do we  allow more than one editor type??
				  var kmeansEditor:KMeansClusteringEditor = new KMeansClusteringEditor();
				  FlexGlobals.topLevelApplication.visDesktop.addChild(kmeansEditor);   
					
				}
				
				if((e as MenuEvent).label == "Fuzzy KMeans Clustering") 
				{
					var fuzzyKmeansEditor:FuzzyKMeansClusteringEditor = new FuzzyKMeansClusteringEditor();
					FlexGlobals.topLevelApplication.visDesktop.addChild(fuzzyKmeansEditor); 
				}
				
				if((e as MenuEvent).label == "Partition Around Medoids Clustering")
				{
					var pamEditor:PamClusteringEditor = new PamClusteringEditor();
					FlexGlobals.topLevelApplication.visDesktop.addChild(pamEditor);
				}
				
				if((e as MenuEvent).label == "Data mining Platter") 
				{
					var platterInstance:DataMiningPlatter = DataMiningPlatter.getPlatterInstance();
					platterInstance.inputVariables = variables;
					FlexGlobals.topLevelApplication.visDesktop.addChild(platterInstance); 
				}
			}
			
			protected function updateVariableAssignment(event:MouseEvent):void
			{
				//valueExhibitCollection.removeAll();//cleans the data grid entries before every selection
			    var colObjects:Array = variables.getObjects(IAttributeColumn);
				
				//collecting Column Titles
				for(var i:int = 0; i < colObjects.length; i++)
				{
					var col:IAttributeColumn = colObjects[i] as IAttributeColumn;
					var colValuesString:String = "";
					for (var r:int = 0; r < col.keys.length; r++)
					{
						colValuesString += String(col.getValueFromKey(col.keys[r],Number)) + ", ";
					}
					
					var colName:String = ColumnUtils.getTitle(col);
					columnNames.push(colName);
					//generate a new object for each column and later for each new variable used in the script, results generated by script
					var columnentry:Object = new Object();
					columnentry.Columns = "Original Columns";
					columnentry.columnName = colName;
					columnentry.assignedVariable = "attr"+[i];
					columnentry.label = colValuesString;
					columnentry.value = colValuesString.substr(0,20) + "...";
					//collecting the names to be used for variables in R
					inputNames.push("attr"+[i]);
					if(i != colObjects.length)
					{
						variablesString = variablesString + inputNames[i] + ",";
						
					}
					valueExhibitCollection.addItem(columnentry);
				}
				
				
			}
			
			public function runningScript():void
			{
				//ResultTA.text = '';
				
				numberOfRCalls++;
				
				var result:Array = new Array();
				var joinedColumnQKeys:Array;
				var joinedColumnKeys:Array;
				var joinedColumns:Array;
				//Columns from ColumnListComponent 
				var colObjects:Array = variables.getObjects(IAttributeColumn);
				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				for(var i:int = 0; i<colObjects.length; i++)
				{
					attributeColumns[i] = colObjects[i] as IAttributeColumn;
				}
				
				if(colObjects.length >0)
				{					
					// get records for keys common to all columns 
					result = ResultUtils.joinColumns(attributeColumns);
					joinedColumnQKeys = result[0];
					joinedColumns = result[1];
					//this is for JRI service
					//joinedColumnKeys = joinedColumnQKeys.concat();
				}
				
				// replace each IQualifiedKey with its localName
				// this for JRI service 
				/* var keyType:String = null;
				for (var j:int = 0; j < joinedColumnKeys.length; j++)
				{
				var qkey:IQualifiedKey = joinedColumnKeys[j];
				// sanity check
				if (keyType && keyType != qkey.keyType)
				{
				// there are multiple key types in the list of keys..
				Alert.show("This feature only works with keys having a common keyType.  Key types do not match: " + [keyType, qkey.keyType]);
				return;
				}
				keyType = qkey.keyType;
				joinedColumnKeys[j] = qkey.localName;
				} */
				
				//Values need to assign for Column names in R
				var inputValues:Array = joinedColumns;
				
				//Script for R input
				var script:String = RScriptTA.text;
				var plotScript:String = RPlotscriptTA.text;
				// "\r" - replaced by "/n" in all occurance
				while(script.search("\r") > 0)
				{
					script = script.replace("\r","\n");
				}				
				//Script to get output from R
				var outputNames:Array = WeaveAPI.CSVParser.parseCSVRow(outputTA.text) || [];
				
				//Query is created from runScript with same signature from Jave side
				
				var query:AsyncToken = Rservice.runScript(null,inputNames, inputValues, outputNames, script,plotScript, showIntermediateResults,showWarnings,false);
				
				addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault, joinedColumnQKeys);
			}
			
			public var scriptResultValueExhibitMap:Dictionary = new Dictionary();
			public var a:int = 0;//checks number of times asynchronous calls are made
			private function handleRunScriptResult(event:ResultEvent, keys:Array):void
			{
				a++;
				//var valueExhibitMap:LinkableHashMap = registerLinkableChild(this,new LinkableHashMap());
				/* function():void { 
					return (colorFlag.value ? ALTERNATING_COLOR1 : ALTERNATING_COLOR2)); 
				} */
				
			
				var check:Array = new Array();
				//Object to stored returned result - Which is array of object{name: , value: }
				var Robj:Array = event.result as Array;
				trace('Robj:',ObjectUtil.toString(Robj));
				if (Robj == null)
				{
					reportError(lang("R Servlet did not return an Array of results as expected."));
					return;
				}
				
				//Clears previous Result
				RResultConsole.text = "";
				trace(ObjectUtil.toString(event.result));
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);	
				}
				
				
				for(var s:int = 0; s < RresultArray.length; s++)
				{
					var newObj:Object = new Object();
					newObj.name = (RresultArray[s] as RResult).name;
					newObj.Columns = scriptTitle.text;
					newObj.columnName = scriptTitle.text;
					newObj.assignedVariable = newObj.name;
					newObj.value = (RresultArray[s] as RResult).value;
					check.push(newObj);
						
				}
				 if(!scriptResultValueExhibitMap.hasOwnProperty(scriptTitle.text))
				 {
					 scriptResultValueExhibitMap[scriptTitle.text] = check;
				 }
				
				//	var newVar:String = rResult.name; //+ "(" + numberOfRCalls +")";
					//var scriptResult:String;
					
					//testing
					/* if(scriptTitle.text != null)scriptResult = scriptTitle.text;
					else scriptResult = "Run" + a; */
					
					/* if(!scriptResultValueExhibitMap.hasOwnProperty(newVar))
						{
						     scriptResultValueExhibitMap[newVar] = new Object();
							var newVarValue:Object = scriptResultValueExhibitMap[newVar]; 
							newVarValue.Columns = "Result"+scriptTitle.text;
							newVarValue.columnName = scriptTitle.text;
							newVarValue.assignedVariable = newVar;
							newVarValue.value = rResult.value;
							check.push(scriptResultValueExhibitMap[newVar]);
							
						//scriptResultValueExhibitMap[scriptTitle.text] = new Dictionary();
							//var dc:Dictionary = scriptResultValueExhibitMap[scriptTitle.text];
								//dc[newVar] = new Object();
							//var	newVarValue:Object = dc[newVar];
						} */
				
				
				for(var f:int = 0; f < check.length; f++)
				{
					scriptResultValueExhibitCollection.addItem(check[f]);
				}
				
				//TO display in ResultTA
				resultString= "";
				for (var j:int = 0; j < RresultArray.length; j++)
				{								
					resultString = resultString + RresultArray[j].name + ":" + ObjectUtil.toString(RresultArray[j].value) +"\n";
				}
				while (resultString.search("\"") > 0)
				{
					resultString = resultString.replace("\"","");
				}
				
				RResultConsole.text = resultString;
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for (var p:int = 0;p < RresultArray.length; p++)
				{
					if(RresultArray[p].name == "Plot Results")
					{
						var imagePanel:DraggablePanel = Weave.root.requestObject(null, DraggablePanel, false);
						var image:Image = new Image();
						image.source = RresultArray[p].value;
						imagePanel.addChild(image);
						imagePanel.panelWidth.value = "500";
						imagePanel.panelHeight.value = "500";
					}
				}
				ResultUtils.rResultToColumn(keys, RresultArray, Robj);
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError((event));
			}
			/* protected function assignTA_clickHandler(event:MouseEvent):void
			{
				var selectedTA:TextArea = (focusManager.getFocus()) as TextArea;
				focusedTA = selectedTA;
			}<assignNames>{assignTA.text}</assignNames>*/ 
			
			private var _sessionFileSaver:FileReference = null;
			private var _sessionFileLoader:FileReference = null;
			 protected function export_clickHandler(event:MouseEvent):void
			{
				var rScriptSessionState:XML =
					<RScriptEditor>
						<assignNames>{variablesString}</assignNames>
						<inputScript>{RScriptTA.text}</inputScript>
						<plotScript>{RPlotscriptTA.text}</plotScript>
						<outputScript>{outputTA.text}</outputScript>
					</RScriptEditor>;
				
				trace(rScriptSessionState);
				
				//WeaveXMLEncoder.encode(getSessionState(this)
				if(_sessionFileSaver == null)
				{
					_sessionFileSaver = new FileReference();
				}
				
				// Create a date that we can append to the end of each file to make them unique
				var date:Date = new Date();
				var dateString:String = date.fullYear +"."+ date.month +"."+ date.day +" "+ date.time;
				
				_sessionFileSaver.save(rScriptSessionState, lang("R-Script Session State {0}", dateString) + ".xml");
			} 
			
			private var _defaultsFilename:String = null;
			protected function import_clickHandler(event:MouseEvent):void
			{
				try
				{
					var loadedXML:XML = new XML();
					if(_sessionFileLoader == null)
					{
						_sessionFileLoader = new FileReference();
						
						_sessionFileLoader.addEventListener(Event.SELECT,   function (e:Event):void { _sessionFileLoader.load(); _defaultsFilename = _sessionFileLoader.name; } );
						_sessionFileLoader.addEventListener(Event.COMPLETE, function (e:Event):void {loadedXML = XML(e.target.data) ;loadIntoReditor(loadedXML);} );
					}
					_sessionFileLoader.browse([new FileFilter("XML", "*.xml")]);			
				}
				catch (e:Error)
				{
					reportError(e);
				}
			}
			
			
			protected function loadIntoReditor(xml:XML):void{
			//	assignTA.text = xml.assignNames;
				inputNames = variablesString.split(",")
				RScriptTA.text = xml.inputScript;
				RPlotscriptTA.text = xml.plotScript;
				outputTA.text = xml.outputScript;
			}
			
			private var focusedTA:TextArea = null; 
			
			protected function newScript_clickHandler():void
			{
				Alert.show("Do you want to delete current script results?", "Deleting previous script" ,mx.controls.Alert.YES | mx.controls.Alert.NO,this,savingScriptResults, null,Alert.YES);
				
			}
			
			//this will save the script result in the debugger as a menu 
			//To do :Check signature of result if column or if single number
			private function savingScriptResults(event:CloseEvent):void
			{
				if(event.detail == Alert.YES)
				{
					Alert.show("Results deleted", "Your previous script results are no longer available",mx.controls.Alert.OK);
					scriptResultValueExhibitCollection.removeAll();
					resultString = ""; outputTA.text = "";
					RPlotscriptTA.text = "";
					scriptTitle.text = "";
					RScriptTA.text = "";
					RResultConsole.text = "";
				}
				if(event.detail == Alert.NO)
				{
					
				}
			}
			
			
			//checks if the system posseses JRI or Rserve to update column sending options
			protected function draggablepanel1_creationCompleteHandler(event:FlexEvent):void
			{
				 var query:AsyncToken = Rservice.checkforJRIService();
				addAsyncResponder(query, handleJRIPresent, handleRunScriptFault ,null); 
				
			}
			
			private function handleJRIPresent(event:ResultEvent, token:Object = null):void
			{
				if(event.result == false)// if JRI absent no options; columns have to be sent as vectors
				{
					columnsasVectorCB.enabled = false;
					columnsasHashmapCB.enabled = false;
				}
					
				if(event.result == true)//if JRI present then option available whether to send columns as vectors or (key-value) pairs
				{
					columnsasHashmapCB.enabled = true;
					columnsasVectorCB.enabled = true;
				}
			}
			
			//-------------TO DO move to a separate class--------------------------------------------------------------------------------		
			// TODO move to a separate class 
			private var queryObject:Array = new Array();
			
			// TODO move to a separate class
			protected function servercall_clickHandler(event:MouseEvent):void
			{
				queryObject.length = 0;
				queryObject.push(datasetChoice.selectedLabel);
				queryObject.push(scriptChoices.selectedLabel);
				var queryStatement:String = paramInputTA.text;
				var schema:String = schemaCB.selectedLabel;
				//check which fork is selected and make the appropriate asynchronous call
				//set a default path?
				if(csvCB.selected)
				{
					var csvAsyncCall:AsyncToken = Rservice.runScriptOnCSVOnServer(queryObject);
					addAsyncResponder(csvAsyncCall, handleServerResults, handleRunScriptFault, null);
				}
				
				if(sqlCB.selected)
				{
					var sqlAsyncCall:AsyncToken = Rservice.runScriptOnSQLOnServer(queryObject, queryStatement, schema);
					addAsyncResponder(sqlAsyncCall, handleServerResults, handleRunScriptFault, null);
				}
				
			}
			
			// TODO move to a separate class
			protected function handleServerResults(event:ResultEvent, token:Object = null):void
			{
				queryObjectDisplayString.value = queryObjectDisplayString.value + "Results returned from R\n\n";
				var Robj:Array = event.result as Array;
				trace('Robj:',ObjectUtil.toString(Robj));
				if (Robj == null)
				{
					reportError(lang("R Servlet did not return an Array of results as expected."));
					return;
				}
				
				
				var RresultArray:Array = new Array();
				
				//collecting Objects of type RResult(Should Match result object from Java side)
				var headerRows:Array;
				var rows:Array = new Array();
				var keys:Array = new Array();
				var filling:Array = new Array();
				
				for (var i:int = 0; i < (event.result).length; i++)
				{
					if (Robj[i] == null)
					{
						trace("WARNING! R Service returned null in results array at index "+i);
						continue;
					}
					var rResult:RResult = new RResult(Robj[i]);
				
					if(rResult.name == "columnNames"){
						 headerRows = (rResult.value as ArrayCollection).toArray();
						headerRows.unshift("keys");
						rows.push(headerRows);
					}
					if(rResult.name == "columnValues")
					{
						var tempColumns:Array = rResult.value as Array;
						filling = rResult.value as Array;
						var sampleColumn:Array = tempColumns[0] as Array;
						for (var r:int = 0; r < sampleColumn.length; r++)					
						{
							var row:Array = new Array();
							row.push(r);
							keys.push(r as IQualifiedKey);
							for(var c:int = 0; c < tempColumns.length; c++){
								var column:Array = tempColumns[c] as Array;
								row.push(column[r]);
							}
							rows.push(row);								
						}
						
					}	
						
				}		
				
				/**
				 * Creating  new CSVDatasource
				 **/
				/* This is the final array added as a CSVDataSource having structure
				[
				["k","x","y","z"]
				["k1",1,2,3]
				["k2",3,4,6]
				["k3",2,4,56]
				] */
				
				//Give it a unique name incase we need to store the columns from multiple imputations
				var name:String = Weave.root.generateUniqueName("ReturnedColumns");
				var serverResultsCsvDataSource:CSVDataSource = Weave.root.requestObject( name,CSVDataSource,false);
				serverResultsCsvDataSource.setCSVData(rows);
				//imputedCsvDataSource.keyType.value = (keys[0] as IQualifiedKey).keyType;
				serverResultsCsvDataSource.keyColName.value = "keys";
				
				queryObjectDisplayString.value = queryObjectDisplayString.value + "Columns returned from R\n\n";
				
				automateVisualizations(serverResultsCsvDataSource);
				
			}
			

			private function automateVisualizations(serverResultsCsvDataSource:CSVDataSource):void
			{
				//create the tool
				//hard coded for now TO DO provide access with UI	
				var automaticScatterPlot:ScatterPlotTool = new ScatterPlotTool();
				var attributes:Array = automaticScatterPlot.getSelectableAttributes();
				
				serverResultsCsvDataSource.putColumn("State", attributes[0] as DynamicColumn);
				serverResultsCsvDataSource.putColumn("prev.percent", attributes[1] as DynamicColumn);
				serverResultsCsvDataSource.putColumn("response", attributes[2] as DynamicColumn);
				
				
				FlexGlobals.topLevelApplication.visDesktop.addChild(automaticScatterPlot);
				queryObjectDisplayString.value = queryObjectDisplayString.value + "ScatterPlot Tool added\n\n";
							
			}
			
			protected function sqlCB_changeHandler(event:Event):void
			{
				if(sqlCB.selected)
				{
					schemaCB.enabled = true;
					schemaLabel.enabled = true;
					paramInputTA.enabled = true;
					paramLabel.enabled = true;
				}
				else
				{
					schemaCB.enabled = false;
					schemaLabel.enabled = false;
					paramInputTA.enabled = false;
					paramLabel.enabled = false;
				}
				updateQueryObjectString(event);
				
			}
			
			protected function updateQueryObjectString(event:Event):void
			{
				if(event.target == datasetChoice)
					queryObjectDisplayString.value = queryObjectDisplayString.value + "Data Set selected : " + datasetChoice.selectedLabel+ "\n\n";
				if(event.target == scriptChoices)
				queryObjectDisplayString.value = queryObjectDisplayString.value + "R routine selected : "+ scriptChoices.selectedLabel + "\n\n";
				if(event.target == schemaCB)
					queryObjectDisplayString.value = queryObjectDisplayString.value + "Database schema selected : " + schemaCB.selectedLabel + "\n\n";
				if(event.target == csvCB)
				{
					if(csvCB.selected)
						queryObjectDisplayString.value = queryObjectDisplayString.value + "Importing CSV selected\n\n";
					else
						queryObjectDisplayString.value = queryObjectDisplayString.value + "Importing CSV unselected\n\n"
					
				}
				
				if(event.target == sqlCB)
				{
					if(sqlCB.selected)
						queryObjectDisplayString.value = queryObjectDisplayString.value + "Importing from SQL table selected\n\n";
					else
						queryObjectDisplayString.value = queryObjectDisplayString.value + "Importing from SQL table unselected\n\n";
				}
				
			}
			
		]]>
	</mx:Script>
	
</DraggablePanel>
