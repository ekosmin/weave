<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:settings="weave.ui.settings.*"
			   implements="weave.api.ui.IVisTool_R"
			   layout = "absolute" xmlns:editors="weave.editors.*" >
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.textClasses.TextRange;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import weave.Weave;
			import weave.api.copySessionState;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.data.AttributeColumns.StringColumn;
			import weave.data.BinningDefinitions.SimpleBinningDefinition;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.KeySets.KeySet;
			import weave.primitives.Bounds2D;
			import weave.services.WeavePDBServlet;
			import weave.services.WeaveRServlet;
			import weave.services.addAsyncResponder;
			import weave.services.beans.RResult;
			import weave.ui.AttributeSelectorPanel;
			import weave.utils.BitmapText;
			import weave.utils.ColumnUtils;
			import weave.visualization.plotters.RamachandranBackgroundPlotter;
			import weave.visualization.plotters.ScatterPlotPlotter;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, RamachandranPlotTool, "Ramachandran Plot");
			
			public var _plotter:ScatterPlotPlotter = null;
			override protected function inConstructor():void
			{
				super.inConstructor();
				// add background layer
				visualization.plotManager.plotters.requestObject("background", RamachandranBackgroundPlotter, true);
				
				// lock dynamic objects into place
				_plotter = initializePlotters(ScatterPlotPlotter, true);
				
				xAxisPlotter.forceTickCount.value = true;
				yAxisPlotter.forceTickCount.value = true;
				xAxisPlotter.forceTickCount.lock();
				yAxisPlotter.forceTickCount.lock();
				xAxisPlotter.tickCountRequested.value = 9;
				yAxisPlotter.tickCountRequested.value = 9;
				xAxisPlotter.tickCountRequested.lock();
				yAxisPlotter.tickCountRequested.lock();
				
				//BEGIN TEMPORARY SOLUTION
				visualization.plotManager.marginLeftNumber.addImmediateCallback(this, updateAxisLabels);
				visualization.plotManager.marginBottomNumber.addImmediateCallback(this, updateAxisLabels);
				getCallbackCollection(_plotter).addImmediateCallback(this, updateAxisLabels, true);
				// END TEMPORARY SOLUTION
				
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.value = true;
				visualization.enableZoomAndPan.value = false;
				visualization.plotManager.enableAutoZoomToExtent.value = false;
				visualization.plotManager.enableAutoZoomToExtent.lock();
				visualization.plotManager.zoomBounds.setDataBounds(new Bounds2D(-180,-180,180,180));
				
				visualization.bottomMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(_plotter.dataX); })
				visualization.leftMarginClickCallbacks.addImmediateCallback(this, function():void { AttributeSelectorPanel.open(_plotter.dataY); })
				
				visualization.enableAutoZoomXToNiceNumbers.value = true;
				visualization.enableAutoZoomYToNiceNumbers.value = true;
				
				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				registerLinkableChild(this,histogramColumn);
				
			}
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				visualization.plotManager.marginBottom.value = "80";
				visualization.plotManager.marginTop.value    = "10";
				visualization.plotManager.marginLeft.value   = "80";
				visualization.plotManager.marginRight.value  = "10";
			}
			
			override public function initSelectableAttributes(input:Array):void
			{
				ColumnUtils.initSelectableAttributes([_plotter.dataX, _plotter.dataY, colorColumn], input);
			}
			
			override public function getSelectableAttributeNames():Array
			{
				return ["X", "Y", "Color", "Size", "Histogram Column"];
			}
			override public function getSelectableAttributes():Array
			{
				return [_plotter.dataX, _plotter.dataY, _plotter.fill.color, _plotter.sizeBy, histogramColumn];
			}
			private function invalidateAxes():void
			{
				handlePanelTitleChange();
			}
			
			[Bindable]
			private var rpToolTitle:String ="";
			
			override public function get defaultPanelTitle():String
			{
				return lang("Ramachandran Plot {0}", rpToolTitle);
			}
			
			private function updateAxisLabels():void
			{
				visualization.bottomMarginColumn = _plotter.dataX;
				visualization.leftMarginColumn = _plotter.dataY;
				
				if (_plotter == null)
					title = lang("Ramachandran Plot");
				xAxisPlotter.setSideAxisName(ColumnUtils.getTitle(_plotter.dataX),
					0,   
					0, visualization.plotManager.marginBottomNumber.value - 3, 
					BitmapText.VERTICAL_ALIGN_BOTTOM);
				
				yAxisPlotter.setSideAxisName(ColumnUtils.getTitle(_plotter.dataY), 
					-90, 
					-visualization.plotManager.marginLeftNumber.value, 0, 
					BitmapText.VERTICAL_ALIGN_TOP);
			}
			
			public function get colorColumn():DynamicColumn
			{
				return Weave.defaultColorDataColumn.internalDynamicColumn;
			}
			
			private function popupHistogram():void
			{
				var histo:HistogramTool = Weave.root.requestObject(null, HistogramTool, false);
				histo.width = 300;
				histo.title = lang("{0}(SubSelection)", histo.title);
				copySessionState(histogramColumn, ColumnUtils.hack_findInternalDynamicColumn(histo.plotter.binnedColumn));
				var sbd:SimpleBinningDefinition = histo.plotter.binnedColumn.binningDefinition.internalObject as SimpleBinningDefinition;
				sbd.numberOfBins.value = 20;
				// TEMPORARY SOLUTION until we start using VisToolGroup
				var keySet:KeySet = histo.visualization.getMainPlotter().filteredKeySet.keyFilter.requestLocalObject(KeySet, false)
				//var keySet:KeySet = histo.visualization.getMainLayerSettings().subsetFilter.requestLocalObject(KeySet, false)
				copySessionState(Weave.defaultSelectionKeySet, keySet);
			}
			public const histogramColumn:DynamicColumn = newLinkableChild(this, DynamicColumn);
			
			private var Rservice:WeaveRServlet = new WeaveRServlet(Weave.properties.rServiceURL.value);
			private var _sessionFileLoader:FileReference = null;
			private var _defaultsFilename:String = null;
			
			
			protected function loadXMLtoUI(loadedXML:XML):void{
				
				var result:Array = new Array();
				//Columns from Joined columns Method
				var joinedColumnKeys:Array = new Array();
				var joinedColumns:Array = new Array();
				//Columns from ColumnListComponent 
				
				var attributeColumns:Array = new Array();
				//Use as Attribute column as joinColumns takes mebers of IAttributeColumn
				
				attributeColumns.push(_plotter.dataX);
				attributeColumns.push(_plotter.dataY);
				
				//joinColumns Called only When columns are added to ColumnListComponent
				
				result = joinColumns(attributeColumns);
				joinedColumnKeys = result[0];
				joinedColumns = result[1];
				
				
				//Values need to assign for Column names in R
				var inputValues:Array = joinedColumns;
				//Names for Column that need to be used in R
				var inputNames:Array =(String(loadedXML.columnNames)).split(",");
				//Script for R input
				var Rstring:String = loadedXML.inputScript;
				// "\r" - replaced by "/n" in all occurance
				while(Rstring.search("\r") > 0){
					Rstring = Rstring.replace("\r","\n");
				}
				var script:String = Rstring;
				
				//Script to get output from R
				var RscriptOutput:String = loadedXML.outputScript ;
				var outputNames:Array;
				if(RscriptOutput != ""){
					outputNames = RscriptOutput.split("\r");
				}
					//to avoid null reference
				else{
					outputNames = new Array();
				}
				
				//Query is created from runScript with same signature from Jave side
				var query:AsyncToken = Rservice.runScript(null,inputNames, inputValues, outputNames, script,"",false,false,false);
				//Keys are passed as token 
				addAsyncResponder(query, handleRunScriptResult, handleRunScriptFault, [joinedColumnKeys,query.operation]);  
			}
			
			private function handleRunScriptResult(event:ResultEvent, token:Object = null):void
			{	
				
				var Robj:Object = new Object();
				Robj = event.result;
				
				var RresultArray:Array = new Array();
				//collecting Objects of type RResult(Should Match result object from Java side)
				for(var i:int = 0; i<(event.result).length; i++){
					var rResult:RResult = new RResult(Robj[i]);
					RresultArray.push(rResult);				
				}
				
				
				//To make availabe for Weave -Mapping with key returned from Token
				var keys:Array = token[0];
				
				//Objects "(object{name: , value:}" are mapped whose value length that equals Keys length
				for(var p:int = 0;p < RresultArray.length; p++){
					if((RresultArray[p].value).length == keys.length){
						/* var table:Array = [];
						for (var k:int = 0; k < keys.length; k++){						
						table.push([ keys[k], Robj[p].value[k] ]);
						} */
						//testColumn are named after respective Objects Name (i.e) object{name: , value:}
						var testColumn:StringColumn = Weave.root.requestObject(RresultArray[p].name, StringColumn, false);
						//testColumn.numericMode.value = false;
						var keyVec:Vector.<IQualifiedKey> = Vector.<IQualifiedKey>(keys);
						var dataVec:Vector.<String> = Vector.<String>(Robj[p].value);
						testColumn.setRecords(keyVec, dataVec);
						//testColumn.csvData.value = WeaveAPI.CSVParser.createCSV(table);						
					}					
				}
			}
			
			private function handleRunScriptFault(event:FaultEvent, token:Object = null):void
			{
				trace("fault on "+token, event.message);
			}
			
			
			/**
			 * @return A multi-dimensional Array like [keys, [data1, data2, ...]]
			 */
			private function joinColumns(columns:Array):Array
			{
				var selection:KeySet = Weave.defaultSelectionKeySet;
				var keys:Array = selection.keys.length > 0 ? selection.keys : null;
				var result:Array = ColumnUtils.joinColumns(columns, Number, false, keys);
				return [result.shift(), result];
			}
			
			private var pdbService:WeavePDBServlet = new WeavePDBServlet(Weave.properties.pdbServiceURL.value);
			
			protected function sendPDBidBtn_clickHandler(event:MouseEvent):void
			{
				var pdbID:String =  PDBid.text;
				var query:AsyncToken = pdbService.getPhiPsiValues(pdbID);				
				addAsyncResponder(query, handleGetPhiPsiValuesResult, handleGetPhiPsiValuesFault);	
				//sendPDBidBtn.enabled = false;
				//PDBid.enabled = false;
			}
			[Bindable]
			private var sequence:String = "";
			
			private var pdbDataSourceKeyType:String = "";
			private function handleGetPhiPsiValuesResult(event:ResultEvent, token:Object = null):void
			{
				rpToolTitle = PDBid.text;
				var residueObj:ArrayCollection = event.result as ArrayCollection;
				//temp solution for wrong PDB entry (need to pass the same error)
				if(!residueObj){
					Alert.show(lang("{0} doesn't exist.", PDBid.text.toUpperCase()),lang("PDB ID Error"));
					return;
				}
				//var sequenceArray:Array = residueObj["resName"];				
				var residueArray:Array = residueObj.source;
				var residueHeaders:Array = WeaveAPI.CSVParser.getRecordFieldNames(residueArray);
				var residueData:Array = WeaveAPI.CSVParser.convertRecordsToRows(residueArray);
				
				var seq:String = "";
				for(var i:int = 1 ; i<residueData.length;i++){
					var res:String = residueData[i][7] + " ";
					seq = seq + res;
				}
				sequence = seq;
				var uniquePDBname:String = "PDBDataSource-" +PDBid.text;
				var uniqueName:String = Weave.root.generateUniqueName(uniquePDBname);
				var csvDataSource:CSVDataSource = Weave.root.requestObject(uniqueName,CSVDataSource, false);
				csvDataSource.csvData.setSessionState(residueData);
				csvDataSource.keyType.value = uniqueName;
				pdbDataSourceKeyType = uniqueName;
				assignXYColumnsFromSource(csvDataSource);	
				
			}
			
			private function assignXYColumnsFromSource(source:CSVDataSource):void
			{
				//adding phi and psi column to plotter x and y columns
				source.putColumn(5, _plotter.dataX);
				source.putColumn(6, _plotter.dataY);
				//adding resName to histogram column
				source.putColumn(7, histogramColumn);
			}
			
			private function handleGetPhiPsiValuesFault(event:FaultEvent, token:Object = null):void
			{
				trace(["fault", token, event.message].join('\n'));
				reportError(event);
			}
			
			protected function motifSearchBtn_clickHandler(event:MouseEvent):void
			{
				var textToSearch:String = motif.text;
				var textToReplace:String ="";
				for(var j:int =0; j < textToSearch.length; j++){
					textToReplace =  textToReplace + "A";
				}
				
				var seqText:String = sequence;
				
				var txtHighlight:TextRange = new TextRange(sequenceTA);
				txtHighlight.color = 0x000000;
				var keysFromSeq:Array = [];
				while(seqText.search(textToSearch) > 0)
				{
					var startIndex:int = seqText.search(textToSearch);
					var numOfResInTxtToSearch:int = Math.ceil(textToSearch.length/4);
					for(var k:int = 0 ; k < numOfResInTxtToSearch;k++){
						keysFromSeq.push(startIndex + 4 * k);
					}
					
					var endIndex:int = startIndex + textToSearch.length;
					seqText = seqText.replace(textToSearch,textToReplace);
					txtHighlight.beginIndex = startIndex;
					txtHighlight.endIndex =  endIndex;
					txtHighlight.color = 0xFF0000;
				}
				
				
				for(var keyIndex:int=0;keyIndex < keysFromSeq.length;keyIndex++){
					var temp:int = keysFromSeq[keyIndex]/4 + 1;
					keysFromSeq[keyIndex] = String(temp);							
				}
				
				Weave.defaultSelectionKeySet.replaceKeys(WeaveAPI.QKeyManager.getQKeys(pdbDataSourceKeyType, keysFromSeq));
			}
			
			protected function sequenceTA_mouseUpHandler(event:MouseEvent):void
			{
				if(sequenceTA.text ==""){
					return;
				}
				var txtHighlight:TextRange = new TextRange(sequenceTA);
				txtHighlight.color = 0x000000;
				
				var startIndex:int = sequenceTA.selectionBeginIndex;
				var endIndex:int = sequenceTA.selectionEndIndex;
				txtHighlight.beginIndex = startIndex;
				txtHighlight.endIndex =  endIndex;
				if(startIndex == endIndex){
					return;
				}
				txtHighlight.color = 0x00FF00;
				
				var selectedTextLength:int = endIndex - startIndex;
				var numOfResInSelectedText:int = Math.ceil(selectedTextLength/4);
				var keysFromSelection:Array = [];
				for(var k:int = 0 ; k < numOfResInSelectedText; k++){
					keysFromSelection.push(startIndex + 4 * k);
				}
				
				for(var keyIndex:int=0;keyIndex < keysFromSelection.length;keyIndex++){
					var temp:int = keysFromSelection[keyIndex]/4 + 1;
					keysFromSelection[keyIndex] = String(temp);							
				}
				Weave.defaultSelectionKeySet.replaceKeys(WeaveAPI.QKeyManager.getQKeys(pdbDataSourceKeyType, keysFromSelection));
			}
			
		]]>
	</mx:Script>
	
	<mx:Button  label="{lang('Histogram')}" click="popupHistogram()" bottom="10" right="5"/>
	
	<ui:ControlPanel>
		<mx:Panel id="RamachandranControls" 
				  label="{lang('Ramachandran Plot Controls')}" 
				  headerHeight="2"
				  borderColor="0x000000" 
				  backgroundColor="0xCCCCCC" 
				  backgroundAlpha="0.0" 
				  borderThickness="0.0" 
				  width="100%" 
				  borderAlpha="0.2" 
				  borderStyle="none">
			<mx:HBox right="35" bottom="5">
				<mx:TextInput id="PDBid"/>
				<mx:Button id="sendPDBidBtn" label="{lang('Send')}" click="sendPDBidBtn_clickHandler(event)"/>
				
			</mx:HBox>
			<mx:TextArea editable="false" id="sequenceTA" text="{sequence}" width="100%" height="80%" mouseUp="sequenceTA_mouseUpHandler(event)"/>
			<mx:HBox width="100%" height="20%">
				<mx:TextInput id="motif" width="80%" height="100%"/>
				<mx:Button id="motifSearchBtn" label="Go" click="motifSearchBtn_clickHandler(event)"/>
			</mx:HBox>
			
			
		</mx:Panel>
		<mx:Panel id="VizControlsPanel" 
				  label="{lang('Visualization Controls')}" 
				  headerHeight="2"
				  borderColor="0x000000" 
				  backgroundColor="0xCCCCCC" 
				  backgroundAlpha="0.0" 
				  borderThickness="0.0" 
				  width="100%" 
				  borderAlpha="0.2" 
				  borderStyle="none">
			<mx:VBox width="100%" 
					 verticalGap="0">
				<mx:VBox width="100%" 
						 id="scatterplotControls">
					<editors:ScatterPlotPlotterEditor id="plotEditor" width="100%" creationComplete="plotEditor.setTarget(_plotter);"/>
					<ui:DynamicColumnComponent label="{lang('Histogram Column')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = histogramColumn"/>
				</mx:VBox>
				<mx:HBox width="100%">
				</mx:HBox>
			</mx:VBox>
		</mx:Panel>
		
	</ui:ControlPanel>
</SimpleVisTool>
