<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
		 title="Parallel Coordinates"
		 implements="weave.api.ui.IVisTool_Basic"
	     layout="absolute" xmlns:settings="weave.ui.settings.*">
	<mx:Script>
		<![CDATA[
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableBoolean;
			import weave.utils.ColumnUtils;
			import weave.visualization.layers.PlotManager;
			import weave.visualization.plotters.SimpleParallelCoordinatesAxesPlotter;
			import weave.visualization.plotters.SimpleParallelCoordinatesPlotter;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, ParallelCoordinatesTool, "Parallel Coordinates");
			
			internal var plotter:SimpleParallelCoordinatesPlotter;
			internal var axesPlotter:SimpleParallelCoordinatesAxesPlotter;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				panelTitle.value = "Parallel Coordinates";
				
				var pm:PlotManager = visualization.plotManager;
				pm.marginLeft.value = '0';
				pm.marginRight.value = '0';
				pm.marginTop.value = '40';
				pm.marginBottom.value = '70';
				pm.includeNonSelectableLayersInAutoZoom.value = true;
				visualization.enableZoomAndPan.value = false;
				
				plotter = initializePlotters(SimpleParallelCoordinatesPlotter, false);
				const AXES:String = 'axes';
				axesPlotter = pm.plotters.requestObject(AXES, SimpleParallelCoordinatesAxesPlotter, true);
				pm.getLayerSettings(AXES).selectable.value = false;
				
				WeaveAPI.StageUtils.callLater(this, initPlotterPath);
				visualization.addEventListener(MouseEvent.MOUSE_MOVE, updateProbeAttrs);
			}
			
			private function initPlotterPath():void
			{
				axesPlotter.mainPlotter.delayCallbacks();
				axesPlotter.mainPlotter.target = plotter;
				axesPlotter.mainPlotter.lock();
				axesPlotter.mainPlotter.resumeCallbacks();
			}
			
			override public function initSelectableAttributes(input:Array):void
			{
				const MAX_DEFAULT_COLUMNS:int = 10;
				input.slice(0, MAX_DEFAULT_COLUMNS)
					.forEach(function(item:Object, i:int, a:Array):void {
						ColumnUtils.initSelectableAttribute(plotter.columns, item, i == 0);
					});
			}
			
			public const includeColorAttributeInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true), updateProbeAttrs, true);
			public const includeAllAttributesInProbe:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateProbeAttrs, true);
			
			private function updateProbeAttrs(event:MouseEvent = null):void
			{
				if (event && includeAllAttributesInProbe.value)
					return;
				
				var point:Point = visualization.getMouseDataCoordinates();
				visualization.additionalProbeColumns = [
					includeColorAttributeInProbe.value
						? ColumnUtils.hack_findInternalDynamicColumn(plotter.lineStyle.color)
						: null,
					includeAllAttributesInProbe.value
						? plotter.columns
						: plotter.columns.getObjects()[Math.round(point.x)]
				];
			}
		]]>
	</mx:Script>
	<editorFactory>
		<mx:Component>
			<ui:ControlPanel>
				<mx:Script>
					<![CDATA[
						import mx.core.INavigatorContent;
						import mx.core.UIComponent;
						
						import weave.editors.DynamicEditor;
						import weave.editors.managers.LayerListComponent;
						
						override protected function createChildren():void
						{
							super.createChildren();
							
							var plotterEditor:INavigatorContent = DynamicEditor.createComponent(outerDocument.plotter, "Lines", false) as INavigatorContent;
							var axesEditor:INavigatorContent = DynamicEditor.createComponent(outerDocument.axesPlotter, "Axes", false) as INavigatorContent;
							this.tabNavigator.addChildAt(plotterEditor as UIComponent, 0);
							this.tabNavigator.addChildAt(axesEditor as UIComponent, 1);
							this.tabNavigator.selectedIndex = 0;
						}
					]]>
				</mx:Script>
			</ui:ControlPanel>
		</mx:Component>
	</editorFactory>
</SimpleVisTool>
