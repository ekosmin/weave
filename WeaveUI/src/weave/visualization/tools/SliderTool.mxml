<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<ui:DraggablePanel
	xmlns="weave.visualization.tools.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	xmlns:settings="weave.ui.settings.*"
	xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
	verticalScrollPolicy="off"
	title="{lang('Slider Tool')}"
	implements="weave.api.ui.IVisTool" xmlns:editors="weave.editors.*"
	>
	<ui:CustomViewStack id="viewStack" width="100%" height="100%" minHeight="0">
		<mx:HBox width="100%" label="{lang('Horizontal slider')}" minWidth="50">
			<mx:VBox id="playControls" horizontalAlign="center" paddingTop="4">
				<mx:Button
					id="playButton" label="&gt;" alpha="1.0"
					fillAlphas="[1.0, 1.0, 1.0, 1.0]"
					click="playButtonPushed()"/>
				<mx:HSlider
					id="speedSlider"
					width="50" height="0"
					liveDragging="true"
					dataTipFormatFunction="{getDelayLabel}"
					change="speedSliderChange();"/>
			</mx:VBox>
			<mx:HSlider 
				id="dimensionSlider"
				width="100%" minWidth="50"
				dataTipFormatFunction="formatDataTip"
				snapInterval="1"
				tickInterval="1"
				liveDragging="true"
				/>
		</mx:HBox>
		<mx:Box width="100%" height="100%" label="{lang('List')}" verticalScrollPolicy="off">
			<mx:List id="dimensionList"
				width="100%" height="100%" minHeight="0"
				selectedIndex="{dimensionSlider.value}"
				change="if (UIUtils.hasFocus(dimensionList)) currentSliderPosition.value = dimensionList.selectedIndex;"/>
		</mx:Box>
		<mx:Box width="100%" height="100%" label="{lang('Combo box')}">
			<ui:CustomComboBox id="dimensionCombo"
				width="100%" height="100%" minHeight="0"
				selectedIndex="{dimensionSlider.value}"
				change="if (UIUtils.hasFocus(dimensionCombo)) currentSliderPosition.value = dimensionCombo.selectedIndex;"/>
		</mx:Box>
	</ui:CustomViewStack>
<mx:Script>
<![CDATA[
	import mx.binding.utils.BindingUtils;
	import mx.collections.ArrayCollection;
	import mx.collections.ICollectionView;
	import mx.core.Container;
	
	import spark.collections.Sort;
	
	import weave.Weave;
	import weave.api.data.ColumnMetadata;
	import weave.api.getCallbackCollection;
	import weave.api.linkBindableProperty;
	import weave.api.linkableObjectIsBusy;
	import weave.api.newLinkableChild;
	import weave.api.registerLinkableChild;
	import weave.api.ui.IVisTool;
	import weave.compiler.StandardLib;
	import weave.core.LinkableBoolean;
	import weave.core.LinkableNumber;
	import weave.core.LinkableString;
	import weave.core.LinkableVariable;
	import weave.core.UIUtils;
	import weave.data.AttributeColumns.ReferencedColumn;
	import weave.data.AttributeColumns.SecondaryKeyNumColumn;
	import weave.utils.AsyncSort;
	import weave.utils.LinkableTextFormat;
	import weave.utils.VectorUtils;

	//class data
	
	
	//@TODO session this so that the admin can specify a different maximum delay
	private static const MAX_TIMER_DELAY:Number = 2500;
	public static const refCols:ArrayCollection = new ArrayCollection();
	internal static const layoutChoices:Array = ['HSlider', 'List', 'Combo']
	
	public const timerDelay:LinkableNumber = newLinkableChild(this, LinkableNumber);
	
	public const filterValues:LinkableVariable = registerLinkableChild(this, new LinkableVariable(null, verifyStringArray, []), handleLabelChange, true);
	public const currentSliderPosition:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0), handleSliderChange, true);
	public const maxLabelCount:LinkableNumber = registerLinkableChild(this, new LinkableNumber(10, isFinite), handleLabelChange);
	public const linkGlobalColumns:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
	public const linkLineCharts:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
	public const unlinkedTools:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, verifyStringArray, []));
	public const layoutMode:LinkableString = registerLinkableChild(this, new LinkableString('HSlider', verifyLayout));
	public const showPlayButton:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
	
	private function verifyLayout(value:String):Boolean { return layoutChoices.indexOf(value) >= 0; }
	private function verifyStringArray(value:Object):Boolean
	{
		if (value is String)
		{
			filterValues.setSessionState((value as String).split(','));
			return false;
		}
		var array:Array = value as Array;
		return (array && !array.length) || StandardLib.getArrayType(array) == String;
	}
	
	private var _timer:Timer;
	[Bindable] internal var showLinkControls:Boolean = false;
	
	internal function getFilterValues():Array { return filterValues.getSessionState() as Array; }
	internal function getUnlinkedTools():Array { return unlinkedTools.getSessionState() as Array; }
	
	//constructor
	
	//This class is the base class for Slider visualization tools
	override protected function inConstructor():void
	{
		super.inConstructor();
		this.height = 40;
		// wait 1 frame before initializing labels because other tools may not be initialized yet
		WeaveAPI.StageUtils.callLater(this, initializeLabels);
		WeaveAPI.StageUtils.callLater(this, addCallbacks);

		getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateLabelProperties, true);
	}

	/**
	 * This function gets called after children have been created
	 */ 
	override protected function childrenCreated():void
	{
		super.childrenCreated();
		
		this.height = 40;
		
		if (! timerDelay.value)
			timerDelay.value = MAX_TIMER_DELAY;
		speedSlider.minimum = 0;
		speedSlider.maximum = 2000;
		speedSlider.snapInterval = 250;
		speedSlider.toolTip = lang("Change the speed of the slider");
		timerDelay.addGroupedCallback(this, function():void {
			speedSlider.value = MAX_TIMER_DELAY - timerDelay.value;
		}, true);
		//is there a timer that is still running? 
		if ((playButton != null) && (_timer != null))
		{
			playButton.toolTip = lang("Automatically cycle through the times.");
			if (_timer.running)
			{
				playButton.label = "||";
				playButton.toolTip = lang("Stop");
			}
			else
			{
				playButton.label = ">";
				playButton.toolTip = lang("Play")
			}
		}
		layoutMode.addImmediateCallback(this, function():void {
			viewStack.selectedIndex = layoutChoices.indexOf(layoutMode.value);
		}, true);
		UIUtils.linkVisibility(this, showPlayButton, playControls);
	}
	
	/**
	 * dispose - called when the tool is deleted from the desktop
	 * */
	override public function dispose():void
	{
		if (_timer != null)
		{
			if (_timer.running) _timer.stop();
			_timer.removeEventListener(TimerEvent.TIMER, moveSlider);
		}
		super.dispose();
	}

	////abstract functions that must be overridden by subclasses of this class

	/**
	 * This function finds a list of attribute tags in the same attribute hierarchy
	 * that have the same @dataTable and @name attributes, then returns a list of
	 * the values that will go into the slider.
	 * @param ref A reference to an attribute tag in an AttributeHierarchy.
	 * @return An Array of values from the referenced column.
	 */
	protected function getValuesFromColHier(ref:ReferencedColumn):Array 
	{
		return null;
	}

	public function handleLabelChange():void
	{
		//@TODO have values associated with the labels so that the labels can be
		//   changed and the values are still passed into the column request
		if (!parent)
			return callLater(handleLabelChange);
		
		var values:Array = getFilterValues();
		if (values.length <= maxLabelCount.value)
		{
			dimensionSlider.labels = values;
		}
		else
		{
			dimensionSlider.labels = [];
			
			var interval:int = Math.ceil(values.length / maxLabelCount.value);
			for (var i:int = 0; i < values.length; ++i)
			{
				if (i % interval == 0)
					dimensionSlider.labels.push(values[i]);
				else
					dimensionSlider.labels.push('');
			}			
		}
		
		dimensionSlider.minimum = 0;
		dimensionSlider.maximum = values.length - 1;
		
		//set tick interval 
		dimensionSlider.tickInterval = 1;
		
		dimensionList.dataProvider = values;
		dimensionCombo.dataProvider = values;
	}	

	/** 
	 * This method is automatically called when currentSliderPosition
	 *  is changed.  Here we update all the visualization tools to 
	 *  the new time.  
	 * **/
	public function handleSliderChange():void { }
	
	/**
	 * This is specified in the HSlider - called to get the tooltip that appears when 
	 * the user probes over the slider.  Item is the index of the value that the user is hovering 
	 * over.  
	 **/
	private function formatDataTip(index:int):String
	{
		return getFilterValues()[index];
	}
	
	public function addCallbacks():void { }

	//class methods that are common to all SliderTools
			
	public function get sliderValue():String
	{
		return getFilterValues()[dimensionSlider.value];
	}
	
	private function initializeLabels(callingLater:Boolean = false):void
	{
		//we'll run through the dimensions to set the defaults
		//intialize the labels (a list of years concatenated, separated by commas)
		if (!getFilterValues().length)
		{
			getValuesFromCurrentDimensions();
			if (!getFilterValues().length)
			{
				if (!callingLater || WeaveAPI.ProgressIndicator.getTaskCount() > 0)
				{
					callLater(initializeLabels, [true]);
					return;
				}
			}
		}
		updateLabelProperties();
		linkBindableProperty(currentSliderPosition, dimensionSlider, 'value');
		handleSliderChange();
	}

	
	private function updateLabelProperties():void
	{
		if (!parent)
			return callLater(updateLabelProperties);
		
		LinkableTextFormat.defaultTextFormat.copyToStyle(dimensionSlider);
		LinkableTextFormat.defaultTextFormat.copyToStyle(dimensionList);
		LinkableTextFormat.defaultTextFormat.copyToStyle(dimensionCombo);
		dimensionSlider.invalidateProperties();
	}

	/**
	 * getTimesFromCurrentDimensions
	 * The labels for the time slider come from the dimensions 
	 *  in the visualization tools that are on the desktop.
	 *  Here we get the list of times and initialize the slider labels. 
	 *  @TODO - allow the user to link the time slider to specific tools,
	 *     the current implementation links the timeslider to all 
	 *     the tools
	 * **/
	public function getValuesFromCurrentDimensions():void
	{
		//loop through the columns, getting the possible time values for each
		//step one - just get first one
		var descendants:Array = WeaveAPI.SessionManager.getLinkableDescendants(Weave.root, ReferencedColumn);
		var len:int = descendants.length;
		var newValues:Array = [];
		var lookingForLabels:Boolean = true;
		var countOfYearsFound:Number = 0;
		for (var i:int = 0; i < len; i++)
		{
			var rc:ReferencedColumn = descendants[i] as ReferencedColumn;
			var years:Array = getValuesFromColHier(rc);
			//for a default, we choose the dimension with the most values
			// the user/admin can change which dimension is used, but this is a best guess at a first default
			if (years.length > countOfYearsFound)
			{
				newValues = years;
				countOfYearsFound = years.length;
			}
		}
		filterValues.setSessionState(newValues);
		handleSliderChange();
	}
	
	/**
	 * This event is triggered when the user changes the dimension in the attrListCombo box
	 * */
	internal function dimensionChange(index:int = 0):void
	{
		if (index >= refCols.length)
			return;
		filterValues.setSessionState(getValuesFromColHier(refCols.getItemAt(index) as ReferencedColumn));
	}

	
	protected function addToListOfDims(rc:ReferencedColumn):void
	{
		// stop if already in list
		for (var i:int = 0; i < refCols.length; i++)
			if ((refCols.getItemAt(i) as ReferencedColumn).getInternalColumn() == rc.getInternalColumn())
				return;
		
		// create sort function if not created yet
		if (!refCols.sort)
		{
			refCols.sort = new Sort();
			refCols.sort.compareFunction = compareRefs;
			function compareRefs(a:ReferencedColumn, b:ReferencedColumn):int
			{
				return AsyncSort.compareCaseInsensitive(
					a.getMetadata(ColumnMetadata.TITLE),
					b.getMetadata(ColumnMetadata.TITLE)
				);
			}
		}
		
		// add to list
		refCols.addItem(rc);
		if (!getFilterValues().length)
			dimensionChange();
	}
	
	internal function getRefColLabel(refCol:ReferencedColumn):String
	{
		return refCol.getMetadata(ColumnMetadata.TITLE);
	}
	
	/**
	 * playButtonPushed - There is a play button (above see id="playButton") that the user can push
	 *   to automatically cycle through the values.
	 *   This function is called when that button is pushed.  
	 * */
	public function playButtonPushed():void
	{
		if ((_timer == null) || (! _timer.hasEventListener(TimerEvent.TIMER)))
		{
			_timer = new Timer(timerDelay.value);
			_timer.addEventListener(TimerEvent.TIMER, moveSlider);
		}
		
		if (_timer.running)
		{
			if (playButton != null) 
			{
				playButton.label = ">";
				playButton.toolTip = lang("Play");				
			}
			_timer.stop();
		}
		else
		{
			if (playButton != null) 
			{
				playButton.label = "||";
				playButton.toolTip = lang("Stop");				
			}
			_timer.start();
		}
	}
	private function getDelayLabel(value:Number):String
	{
		return lang("{0} ms delay", (MAX_TIMER_DELAY - value).toFixed(0)); 
	}
	
	/**
	 * speedSliderChange - this is called when user moves the speed slider
	 * */
	public function speedSliderChange():void
	{
		timerDelay.value = MAX_TIMER_DELAY - speedSlider.value;
		if (_timer && (timerDelay.value))
			_timer.delay = timerDelay.value;
	}

	/**
	 * moveSlider - This method is called everytime the timer triggers
	 * it.  It forces the slider to move.  
	 * **/
	private function moveSlider(evt:TimerEvent):void
	{
		if (linkableObjectIsBusy(WeaveAPI.globalHashMap))
			return;
		
		if (currentSliderPosition.value < dimensionSlider.maximum)
			currentSliderPosition.value++;
		else
			currentSliderPosition.value = dimensionSlider.minimum;
	}
	
	[Bindable] internal var checkBox_useGlobalMinMax_show:Boolean = false;
	
	[Deprecated(replacement="filterValues")] public function get labelsLinkableString():LinkableVariable { return filterValues; }
]]>
</mx:Script>
	<ui:editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox width="100%" id="timesliderControls"
				label="{lang('Slider controls')}">
			<ui:Indent label="{lang('Layout')}">
				<ui:CustomComboBox id="layoutCombo" dataProvider="{SliderTool.layoutChoices}">
					<ui:labelFunction>{
						function(item:String):String
						{
							return Container(outerDocument.viewStack.getChildAt(SliderTool.layoutChoices.indexOf(item))).label;
						}
					}</ui:labelFunction>
				</ui:CustomComboBox>
				<ui:CustomCheckBox id="togglePlayControls" label="{lang('Show play button')}"
								   visible="{layoutCombo.selectedItem == 'HSlider'}"
								   includeInLayout="{layoutCombo.selectedItem == 'HSlider'}"/>
			</ui:Indent>
			<ui:Indent label="{lang('Time slider labels:')}">
				<mx:TextInput id="labelsInput" 
							  width="90%"
							  />
				<mx:Button label="Reset" click="outerDocument.getValuesFromCurrentDimensions()"/>
			</ui:Indent>
			<ui:Indent label="{lang('Max labels shown')}">
				<mx:NumericStepper minimum="0" maximum="100" stepSize="1" creationComplete="linkBindableProperty(outerDocument.maxLabelCount, event.target, 'value');"/>
			</ui:Indent>
			<mx:Label id="dimsLabel" text="{lang('Replace slider labels with values from a dimension with year values:')}" />
			<ui:CustomComboBox id="attrListCombo" dataProvider="{SliderTool.refCols}" labelFunction="{outerDocument.getRefColLabel}" change="outerDocument.dimensionChange(attrListCombo.selectedIndex)"/>
			<mx:CheckBox id="checkBox_useGlobalMinMax"
						 visible="{outerDocument.checkBox_useGlobalMinMax_show}"
						 includeInLayout="{outerDocument.checkBox_useGlobalMinMax_show}"
						 label="{lang('Use global min,max values')}"
						 creationComplete="linkBindableProperty(SecondaryKeyNumColumn.useGlobalMinMaxValues, event.target, 'selected');"/>
			<mx:VBox id="linkControls" width="100%" visible="{outerDocument.showLinkControls}" includeInLayout="{outerDocument.showLinkControls}">
				<ui:CustomCheckBox label="{lang('Link global columns')}" creationComplete="linkBindableProperty(outerDocument.linkGlobalColumns, event.target, 'selected')"/>
				<ui:CustomCheckBox label="{lang('Allow linking to Line Charts')}" creationComplete="linkBindableProperty(outerDocument.linkLineCharts, event.target, 'selected')"/>
				<mx:Label text="{lang('Linked visualization tools')}"/>
				<ui:Indent>
					<ui:CheckBoxList id="toolCheckboxList" defaultSelectedState="true" paddingTop="0" paddingBottom="0">
						<ui:creationComplete>
							<![CDATA[
								toolCheckboxList.labelFunction = function(name:String):String {
									var dp:DraggablePanel = WeaveAPI.globalHashMap.getObject(name) as DraggablePanel;
									return dp ? dp.title : name;
								};
								outerDocument.linkLineCharts.addImmediateCallback(this, updateToolList);
								getCallbackCollection(WeaveAPI.globalHashMap.childListCallbacks).addImmediateCallback(this, updateToolList, true);
								function updateToolList():void {
									toolCheckboxList.dataProvider = WeaveAPI.globalHashMap.getNames(IVisTool).filter(
										function(n:String, i:int, a:Array):Boolean {
											var o:* = WeaveAPI.globalHashMap.getObject(n);
											if (o is SliderTool)
												return false;
											if (o is LineChartTool && !outerDocument.linkLineCharts.value)
												return false;
											return true;
										}
									);
								}
								outerDocument.unlinkedTools.addImmediateCallback(
									this,
									function():void {
										var names:Array = VectorUtils.getArrayFromCollection(toolCheckboxList.dataProvider as ICollectionView);
										toolCheckboxList.selection = names.map(
											function(s:String, i:int, a:Array):Boolean {
												return outerDocument.getUnlinkedTools().indexOf(s) < 0;
											}
										);
									}
								);
								BindingUtils.bindSetter(
									function(selection:Array):void {
										var names:Array = VectorUtils.getArrayFromCollection(toolCheckboxList.dataProvider as ICollectionView);
										var newUnlinkedNames:Array = names.filter(
											function(s:String, i:int, a:Array):Boolean { return !selection[i]; }
										);
										StandardLib.sort(newUnlinkedNames); // sort to avoid superfluous updates
										outerDocument.unlinkedTools.setSessionState(newUnlinkedNames);
									},
									toolCheckboxList,
									'selection'
								);
							]]>
						</ui:creationComplete>
					</ui:CheckBoxList>
				</ui:Indent>
			</mx:VBox>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{outerDocument}"/>
		<mx:Script>
			<![CDATA[
				import mx.binding.utils.BindingUtils;
				import mx.collections.ICollectionView;
				import mx.core.Container;
				
				import weave.api.getCallbackCollection;
				import weave.api.linkBindableProperty;
				import weave.api.ui.IVisTool;
				import weave.compiler.StandardLib;
				import weave.core.UIUtils;
				import weave.data.AttributeColumns.SecondaryKeyNumColumn;
				import weave.utils.VectorUtils;
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					
					linkBindableProperty(outerDocument.showPlayButton, togglePlayControls, 'selected');
					linkBindableProperty(outerDocument.layoutMode, layoutCombo, 'selectedItem');
					
					labelsInput.addEventListener(Event.CHANGE, writeFilterValues);
					labelsInput.addEventListener(FocusEvent.FOCUS_OUT, readFilterValues);
					outerDocument.filterValues.addImmediateCallback(this, readFilterValues, true);
					
					function writeFilterValues(e:Event):void {
						outerDocument.filterValues.setSessionState(WeaveAPI.CSVParser.parseCSVRow(labelsInput.text));
					}
					
					function readFilterValues(..._):void {
						if (!UIUtils.hasFocus(labelsInput))
							labelsInput.text = WeaveAPI.CSVParser.createCSVRow(outerDocument.getFilterValues());
					}
				}
			]]>
		</mx:Script>
	</ui:ControlPanel></mx:Component></ui:editorFactory>

</ui:DraggablePanel>


