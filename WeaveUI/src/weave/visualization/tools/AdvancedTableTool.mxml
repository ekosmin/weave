<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->

<!---
@author skolman
@author kmonico
@author sanbalag
-->
<ui:DraggablePanel xmlns="weave.visualization.tools.*"
				   xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:ui="weave.ui.*" 
				   xmlns:CustomDataGrid="weave.ui.CustomDataGrid.*"
				   layout="absolute" implements="weave.api.ui.IVisTool, weave.api.ui.IInitSelectableAttributes"
				   title="{lang('Advanced Table')}" xmlns:editors="weave.editors.*"
				   >
	<mx:VBox width="100%" height="100%" id="tableArea" verticalGap="0" horizontalScrollPolicy="off">
		<mx:HBox minWidth="0" horizontalGap="0" borderStyle="solid" id="filterControls" width="100%" verticalAlign="middle" horizontalScrollPolicy="off">
			<mx:Spacer width="{dataGrid.width}"/>
		</mx:HBox>
		<CustomDataGrid:CustomDataGridWithFilters
			id="dataGrid"
			dataProvider="{dataProvider}"
			useNoSort="true"
			updateComplete="dataGrid_updateCompleteHandler(event)"
			horizontalScrollPolicy="auto"
			verticalScrollPolicy="auto"
			width="100%" height="100%"
			allowMultipleSelection="true"
			minWidth="0"
			change="handleItemSelection(event)"
			doubleClick="handleItemSelection(event)" doubleClickEnabled="true" 
			headerShift="handleColumnReorder(event)"
			headerRelease="handleHeaderRelease(event)"
			paddingBottom="0" paddingTop="0" paddingLeft="0" paddingRight="0"									   
			fontWeight="normal"
			alternatingItemColors="{[0xffffff, 0xEEF6FF]}"
			rollOverColor="0xDADAFF"
			selectionColor="0xFFAAAA"
			mouseDown="handleMouseDown()"
			click="handleMouseClick()"
			/>
		<mx:HBox id="tooManyRecordsIndicator" visible="false" includeInLayout="false" width="100%" horizontalGap="0">
			<mx:Spacer width="100%"/>
			<mx:Label id="maxRowsLabel"/>
			<ui:HelpComponent>
				The table is currently hiding some of the records.
			</ui:HelpComponent>
		</mx:HBox>
		<mx:HBox id="extraControls" width="100%">
			<mx:Button id="button_moveSelectedToTop" creationComplete="UIUtils.linkVisibility(this, show_moveSelectedToTop, event.target)"
					   label="{lang('Move selected to top')}" click="moveSelectedToTop()"/>
			<mx:Button id="button_clearSelection" creationComplete="UIUtils.linkVisibility(this, show_clearSelection, event.target)"
					   label="{lang('Clear selection')}" click="_selection.clearKeys()"/>
			<mx:Button id="button_editColumns" creationComplete="UIUtils.linkVisibility(this, show_editColumns, event.target)"
					   label="{lang('Edit columns')}" click="AttributeSelectorPanel.open(columns)"/>
			<mx:Button id="button_exportData" creationComplete="UIUtils.linkVisibility(this, show_exportData, event.target)"
					   label="{lang('Export data')}">
				<mx:click>
					try
					{
						new FileReference().save(
							ColumnUtils.generateTableCSV(
								getSelectableAttributes(),
								Weave.defaultSubsetKeyFilter
							),
							"Weave-data-export.csv"
						);
					}
					catch (e:Error)
					{
						reportError(e);
					}
				</mx:click>
			</mx:Button>
		</mx:HBox>
	</mx:VBox>
	
	<mx:Number id="columnWidthScale">1</mx:Number>
	
	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.dataGridClasses.DataGridColumn;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.DataGridEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.ResizeEvent;
			import mx.managers.IFocusManagerComponent;
			
			import weave.Weave;
			import weave.api.core.ILinkableObject;
			import weave.api.data.DataType;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IQualifiedKey;
			import weave.api.detectLinkableObjectChange;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.compiler.StandardLib;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableFunction;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.ColorColumn;
			import weave.data.AttributeColumns.ImageColumn;
			import weave.data.AttributeColumns.KeyColumn;
			import weave.data.KeySets.FilteredKeySet;
			import weave.data.KeySets.KeyFilter;
			import weave.data.KeySets.KeySet;
			import weave.primitives.ColorRamp;
			import weave.ui.AttributeSelectorPanel;
			import weave.ui.CustomDataGrid.DataGridColumnForQKeyWithFilterAndGraphics;
			import weave.ui.CustomDataGrid.IFilterComponent;
			import weave.ui.CustomDataGrid.SearchFilterComponent;
			import weave.ui.CustomDataGrid.SliderFilterComponent;
			import weave.ui.DraggablePanel;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.NumberUtils;
			use namespace mx_internal;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, AdvancedTableTool, "Advanced Table");
			
			public const colorRamp:ColorRamp = newLinkableChild(this, ColorRamp);
			public const columns:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const columnWidths:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(LinkableString));
			public const filterComponents:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IFilterComponent));
			public const enableProbing:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));

			private const dataGridColumns:Dictionary = new Dictionary();
			private var _currentDataGridColumns:Array = [];
			
			public const dataGridHorizontalScrollPosition:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0));
			public const dataGridVerticalScrollPosition:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0));
			
			private var _textFormat:LinkableTextFormat = Weave.properties.visTextFormat;
			private var _selection:KeySet = Weave.defaultSelectionKeySet;
			private var _probe:KeySet = Weave.defaultProbeKeySet;

			public const sortFieldIndex:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0));
			public const sortInDescendingOrder:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			
			public const filteredKeySet:FilteredKeySet = newLinkableChild(this, FilteredKeySet);
			private const dataProvider:ArrayCollection = new ArrayCollection();
			
			public const maxRows:LinkableNumber = registerLinkableChild(this, new LinkableNumber()); // by default, no limit
			public const maxHeaderHeight:LinkableNumber = registerLinkableChild(this, new LinkableNumber(50));
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				filteredKeySet.keyFilter.targetPath = [Weave.DEFAULT_SUBSET_KEYFILTER];
				_probe.addImmediateCallback(this, updateGlobalProbeChangeLater);
				for each (var target:ILinkableObject in [this, _selection, Weave.defaultColorColumn, _textFormat])
					getCallbackCollection(target).addGroupedCallback(this, groupedUpdate, true);
			}
			
			/**
			 * @inheritDoc
			 */
			public function initSelectableAttributes(input:Array):void
			{
				const MAX_DEFAULT_COLUMNS:int = 10;
				input.slice(0, MAX_DEFAULT_COLUMNS)
					.forEach(function(item:Object, i:int, a:Array):void {
						ColumnUtils.initSelectableAttribute(columns, item, i == 0);
					});
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				linkBindableProperty(dataGridHorizontalScrollPosition, dataGrid, 'horizontalScrollPosition', 0, true);
				linkBindableProperty(dataGridVerticalScrollPosition, dataGrid, 'verticalScrollPosition', 0, true);
				
				
				dataGrid.addEventListener(ListEvent.ITEM_ROLL_OVER, handleRollOver);
				dataGrid.addEventListener(MouseEvent.ROLL_OUT, handleRollOut);

				dataGrid.addEventListener(DataGridEvent.COLUMN_STRETCH, handleColumnStretch);
				dataGrid.addEventListener(ResizeEvent.RESIZE, handleToolResize);
				
				columns.childListCallbacks.addImmediateCallback(this, handleColumnListChange,true);
				columnWidths.childListCallbacks.addImmediateCallback(this, assertColumnOrder,true);
				filterComponents.childListCallbacks.addImmediateCallback(this, assertColumnOrder,true);
				
				UIUtils.linkDisplayObjects(filterControls,filterComponents);
			}

			private function assertColumnOrder():void
			{
				var columnOrder:Array = columns.getNames();
				filterComponents.setNameOrder(columnOrder);
				columnWidths.setNameOrder(columnOrder);
			}
			
			/**
			 * This function(event ListeSner) gets called during dataGrid Resize event
			 * handleDataGridHorizontalScroll calls updateColumnWidths, when the dataGridHorizontalScrollPosition.value is Maximum
			 * handleDataGridHorizontalScroll is called to update FilterComponents Position
			 */			
			private function handleToolResize(event:Event = null):void
			{
				updateColumnWidths();
				if (dataGridHorizontalScrollPosition.value > 0 && showFilters.value)
				{
					handleDataGridHorizontalScroll();
				}
			}
			
			private function handleRollOver(event:ListEvent):void // Probe
			{
				if (enableProbing.value == false)
					return;

				var index:int = event.rowIndex;
				var obj:Object = (dataGrid.dataProvider as ArrayCollection).getItemAt( index );
				var key:IQualifiedKey = obj as IQualifiedKey;

				_probe.replaceKeys([key]);
			}
			private function handleRollOut(event:MouseEvent):void // Unprobe
			{
				if (enableProbing.value == false)
					return;
				
				_probe.clearKeys();
			}
			
			private function groupedUpdate():void
			{
				if (!parent) 
					return;
				
				var columnsChanged:Boolean = detectLinkableObjectChange(groupedUpdate, columns);
				var keySetChanged:Boolean = detectLinkableObjectChange(groupedUpdate, filteredKeySet);
				
				if (detectLinkableObjectChange(groupedUpdate, sortFieldIndex, sortInDescendingOrder) || columnsChanged || keySetChanged)
				{
					var attrCols:Array = columns.getObjects();
					var sortDirections:Array = new Array(attrCols.length);
					sortDirections[sortFieldIndex.value] = sortInDescendingOrder.value ? -1 : 1;
					filteredKeySet.setColumnKeySources(attrCols, sortDirections);
					
					// since we're changing the key set, we need to reset the cached trigger counter
					detectLinkableObjectChange(groupedUpdate, filteredKeySet);
					
					callLater(sortCallback);
				}
				if (columnsChanged)
				{
					updateDataGridColumns();
					super.updateDisplayList(unscaledWidth, unscaledHeight); // avoids crashing below
				}
				if (detectLinkableObjectChange(groupedUpdate, lockedColumns) || columnsChanged)
				{
					handleLockedColumnChange();
				}
				if (detectLinkableObjectChange(groupedUpdate, maxRows) || columnsChanged || keySetChanged)
				{
					updateKeysColumnsDataProviderAndSelection();
				}
				if (columnsChanged)
				{
					updateBorders();
				}
				if (detectLinkableObjectChange(groupedUpdate, columnWidths, maxHeaderHeight) || columnsChanged)
				{
					updateColumnWidths();
				}
				if (detectLinkableObjectChange(groupedUpdate, showFilters))
				{
					updateFilters();
				}
				if (detectLinkableObjectChange(groupedUpdate, filterComponents) && showFilters.value)
				{
					dataGrid.invalidateFilters();
				}
				if (detectLinkableObjectChange(groupedUpdate, dataGridHorizontalScrollPosition) || columnsChanged)
				{
					handleDataGridHorizontalScroll();
				}
				if (detectLinkableObjectChange(groupedUpdate, dataGridVerticalScrollPosition) || columnsChanged)
				{
					if (dataGrid.verticalScrollPosition != dataGridVerticalScrollPosition.value)
						dataGrid.verticalScrollPosition = dataGridVerticalScrollPosition.value;
				}
				
				if (detectLinkableObjectChange(groupedUpdate, _selection))
				{
					updateGlobalSelectionChange();
					dataGrid.invalidateList();
				}
				
				if (detectLinkableObjectChange(groupedUpdate, _textFormat))
				{
					_textFormat.copyToStyle(dataGrid);
				}
				if (detectLinkableObjectChange(groupedUpdate, backgroundColor1, backgroundColor2, colorRamp, Weave.defaultColorColumn, showColors, cellColorFunction))
				{
					dataGrid.setStyle("alternatingItemColors", [backgroundColor1.value, backgroundColor2.value]);
					extraColorTriggers = 2;
				}
				if (extraColorTriggers)
				{
					extraColorTriggers--;
					callLater(updateColors);
				}
				updateGlobalProbeChangeLater();
			}
			
			private var extraColorTriggers:uint = 2;
			private function updateColors():void
			{
				dataGrid.styleChanged('alternatingItemColors');
			}
			
			override public function get defaultPanelTitle():String
			{
				return lang("Advanced Table");
			}
			
			
			internal function addImageColumn():void
			{
				var imageColumnName:String = columns.generateUniqueName("ImageColumn");
				var imageCol:ImageColumn = columns.requestObject(imageColumnName,ImageColumn, false);
				AttributeSelectorPanel.open(imageCol);
			}
			
			public function getSelectableAttributes():Array
			{
				return [columns];
			}
			
			public function getSelectableAttributeNames():Array
			{
				return ["Columns"];
			}
			
			
			/**
			 * This function(event Listener) gets called during 
			 * HeaderRelease event in Datagrid 
			 * or Called (Manually )when column or sortFieldIndex or sortInDescendingOrder changes
			 */				
			private function handleHeaderRelease(event:DataGridEvent):void
			{
				// There is a bug in flex: column.sortDescending will always return false				
				//need to update sessionState when called by User Interaction
				if (UIUtils.hasFocus(dataGrid))
				{
					sortInDescendingOrder.value = !isSortedDescending(); // each time will toggle ascending/descending
					sortFieldIndex.value = event.columnIndex;
				}
				
			}
			
			private function isSortedDescending():Boolean
			{
				return dataGrid.sortDirection != 'ASC';
			}
			
			
			/**
			 * This function gets called in Updatedisplaylist, 
			 * when there is change in sortFieldIndex or sortInDescending 	
			 * called with parameter if called from change in column 
			 */							
			private function sortCallback():void
			{
				if (!parent)
				{
					callLater(sortCallback)
					return;
				}
				
				if (isNaN(sortFieldIndex.value))
					return;
				
				var c:DataGridColumn = dataGrid.columns[sortFieldIndex.value];
				if (c == null)
					return;
				
				// sort by the column specified in the session state , flip the sorting order if it is wrong
				// each time we dispatch a header event, the sort order gets flipped, so we may have to flip it again
				var changeDir:Boolean = isSortedDescending() != sortInDescendingOrder.value;
				var changeIndex:Boolean = dataGrid.sortIndex != sortFieldIndex.value;
				var times:int = 0;
				if (changeDir)
					times = 1; // change direction only requires one event
				else if (changeIndex)
					times = 2; // (change index and keep direction) requires two events

				var prevFocus:IFocusManagerComponent = focusManager.getFocus();
				for (var i:int = 0 ; i < times; i++)
					dataGrid.dispatchEvent(new DataGridEvent(DataGridEvent.HEADER_RELEASE, false, true, sortFieldIndex.value, null, 0, null, null, 0));
				if (prevFocus)
					focusManager.setFocus(prevFocus);
			}
			
			/**
			 * This function(event Listener) gets called during 
			 * Change event in DataGrid
			 * DoubleClick event in DataGrid
			 */	
			private function handleItemSelection(event:Event=null):void
			{
				_selection.replaceKeys(dataGrid.selectedItems);
			}
			
			/* TODO: Move this method into an abstract class to extend CustomDataGrid off of;
			   this functionality is duplicated used in TreeTool */ 
			private function updateGlobalSelectionChange():void
			{
				if (!parent)
					return callLater(updateGlobalSelectionChange);
				//flex will crash if we try to select items immediately
				if (dataGrid.visibleLockedColumns && lockedColumns.value == 0 && dataGrid.visibleLockedColumns.length != 0)
					validateNow();
				
				var item:Object;
				var isSelected:Dictionary = new Dictionary(true);
				for each (item in dataGrid.selectedItems)
					isSelected[item] = true;
				
				var changeDetected:Boolean = false;
				var selectedItems:Array = [];
				for each (item in dataGrid.dataProvider)
				{
					if (_selection.containsKey(item as IQualifiedKey))
					{
						if (!isSelected[item])
							changeDetected = true;
						selectedItems.push(item);
					}
					else if (isSelected[item])
						changeDetected = true;
				}
				if (selectedItems.length != dataGrid.selectedItems.length)
					changeDetected = true;
				
				if (changeDetected)
					dataGrid.selectedItems = selectedItems;
			}
			private function updateGlobalProbeChangeLater():void
			{
				if (enableProbing.value == true)
					callLater(updateGlobalProbeChange);
			}
			/* TODO: Move this method into an abstract class to extend CustomDataGrid off of;
			   this functionality is duplicated used in TreeTool */ 
			private function updateGlobalProbeChange():void 
			{
				if (!parent)
				{
					callLater(updateGlobalProbeChange);
					return;
				}
				dataGrid.invalidateList();
				dataGrid.validateNow();
				dataGrid.highlightItemsForced(_probe.keys, _selection.containsKey);
			}
			
			/**
			 * @TODO This should be a mode, not a one-time action.
			 *       Use AdvancedDataGrid and lockedRowCount.
			 *       The locked rows should also be sorted by the active sort column.
			 *       We shouldn't be resetting the sort.
			 */
			private function moveSelectedToTop():void
			{
				//push selected Objects into an Array
				var selectedItems:Array = dataGrid.selectedItems;
				
				//datagrid.selectedItems returns null. So have to loop through indices to get the items
				(dataGrid.dataProvider as ArrayCollection).sort = null;
				
				for each(var item:Object in selectedItems)
				{
					var index:int = dataProvider.getItemIndex(item);
					dataProvider.removeItemAt(index);
					dataProvider.source.unshift(item);
				}
				
				dataProvider.refresh();
				dataGrid.validateNow();
				updateGlobalSelectionChange();
				dataGrid.scrollToIndex(0);
			}
			
			private function updateKeysColumnsDataProviderAndSelection():void
			{
				var keys:Array = filteredKeySet.keys;
				if (keys.length > maxRows.value)
				{
					maxRowsLabel.text = lang('Showing first {0} out of {1} records', StandardLib.formatNumber(maxRows.value), StandardLib.formatNumber(keys.length));
					tooManyRecordsIndicator.visible = true;
					tooManyRecordsIndicator.includeInLayout = true;
					keys = keys.slice(0, maxRows.value);
				}
				else
				{
					tooManyRecordsIndicator.visible = false;
					tooManyRecordsIndicator.includeInLayout = false;
				}
				
				dataProvider.source = keys;
				updateGlobalSelectionChange();
			}
			
			private var _minSuggestedColumnSize:int = 32;
			
			private function updateDataGridColumns():void
			{
				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent)
					return callLater(updateDataGridColumns);
				try
				{
					var attrColumns:Array = columns.getObjects();
					_currentDataGridColumns = [];
					for each (var attrColumn:IAttributeColumn in attrColumns)
					{
						var columnName:String = columns.getName(attrColumn);
						var dataType:String = ColumnUtils.getDataType(attrColumn);
						
						//column Section
						var dgc:DataGridColumnForQKeyWithFilterAndGraphics;
						if (dataGridColumns[columnName])
						{
							dgc = dataGridColumns[columnName];
						}
						else
						{
							dgc = new DataGridColumnForQKeyWithFilterAndGraphics(attrColumn, showColors, _cellColorFunction);
							dataGridColumns[columnName] = dgc;
						}
						
						_currentDataGridColumns.push(dgc);
						
						//filterComponent Section
						var classDef:Class = null;
						if (dataType == DataType.NUMBER)
							classDef = SliderFilterComponent;
						else
							classDef = SearchFilterComponent;
						dgc.filterComponent = filterComponents.requestObject(columnName, classDef, false);
						
						//columnWidth section
						columnWidths.requestObject(columnName, LinkableString, false);
						
					}  
					dataGrid.columns = _currentDataGridColumns;
					numLockedColumns_maximum = Math.max(0, attrColumns.length - 2);
				}
				catch (error:Error)
				{
					reportError(error);
				}
			}
			[Bindable] internal var numLockedColumns_maximum:Number = 0;
			
			private function handleColumnReorder(event:IndexChangedEvent):void
			{
				var newColumnOrder:Array = [];
				for(var i:int = 0; i< dataGrid.columns.length; i++)
				{
					var currDGcolumn:DataGridColumnForQKeyWithFilterAndGraphics = dataGrid.columns[i] as DataGridColumnForQKeyWithFilterAndGraphics;
					var columnName:String = columns.getName(currDGcolumn.attrColumn as ILinkableObject);
					newColumnOrder.push(columnName);
				}
				columns.setNameOrder(newColumnOrder);
			}
			
			private function handleColumnListChange():void
			{
				//if column is added , we need to add respective sessioned FilterComponent and ColumnWidth
				if (columns.childListCallbacks.lastObjectAdded)
				{
				}  			
				//if column is removed , we need to remove respective sessioned FilterComponent and ColumnWidth
				else if (columns.childListCallbacks.lastObjectRemoved)
				{
					filterComponents.removeObject(columns.childListCallbacks.lastNameRemoved);
					delete dataGridColumns[columns.childListCallbacks.lastNameRemoved]
					columnWidths.removeObject(columns.childListCallbacks.lastNameRemoved);
				}
				assertColumnOrder();
			}
			
			private function handleColumnStretch(event:Event):void
			{
				var dataGridColumnsWidth:Number = dataGrid.getColumnDisplayWidth();
				for (var i:int = 0; i < _currentDataGridColumns.length; ++i)
				{
					var dgc:DataGridColumnForQKeyWithFilterAndGraphics = _currentDataGridColumns[i];
					if (dgc.filterComponent)
						dgc.filterComponent.width = dgc.width;
					
					var colWidth:Number = dgc.width;
					
					var column:IAttributeColumn = dgc.attrColumn;
					var columnName:String = columns.getName(column);
					var sessionedWidth:LinkableString = columnWidths.requestObject(columnName, LinkableString, false);
					
					if (isNaN(colWidth) || width <= _minSuggestedColumnSize) // this happens when a column is stretched all the way to the right
						colWidth = _minSuggestedColumnSize;
					
					sessionedWidth.value = (100 * colWidth / dataGridColumnsWidth) + "%";
				}
			}
			
			private  function updateColumnWidths():void
			{
				// if there isn't a parent or the grid isn't fully instantiated, return
				if (!parent || dataGrid.width == 0)
				{
					callLater(updateColumnWidths);
					return;
				}
				var allottedDisplayWidth:Number = dataGrid.getColumnDisplayWidth();
				var columnName:String;
				var sessionedWidth:LinkableString;
				var defaultValue:Number = allottedDisplayWidth/_currentDataGridColumns.length;
				var displayedColumnsTotalWidth:Number = 0;
				for (var j:int = 0; j < _currentDataGridColumns.length; j++)
				{
					var dgc:DataGridColumnForQKeyWithFilterAndGraphics = _currentDataGridColumns[j] as DataGridColumnForQKeyWithFilterAndGraphics;
					columnName = columns.getName(dgc.attrColumn);
					if (columnName == null)
						continue;
					sessionedWidth = columnWidths.getObject(columnName) as LinkableString;
					var tempWidth:Number;
					// when we reset width, we need all columns to have default value
					 if (sessionedWidth && sessionedWidth.value)
					 {
						 var sessionedValue:Number = NumberUtils.getNumberFromNumberOrPercent(sessionedWidth.value, allottedDisplayWidth);
						 tempWidth = sessionedValue;
					 }
					 else
					 {
						 tempWidth = defaultValue;
						 //sessionedWidth.value = (100 * tempWidth/allottedDisplayWidth) + "%";
					 } 
					
					//last column gets width to adjust in datgrid, so its necessay to get that width.					
					if (j == _currentDataGridColumns.length -1) 
						tempWidth = allottedDisplayWidth - displayedColumnsTotalWidth;
					if (tempWidth <= _minSuggestedColumnSize || isNaN(tempWidth))
						tempWidth = _minSuggestedColumnSize;
					if (tempWidth >= allottedDisplayWidth - _minSuggestedColumnSize)
						tempWidth = allottedDisplayWidth - _minSuggestedColumnSize;
					//int casting required as rendering works fast with whole number than with an floating number
					var newWidth:Number = int(Math.min(tempWidth, allottedDisplayWidth));
					var lastColumn:Boolean = j == _currentDataGridColumns.length - 1;
					
					if (lastColumn)
						newWidth -= SCROLLBAR_WIDTH; // account for scrollbar
					
					dgc.setWidth(newWidth);
					dgc.width = newWidth;
					
					if (dgc.filterComponent)
					{
						if (lastColumn)
							newWidth += SCROLLBAR_WIDTH;
						dgc.filterComponent.width = newWidth;
					}
					//add those columns which are displayed on datagrid
					if (j >= dataGridHorizontalScrollPosition.value)
					{
						displayedColumnsTotalWidth = displayedColumnsTotalWidth + dgc.width;
					}
				}
				displayedColumnsTotalWidth = 0;
				
				// Set max header height
				dataGrid.headerHeight = NaN;
				dataGrid._explicitHeaderHeight = false;
				if (dataGrid.calculateHeaderHeight() > maxHeaderHeight.value)
					dataGrid.headerHeight = maxHeaderHeight.value;
			}
			
			private function handleDataGridHorizontalScroll():void
			{
				var maximumValue:int = dataGrid.maxHorizontalScrollPosition;
				var hsp:int = 0;
				for (var i:int = 0; i < dataGridHorizontalScrollPosition.value && i < _currentDataGridColumns.length; i++)
				{
					hsp += (_currentDataGridColumns[i] as DataGridColumnForQKeyWithFilterAndGraphics).width;
				}
				filterControls.horizontalScrollPosition = hsp;
				dataGrid.horizontalScrollPosition = dataGridHorizontalScrollPosition.value;
				
				if (maximumValue > 0 && dataGridHorizontalScrollPosition.value == maximumValue)
				{
					updateColumnWidths();
				}
			}
			
			public const showControls:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false), updateControls);
			public const show_moveSelectedToTop:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const show_clearSelection:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const show_editColumns:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			public const show_exportData:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			private function updateControls():void
			{
				if (!parent)
					return callLater(updateControls);
				try
				{
					if (showControls.value)
					{
						if (!extraControls.parent)
							tableArea.addChild(extraControls);
					}
					else
					{
						if (extraControls.parent)
							tableArea.removeChild(extraControls);
					}
				}
				catch (e:Error) 
				{
					reportError(e);
				}
			}
			
			public const showFilters:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			private function updateFilters():void
			{
				if (!parent)
					return callLater(updateFilters);
				try
				{
					if (showFilters.value)
					{
						lockedColumns.value = 0;
						if (!filterControls.parent)
						{
							// if there are controls above where the filters should be.. add the filters at index 1, otherwise use index 0
							tableArea.addChildAt(filterControls, 0);
						}
						dataGrid.enableFilters = true;
					}
					else
					{
						if (filterControls.parent)
						{
							tableArea.removeChild(filterControls);
						}
						dataGrid.enableFilters = false;
					}
				}
				catch (e:Error) 
				{
					reportError(e);
				}
			}
			
			public const showColors:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			public static const DEFAULT_CELL_COLOR_FUNCTION_SCRIPT:String = StandardLib.unIndent("\
				function (column, key, cell) {\n\
					var name = 'defaultColorColumn';\n\
					var cc = WeaveAPI.globalHashMap.getObject(name);\n\
					return cc.getValueFromKey(key, Number);\n\
				}\n\
			");
			public static const HEATMAP_CELL_COLOR_FUNCTION_SCRIPT:String = StandardLib.unIndent("\
				function (column, key, cell) {\n\
					import 'weave.utils.ColumnUtils';\n\
					var norm = ColumnUtils.getNorm(column, key);\n\
					return colorRamp.getColorFromNorm(norm);\n\
				}\n\
			");
			private var _lastCellColorError:Error = null;
			/**
			 * This defines how cells will be colored.
			 * Two parameters are made available to this function: column:IAttributeColumn, key:IQualifiedKey, cell:UIComponent
			 * The return value should be a color, or NaN for no color.
			 */
			public const cellColorFunction:LinkableFunction = registerLinkableChild(this, new LinkableFunction(DEFAULT_CELL_COLOR_FUNCTION_SCRIPT, false, true, ['column', 'key', 'cell']), validateCellColorFunction);
			private function validateCellColorFunction():void
			{
				try
				{
					_lastCellColorError = null;
					cellColorFunction.validate();
					cellColorFunctionEditor_errorString = '';
				}
				catch (e:Error)
				{
					cellColorFunctionEditor_errorString = e.message;
				}
			}
			[Bindable] internal var cellColorFunctionEditor_errorString:String;
			// this gets passed to cell item renderers
			private function _cellColorFunction(column:IAttributeColumn, key:IQualifiedKey, cell:UIComponent):Number
			{
				try
				{
					return cellColorFunction.apply(this, arguments);
				}
				catch (e:Error)
				{
					if (!_lastCellColorError)
						reportError(_lastCellColorError = e);
				}
				return NaN;
			}
			// default cell color function just gets color from global color column
			[Deprecated] public function defaultCellColorFunction(column:IAttributeColumn, key:IQualifiedKey, cell:UIComponent = null):Number
			{
				var cc:ColorColumn = WeaveAPI.globalHashMap.getObject('defaultColorColumn') as ColorColumn;
				return cc.getValueFromKey(key, Number);
			}
			
			
			public const lockedColumns:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0, verifyLockedColumnCount));
			
			private function verifyLockedColumnCount(value:Number):Boolean
			{
				return value == uint(value);
			}
			
			private function handleLockedColumnChange():void
			{
				var numColumns:int = dataGrid.columns.length;
				if (lockedColumns.value > 0)
					showFilters.value = false;
				if (lockedColumns.value >= numColumns)
					dataGrid.lockedColumnCount = 0;
				else
					dataGrid.lockedColumnCount = lockedColumns.value;
			}
			
			protected function dataGrid_updateCompleteHandler(event:FlexEvent):void
			{
				filterControls.setStyle("paddingLeft", dataGrid.viewMetrics.left);
				filterControls.setStyle("paddingRight", dataGrid.viewMetrics.right);
			}
			
			private var _previousSelection:Object ;
			
			private function handleMouseDown():void
			{
				detectLinkableObjectChange( handleMouseClick, _selection )
			}
			
			private function handleMouseClick():void
			{
				if (!detectLinkableObjectChange( handleMouseClick, _selection ))
					if ( dataGrid.mouseY > dataGrid.headerHeight )
						if ( dataGrid.mouseX < dataGrid.width - SCROLLBAR_WIDTH)
							if ( WeaveAPI.StageUtils.pointClicked )
								_selection.clearKeys() ;
			}
			private static const SCROLLBAR_WIDTH:int = 16;
			
			public static const DEFAULT_BACKGROUND_COLORS:Array = [0xffffff, 0xEEF6FF];
			public const backgroundColor1:LinkableNumber = registerLinkableChild(this, new LinkableNumber(DEFAULT_BACKGROUND_COLORS[0]));
			public const backgroundColor2:LinkableNumber = registerLinkableChild(this, new LinkableNumber(DEFAULT_BACKGROUND_COLORS[1]));
		]]>
	</mx:Script>
	<ui:editorFactory><mx:Component><ui:ControlPanel>
		<mx:VBox label="{lang('Columns')}">
			<mx:CheckBox id="showKeyColumnCheckBox" label="{lang('Show key column')}" change="handleKeyColumnCheckBox()"/>
			<mx:HBox>
				<mx:Label text="{lang('Number of locked columns')}"/>
				<mx:NumericStepper id="numLockedColumns" minimum="0"
								   maximum="{outerDocument.numLockedColumns_maximum}"
								   enabled="{numLockedColumns.maximum > 0}"
								   creationComplete="linkBindableProperty(outerDocument.lockedColumns, event.target, 'value', 0, true);"/>
			</mx:HBox>
			<ui:ColumnListComponent id="dimensionsList" creationComplete="dimensionsList.hashMap = outerDocument.columns;"/>
			<mx:HBox>
				<mx:Button label="{lang('Add image column')}" click="outerDocument.addImageColumn()"/>
				<ui:HelpComponent>
					Select a column that contains image URLs.
					The images will be displayed in the table.
				</ui:HelpComponent>
			</mx:HBox>

			<mx:Button label="{lang('Reset column widths')}" click="outerDocument.columnWidths.removeAllObjects()"/>

		</mx:VBox>
		<mx:VBox label="{lang('Advanced')}">
			<mx:CheckBox id="enableProbingCheckBox" label="{lang('Enable mouseover linking')}"/>
			<mx:HBox verticalAlign="middle">
				<mx:CheckBox id="showFiltersCheckBox" label="{lang('Show filter controls on panel')}"/>
				<ui:HelpComponent>
					This allows data to be filtered based on the data values.
					Filtered records are highlighted by selection in the other tools.
					
					If a column contains text data, a search box will be displayed which supports wildcards ('?' = any Character; '*' = any String).
					
					If a column contains numeric data, a slider will be displayed that allows selection of Min and Max values.
				</ui:HelpComponent>
			</mx:HBox>
			<ui:CheckBoxWithNestedOptions label="{lang('Show buttons on panel')}" creationComplete="linkBindableProperty(outerDocument.showControls, event.target, 'selected')">
				<mx:CheckBox id="toggle_moveSelectedToTop" label="{lang('Move selected to top')}" creationComplete="linkBindableProperty(outerDocument.show_moveSelectedToTop, event.target, 'selected')"/>
				<mx:CheckBox id="toggle_clearSelection" label="{lang('Clear selection')}" creationComplete="linkBindableProperty(outerDocument.show_clearSelection, event.target, 'selected')"/>
				<mx:CheckBox id="toggle_editColumns" label="{lang('Edit columns')}" creationComplete="linkBindableProperty(outerDocument.show_editColumns, event.target, 'selected')"/>
				<mx:CheckBox id="toggle_exportData" label="{lang('Export data')}" creationComplete="linkBindableProperty(outerDocument.show_exportData, event.target, 'selected')"/>
			</ui:CheckBoxWithNestedOptions>
			<ui:CheckBoxWithNestedOptions id="showColorsCheckBox" label="{lang('Enable cell coloring')}" width="100%" height="100%">
				<ui:HelpComponent>
					<ui:htmlText>
						<![CDATA[
							The result of this expression will be treated as a color value.  You can also put other ActionScript code in here to draw graphics in each cell. <!--
							-->Available variables are <b>column</b>, <b>key</b>, and <b>cell</b>.
						]]>
					</ui:htmlText>
				</ui:HelpComponent>
				<mx:HBox width="100%" height="100%">
					<mx:VBox>
						<mx:Button label="{lang('Default colors')}" click="outerDocument.cellColorFunction.value = AdvancedTableTool.DEFAULT_CELL_COLOR_FUNCTION_SCRIPT;"/>
						<mx:Button label="{lang('Heat map')}" click="outerDocument.cellColorFunction.value = AdvancedTableTool.HEATMAP_CELL_COLOR_FUNCTION_SCRIPT;"/>
						<mx:Button label="{lang('Edit heat map colors')}" click="ControlPanel.openEditor(outerDocument.colorRamp)"/>
					</mx:VBox>
					<ui:CodeEditor id="cellColorFunctionEditor"
								   errorString="{outerDocument.cellColorFunctionEditor_errorString}"
								   creationComplete="linkBindableProperty(outerDocument.cellColorFunction, event.target, 'text', 500);"/>
				</mx:HBox>
			</ui:CheckBoxWithNestedOptions>
			<ui:Indent id="bgColorControls" label="{lang('Background colors')}">
				<ui:CustomColorPicker creationComplete="linkBindableProperty(outerDocument.backgroundColor1, event.target, 'selectedColor');"/>
				<ui:CustomColorPicker creationComplete="linkBindableProperty(outerDocument.backgroundColor2, event.target, 'selectedColor');"/>
				<mx:Button label="{lang('Reset')}" click="outerDocument.backgroundColor1.value = AdvancedTableTool.DEFAULT_BACKGROUND_COLORS[0]; outerDocument.backgroundColor2.value = AdvancedTableTool.DEFAULT_BACKGROUND_COLORS[1];"/>
			</ui:Indent>
		</mx:VBox>
		<editors:WindowSettingsEditor id="windowEditor" target="{outerDocument}"/>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
				import weave.data.AttributeColumns.KeyColumn;
				
				override protected function childrenCreated():void
				{
					super.childrenCreated();
					windowEditor.removeChild(windowEditor.backgroundColorIndent);
					windowEditor.addChild(bgColorControls);
					outerDocument.columns.childListCallbacks.addGroupedCallback(this, handleColumnListChange, true);
					linkBindableProperty(outerDocument.showFilters, showFiltersCheckBox, "selected");
					linkBindableProperty(outerDocument.showColors, showColorsCheckBox,"selected");
					linkBindableProperty(outerDocument.enableProbing, enableProbingCheckBox, "selected");
				}
				private function handleColumnListChange():void
				{
					showKeyColumnCheckBox.selected = outerDocument.columns.getNames(KeyColumn).length > 0;
				}
				private function handleKeyColumnCheckBox():void
				{
					if (showKeyColumnCheckBox.selected)
					{
						var kc:Array= outerDocument.columns.getObjects(KeyColumn);
						if (kc.length == 0)
						{
							var nameOrder:Array = outerDocument.columns.getNames();
							outerDocument.columns.requestObject("KeyColumn", KeyColumn, false);
							outerDocument.columns.setNameOrder(nameOrder);
						}
					}
					else
					{
						var keyCols:Array = outerDocument.columns.getNames(KeyColumn);
						for each(var keyCol:String in keyCols)
						{
							outerDocument.columns.removeObject(keyCol);
						}
					}
					
				}
				
			]]>
		</mx:Script>
	</ui:ControlPanel></mx:Component></ui:editorFactory>
</ui:DraggablePanel>
