<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<!---
@author kmanohar
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*"
		 xmlns:userControls="weave.ui.userControls.*"
	     xmlns:mapTool="weave.visualization.tools.*"
	     >
	<mx:Script>
		<![CDATA[
			import mx.containers.Canvas;
			
			import weave.api.getCallbackCollection;
			import weave.api.newLinkableChild;
			import weave.api.primitives.IBounds2D;
			import weave.core.LinkableWatcher;
			import weave.core.UIUtils;
			import weave.primitives.Bounds2D;
			import weave.primitives.ZoomBounds;


			override protected function inConstructor():void
			{
				super.inConstructor();
				
				panelHeight.value = "25%";
				panelWidth.value = "25%";
				
				panelX.value = "0%";
				panelY.value = "0%";
				minimizable.value = false;
				maximizable.value = false;
				closeable.value = false;
				enableZOrder.value = false;
				enableBorders.value = false;
				
				clipContent = true;

				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.plotManager.enableAutoZoomToExtent.lock();
				visualization.enableSelection.value = false;
				visualization.enableSelection.lock();
				visualization.enableProbe.value = false;
								
				visualization.plotManager.includeNonSelectableLayersInAutoZoom.value = true;
				getCallbackCollection(visualization.plotManager.zoomBounds).addGroupedCallback(this,drawBoundsRectangle);
				visualization.plotManager.enableFixedAspectRatio.value = true;
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				canvas.clipContent = true;
				canvas.percentHeight= canvas.percentWidth = 100;
				canvas.useHandCursor = true;
				UIUtils.spark_addChild(visCanvas, canvas);
				canvas.toolTip = lang("Click or drag this rectangle to change the displayed area in the map");
				
				canvas.addEventListener(MouseEvent.MOUSE_DOWN, handleMouseDown);
				WeaveAPI.StageUtils.addEventCallback(MouseEvent.MOUSE_MOVE, this, handleMouseMove);
				WeaveAPI.StageUtils.addEventCallback(MouseEvent.MOUSE_UP, this, handleMouseUp);
				
			}
			
			public function set parentZoomBounds(value:ZoomBounds):void
			{
				_parentZoomBoundsWatcher.target = value;
			}
			public function get parentZoomBounds():ZoomBounds
			{
				return _parentZoomBoundsWatcher.target as ZoomBounds;
			}
			private const _parentZoomBoundsWatcher:LinkableWatcher = newLinkableChild(this, LinkableWatcher, drawBoundsRectangle, true);
			
			public const parentScreenBounds:IBounds2D = new Bounds2D();
			private var overviewDataBounds:IBounds2D = new Bounds2D();
			private var screenBounds:IBounds2D = new Bounds2D();
			private var tempBounds:IBounds2D = new Bounds2D();
			private var canvas:Canvas = new Canvas();
			
			/**
			 * This function draws a rectangle around the area currently displayed in the parent MapTool.
			 */
			public function drawBoundsRectangle():void
			{
				if (!parent)
				{
					callLater(drawBoundsRectangle);
					return;
				}
				
				visualization.plotManager.zoomBounds.getScreenBounds(screenBounds);
				parentZoomBounds.getScreenBounds(parentScreenBounds);
				parentZoomBounds.getDataBounds(tempBounds);
				
				if (tempBounds.isEmpty())
					return;
				if (screenBounds.isEmpty())
					return;

				if(!parentScreenBounds.isEmpty())
					_fixAspectRatio(tempBounds,parentScreenBounds);
				
				visualization.plotManager.zoomBounds.getDataBounds(overviewDataBounds);				
				
				overviewDataBounds.projectCoordsTo(tempBounds,screenBounds);
				
				boundWidth = tempBounds.getWidth();
				boundHeight = tempBounds.getHeight()
				
				var graphics:Graphics = canvas.graphics;
				graphics.clear();
				
				graphics.lineStyle(2);
				graphics.beginFill(0xcccccc,0.5);
				graphics.drawRect(tempBounds.getXMin(), tempBounds.getYMin(), boundWidth, boundHeight);
				graphics.endFill();  								
			} 
			
			private var boundWidth:Number;
			private var boundHeight:Number;
			private var mouseDown:Boolean = false;
			private var enableSelection:Boolean ;
			
			private function handleMouseDown(e:MouseEvent):void
			{ 
				mouseDown = true;
				handleMouseEvent();
			}
			
			private function handleMouseMove():void
			{ 
				if (mouseDown)
					handleMouseEvent();
			}
						
			private function handleMouseUp():void
			{ 
				if (mouseDown)
					handleMouseEvent();
				mouseDown = false;
			}
			
			private function handleMouseEvent():void
			{
				visualization.plotManager.zoomBounds.getScreenBounds(screenBounds);				

				tempBounds.setCenteredRectangle(visualization.mouseX, visualization.mouseY, boundWidth, boundHeight);
				visualization.plotManager.zoomBounds.getDataBounds(overviewDataBounds);
				
				screenBounds.projectCoordsTo(tempBounds, overviewDataBounds);
				parentZoomBounds.setBounds(tempBounds, parentScreenBounds, true);
			}
			
			/**
			 * This function was copied from ZoomBounds.as to get the correct dataBounds
			 * @param dataBounds data bounds to correct
			 * @param _screenBounds corresponding screenBounds
			 */
			private function _fixAspectRatio(dataBounds:IBounds2D,_screenBounds:IBounds2D):void
			{
				var xScale:Number = dataBounds.getWidth() / _screenBounds.getXCoverage();
				var yScale:Number = dataBounds.getHeight() / _screenBounds.getYCoverage();
				if (xScale != yScale)
				{
					var scale:Number = Math.sqrt(Math.abs(xScale * yScale));
					dataBounds.centeredResize(_screenBounds.getXCoverage() * scale, _screenBounds.getYCoverage() * scale);
				}
			}
		]]>
	</mx:Script>


</SimpleVisTool>
