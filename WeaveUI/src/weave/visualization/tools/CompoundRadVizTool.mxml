<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
			   xmlns:mx="http://www.adobe.com/2006/mxml"
			   xmlns:ui="weave.ui.*" 
			   xmlns:userControls="weave.ui.userControls.*"		 
			   layout="absolute"
			   mouseMove="handleMouseMove(event)"
			   mouseDown="handleMouseDown(event)"
			   mouseUp="handleMouseUp(event)">
	<mx:Script>
		<![CDATA[
			import spark.core.SpriteVisualElement;
			
			import weave.Weave;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkSessionState;
			import weave.api.ui.IVisTool;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.primitives.Bounds2D;
			import weave.ui.DraggablePanel;
			import weave.ui.DynamicColumnComponent;
			import weave.utils.ColumnUtils;
			import weave.utils.PlotterUtils;
			import weave.visualization.plotters.AnchorPlotter;
			import weave.visualization.plotters.AnchorPoint;
			import weave.visualization.plotters.CompoundRadVizPlotter;
			
			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, CompoundRadVizTool, "Compound RadViz");
			
			private static const ANCHOR_LAYER:String = "anchorLayer";
			
			[Bindable]
			private var _plotter:CompoundRadVizPlotter ;
			private var _anchorPlotter:AnchorPlotter ;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				
				// lock dynamic objects into place
				_plotter = initializePlotters(CompoundRadVizPlotter, false);
				getCallbackCollection(_plotter).addGroupedCallback(this, handlePanelTitleChange);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.plotManager.enableFixedAspectRatio.value = true;
				visualization.enableZoomAndPan.value = false;
				
				_plotter.setAnchorLocations();
				_anchorPlotter = visualization.plotManager.plotters.requestObject(ANCHOR_LAYER, AnchorPlotter, true);
				visualization.plotManager.getLayerSettings(ANCHOR_LAYER).selectable.value = false;
				_anchorPlotter.setRadViz(_plotter);
				linkSessionState(_plotter.colorMap, _anchorPlotter.colorMap);
				linkSessionState(_plotter.enableWedgeColoring, _anchorPlotter.enableWedgeColoring);
				
				getCallbackCollection(mainLayerSettings.probeFilter).addImmediateCallback(this,drawProbeLines);
				
				visualization.plotManager.marginTop.value =	visualization.plotManager.marginBottom.value = "20";
				visualization.plotManager.marginLeft.value = visualization.plotManager.marginRight.value = "20";				
			}
			
			override public function initSelectableAttributes(input:Array):void
			{
				input.slice(0,10).forEach(function(item:Object, i:int, a:Array):void {
					ColumnUtils.initSelectableAttribute(_plotter.columns, item, i == 0);
				});
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				(size as DynamicColumnComponent).dynamicObject = _plotter.radiusColumn;
				(colorComponent as DynamicColumnComponent).columnWrapper = _plotter.fillStyle.color;
				columnList.hashMap = _plotter.columns;
				
				linkBindableProperty(_plotter.enableJitter,jitterckbx,'selected');
				linkBindableProperty(_plotter.radiusConstant,sizeSlider,'value');				
				linkBindableProperty(_plotter.alphaColumn.defaultValue, alphaSlider, "value");
				linkBindableProperty(_plotter.jitterLevel, jitterSlider, "value" );	
				
				//visualization.rawChildren.addChild(probeSprite);
				var sprCont:SpriteVisualElement = new SpriteVisualElement();
				sprCont.addChild(probeSprite)
				visualization.addElement(sprCont);
				
			}
			
			private var tempBounds:Bounds2D = new Bounds2D();
			private var screenBounds:Bounds2D = new Bounds2D();			
			private var tempPoint:Point = new Point();					
			
			private var _probedKeys:Array ;
			private var _probedAnchor:AnchorPoint;
			private var dataBounds:Bounds2D = new Bounds2D();
			private var isDragging:Boolean = false;			
			private var _prevEnableAutoZoom:Boolean;
			
			private var probeSprite:Sprite = new Sprite() ;			
			
			private function drawProbeLines():void
			{ 
				if(!Weave.properties.enableProbeLines.value) return;
				
				var probeKeySet:IKeySet = (mainLayerSettings.probeFilter.internalObject) as IKeySet;
				if(!probeKeySet) return;
				
				visualization.plotManager.zoomBounds.getDataBounds(dataBounds);
				visualization.plotManager.zoomBounds.getScreenBounds(screenBounds);
				
				_plotter.probedKeys = probeKeySet.keys ;
				_plotter.drawProbe = (this as DraggablePanel) == DraggablePanel.activePanel;
				
				_plotter.drawProbeLines(dataBounds, screenBounds, probeSprite.graphics);		 		
				
			}
			
			private function handleMouseDown(event:MouseEvent):void
			{
				tempPoint = visualization.globalToLocal(new Point(event.stageX,event.stageY));
				tempBounds.setCenteredRectangle(tempPoint.x, tempPoint.y, 10, 10);
				
				visualization.plotManager.zoomBounds.getDataBounds(dataBounds);
				visualization.plotManager.zoomBounds.getScreenBounds(screenBounds);
				screenBounds.projectCoordsTo(tempBounds, dataBounds);
				
				_probedKeys = visualization.plotManager.hack_getSpatialIndex(ANCHOR_LAYER).getKeysBoundingBoxOverlap(tempBounds);
				if( !_probedKeys.length ) return;
				
				var key:IQualifiedKey = _probedKeys[0];
				_probedAnchor = _plotter.anchors.getObject(key.localName) as AnchorPoint;			
				
				visualization.enableSelection.value = false;
				_prevEnableAutoZoom = visualization.plotManager.enableAutoZoomToExtent.value;
				visualization.plotManager.enableAutoZoomToExtent.value = false;
				isDragging = true;
			}
			
			private function handleMouseUp(event:MouseEvent):void
			{
				if(!isDragging) return;				
				handleMouseMove(event);
				_probedAnchor = null;
				isDragging = false;							
				visualization.enableSelection.value = true;
				visualization.plotManager.enableAutoZoomToExtent.value = _prevEnableAutoZoom;
			}
			
			private function handleMouseMove(event:MouseEvent):void
			{
				if(!isDragging) return;
				if(!_probedAnchor) return ;
				
				tempPoint = visualization.globalToLocal(new Point(event.stageX, event.stageY));
				
				screenBounds.projectPointTo(tempPoint, dataBounds);
				
				_probedAnchor.x.value = tempPoint.x;
				_probedAnchor.y.value = tempPoint.y;	
				
				var theta:Number = _probedAnchor.polarRadians.value;
				_probedAnchor.x.value = Math.cos(theta);
				_probedAnchor.y.value = Math.sin(theta);			
			}
			
			override public function get defaultPanelTitle():String
			{
				var columns:Array = _plotter.columns.getObjects(IAttributeColumn);
				for (var i:int = 0; i < columns.length; i++)
					columns[i] = ColumnUtils.getTitle(columns[i] as IAttributeColumn);
				return lang("Compound RadViz of {0}", columns.join(lang(', ')));
			}
		]]>
	</mx:Script>
	<ui:ControlPanel>
		<mx:VBox id="attributesPanel" label="{lang('Attributes')}">
			<ui:DynamicColumnComponent id="colorComponent"/>
			<ui:DynamicColumnComponent id="size"/>
			<ui:ColumnListComponent id="columnList"/>
		</mx:VBox>		
		
		<mx:VBox id="VizControlsPanel" label="{lang('Appearance')}">
			<ui:Indent label="{lang('Point opacity')}"
					   width="100%"
					   toolTip="{lang('Use this control to see how transparent points are.  Moving left increases transparency (decreased opacity), moving to the right decreases transparency (increased opacity) up to fully opaque (no transparency).')}">
				<mx:HSlider id="alphaSlider"
							width="100%"
							alpha="1.0"
							snapInterval="0.1"
							tickInterval="0.1" labels="{['10%', '30%', '50%', '70%', '90%', '100%']}"
							dataTipFormatFunction="{(function():Function{return PlotterUtils.alphaSliderFormatFunction;}())}"
							minimum="0.1" maximum="1.0" value="1.0"
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="{lang('Point radius')}"
					   width="100%"
					   toolTip="{lang('Use this control to adjust point radius')}">
				<mx:HSlider id="sizeSlider"
							width="100%"
							alpha="1.0"
							tickInterval="1" 
							minimum="1" maximum="10" 
							liveDragging="true"/>
			</ui:Indent>
			<mx:Spacer/>
			<ui:Indent label="{lang('Label angle')}" width="100%">
				<mx:HSlider id="labelAngleSlider" width="100%"
							snapInterval="0.25" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
							dataTipFormatFunction="{function(v:Number):String { return String(Math.round(100*v))+'%' }}"
							creationComplete="linkBindableProperty(_anchorPlotter.labelAngleRatio, event.target, 'value')"/>
			</ui:Indent>
		</mx:VBox>
		
		<mx:VBox id="advancedPanel" label="{lang('Advanced')}">			
			<mx:VBox>
				<mx:HBox
					creationComplete="linkBindableProperty(_plotter.localNormalization,normalizationType,'selectedValue')">
					<mx:Label text="{lang('Normalization method:')}"
							  color="0x000000" fontSize="12"
							  toolTip="{lang('Select the type of normalization used to calculate record coordinates')}"/>
					<mx:RadioButtonGroup id="normalizationType"/>
					<mx:RadioButton groupName="normalizationType"
									id="localNorm"
									value="true"
									label="{lang('Local')}"
									/>
					<mx:RadioButton groupName="normalizationType"
									id="globalNorm"
									value="false"
									label="{lang('Global')}"
									/>
				</mx:HBox>
			</mx:VBox>
			<mx:VBox>
				
				<mx:CheckBox id="enableWedgeColoringCkbx"
							 label="{lang('Enable Wedge Coloring')}"
							 toolTip="{lang('Enable different wedge colors for the pi-chart glyphs')}"
							 creationComplete="linkBindableProperty(_plotter.enableWedgeColoring, event.target, 'selected')"/>
				<mx:Label text="{lang('Color scale used in pie-chart glyphs:')}" enabled="{enableWedgeColoringCkbx.selected}"/>
				<ui:ColorRampList id="colormapGrid" colorRamp="{_plotter.colorMap}"/>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:HBox>
					<mx:CheckBox id="jitterckbx" label="{lang('Apply Jitter')}" 
							  toolTip="{lang('Use this control to change record coordinates by a random number')}"/>					
					<mx:Button click="_plotter.setNewRandomJitterColumn();" 
								   toolTip="{lang('Use this control to reseed jitter with new random values')}"
								   label="{lang('Randomize Jitter')}"/>
					<mx:Label text="{lang('Jitter Level:')}" 
							  color="0x000000" fontSize="12" 
							  enabled="{jitterckbx.selected}"
							  toolTip="{lang('Use slider to adjust the jitter level')}"/>					
					<mx:HSlider id="jitterSlider"
								enabled="{jitterckbx.selected}"
								width="100%"
								alpha="1.0"
								snapInterval="1"
								tickInterval="1"
								labels="{['1','2','3','4','5','6','7','8','9','10']}"
								showDataTip="false"
								minimum="-19" maximum="-10"
								liveDragging="true"/>
				</mx:HBox>
			</mx:VBox>
			<mx:Spacer height="10"/>
			<mx:VBox>
				<mx:Label text="{lang('Dimensional Anchor Reordering Algorithm:')}" 
						  color="0x000000" fontSize="12" 
						  toolTip="{lang('Use this control to reorder the dimensional anchors')}"/>					
				<mx:HBox>
					<mx:ComboBox id="algorithmComboBox" dataProvider="{_plotter.algorithms}"
								 creationComplete="linkBindableProperty(_plotter.currentAlgorithm,event.target,'selectedItem')"/>
					<mx:HBox enabled="{algorithmComboBox.selectedIndex == 0}">
						<mx:Label text="{lang('Number of Iterations')}"/>
						<mx:TextInput id="iterationsTextInput" enabled="{algorithmComboBox.selectedIndex == 0}"
									  creationComplete="linkBindableProperty(_plotter.iterations, event.target, 'text')"/>
					</mx:HBox>
				</mx:HBox>
			</mx:VBox>
		</mx:VBox>
		
	</ui:ControlPanel>
</SimpleVisTool>
