<?xml version="1.0" encoding="utf-8"?>
<!--
/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */
-->
<SimpleVisTool xmlns="weave.visualization.tools.*" 
	     xmlns:mx="http://www.adobe.com/2006/mxml"
	     xmlns:ui="weave.ui.*" 
		 xmlns:userControls="weave.ui.userControls.*"
		 layout="absolute">
	<mx:Script>
		<![CDATA[
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.registerLinkableChild;
			import weave.api.ui.IVisTool;
			import weave.core.LinkableVariable;
			import weave.core.UIUtils;
			import weave.ui.SelectableAttributesCheckBoxList;
			import weave.utils.ColumnUtils;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.plotters.PieChartPlotter;

			WeaveAPI.ClassRegistry.registerImplementation(IVisTool, PieChartTool, "Pie Chart");
			
			public var _plotter:PieChartPlotter = null;
			
			override protected function inConstructor():void
			{
				super.inConstructor();
				// lock dynamic objects into place
				_plotter = initializePlotters(PieChartPlotter, false);
				
				visualization.plotManager.enableAutoZoomToExtent.value = true;
				visualization.plotManager.enableFixedAspectRatio.value = true;
				visualization.enableZoomAndPan.value = false;

				getCallbackCollection(visualization.plotManager.zoomBounds).addImmediateCallback(this, invalidateAxes);
				getCallbackCollection(_plotter).addImmediateCallback(this, invalidateAxes);
				invalidateAxes();
				
				// see if there is a matching column in probe headers
				var headers:Array = ProbeTextUtils.probeHeaderColumns.getObjects();
				for (var i:int = 0; i < headers.length; i++)
				{
					if (ColumnUtils.getKeyType(headers[i]) == ColumnUtils.getKeyType(_plotter.data))
					{
						_plotter.label.requestLocalObjectCopy(headers[i]);
						break;
					}
				}
				
				visualization.plotManager.marginTop.value = "65";
				visualization.plotManager.marginBottom.value = "65";
				visualization.plotManager.marginLeft.value = "85";
				visualization.plotManager.marginRight.value = "85";
			}
			
			override public function initSelectableAttributes(input:Array):void
			{
				ColumnUtils.initSelectableAttributes([_plotter.data, _plotter.label], input);
			}
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();
			}
			
			public const attributesToIncludeInProbe:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array, null, null), handleAttributesToIncludeInProbe, true);
			private function handleAttributesToIncludeInProbe():void
			{
				visualization.additionalProbeColumns = SelectableAttributesCheckBoxList.getSelectedAttributeColumns(this, attributesToIncludeInProbe);
			}
			[Deprecated] public function set includeToolAttributesInProbe(value:Boolean):void
			{
				attributesToIncludeInProbe.setSessionState(value ? getSelectableAttributeNames() : []);
			}
			
			private function invalidateAxes():void
			{
				handlePanelTitleChange();
			}

			override public function get defaultPanelTitle():String
			{
				return lang("Pie Chart of {0}", ColumnUtils.getTitle(_plotter.data));
			}
		]]>
	</mx:Script>
<editorFactory>
<mx:Component>
	<ui:ControlPanel>
		<mx:Script>
			<![CDATA[
				import weave.api.linkBindableProperty;
			]]>
		</mx:Script>
		<mx:VBox id="attributesPanel" label="{lang('Attributes for Pie Chart')}">
			<ui:DynamicColumnComponent label="{lang('Wedge size')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = outerDocument._plotter.data"/>
			<ui:DynamicColumnComponent label="{lang('Wedge color')}" creationComplete="(event.target as DynamicColumnComponent).columnWrapper = outerDocument._plotter.fill.color"/>
			<ui:DynamicColumnComponent id="labelColumInput" label="{lang('Label Column')}" creationComplete="(event.target as DynamicColumnComponent).dynamicObject = outerDocument._plotter.label"/>
			<mx:HBox width="100%">
				<mx:Label text="{lang('Label angle')}" fontWeight="bold"/>
				<mx:HSlider
						snapInterval="0.25" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
						dataTipFormatFunction="{function(v:Number):String { return lang('{0}%', Math.round(100 * v)); }}"
						creationComplete="linkBindableProperty(outerDocument._plotter.labelAngleRatio, event.target, 'value')"/>
			</mx:HBox>
			<mx:HBox width="100%">
				<mx:Label text="{lang('Inner radius')}" fontWeight="bold"/>
				<mx:HSlider
						snapInterval="0.05" minimum="0" maximum="1" liveDragging="true" tickInterval="0.25"
						creationComplete="linkBindableProperty(outerDocument._plotter.innerRadius, event.target, 'value')"/>
			</mx:HBox>
		</mx:VBox>
		<mx:VBox label="{lang('Mouseover info')}">
			<ui:SelectableAttributesCheckBoxList id="selectedAttrList" creationComplete="selectedAttrList.setup(outerDocument, outerDocument.attributesToIncludeInProbe)"/>
		</mx:VBox>
	</ui:ControlPanel>
</mx:Component>
</editorFactory>
</SimpleVisTool>
