/* ***** BEGIN LICENSE BLOCK *****
 *
 * This file is part of Weave.
 *
 * The Initial Developer of Weave is the Institute for Visualization
 * and Perception Research at the University of Massachusetts Lowell.
 * Portions created by the Initial Developer are Copyright (C) 2008-2015
 * the Initial Developer. All Rights Reserved.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this file,
 * You can obtain one at http://mozilla.org/MPL/2.0/.
 * 
 * ***** END LICENSE BLOCK ***** */

package weave.menus
{
	import flash.events.ContextMenuEvent;
	import flash.ui.ContextMenu;
	import flash.ui.ContextMenuItem;
	import flash.utils.Dictionary;
	import flash.utils.getQualifiedClassName;
	
	/**
	 * Uses WeaveMenuItem to define dynamic ContextMenus.
	 * 
	 * @see weave.menus.WeaveMenuItem
	 */
	public class WeaveContextMenu
	{
		/**
		 * Creates a dynamic ContextMenu.
		 * @param dataProvider Either a single WeaveMenuItem
		 *                     or an Array of WeaveMenuItems (or params to pass to the WeaveMenuItem constructor)
		 *                     or a Function returning such an Array.
		 * @return A dynamic ContextMenu derived from the dataProvider.
		 * @see weave.menus.WeaveMenuItem
		 */
		public static function create(dataProvider:Object):ContextMenu
		{
			if (getQualifiedClassName(dataProvider) == 'Object')
				dataProvider = new WeaveMenuItem(dataProvider);
			if (dataProvider is Array || dataProvider is Function)
				dataProvider = new WeaveMenuItem({children: dataProvider});
			if (dataProvider is WeaveMenuItem)
				return new WeaveContextMenu(dataProvider as WeaveMenuItem).contextMenu;
			return null;
		}
		
		private var _contextMenu:ContextMenu;
		private var root:WeaveMenuItem;
		private var cmi_to_wmi:Dictionary = new Dictionary(); // ContextMenuItem -> WeaveMenuItem
		
		public function WeaveContextMenu(root:WeaveMenuItem)
		{
			this.root = root;
			_contextMenu = new ContextMenu();
			_contextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, handleMenuSelect);
			_contextMenu.hideBuiltInItems();
		}
		
		/**
		 * The ContextMenu generated by this object.
		 */
		public function get contextMenu():ContextMenu
		{
			return _contextMenu;
		}
		
		private function handleMenuSelect(e:*):void
		{
			root.runClickFunction();
			
			var cmi_index:int = -1;
			var separatorBefore:Boolean = false;
			for each (var wmi:WeaveMenuItem in root.children)
			{
				if (wmi.type == WeaveMenuItem.TYPE_SEPARATOR)
				{
					separatorBefore = true;
					continue;
				}
				
				var cmi:ContextMenuItem = getCustomItem(++cmi_index);
				cmi_to_wmi[cmi] = wmi;
				cmi.caption = wmi.label;
				cmi.visible = wmi.shown;
				cmi.enabled = wmi.enabled;
				cmi.separatorBefore = separatorBefore;
				separatorBefore = false;
			}
			
			// hide remaining items
			while (++cmi_index < _contextMenu.customItems.length)
				getCustomItem(cmi_index).visible = false;
		}
		
		private function getCustomItem(index:int):ContextMenuItem
		{
			while (_contextMenu.customItems.length <= index)
			{
				var items:Array = _contextMenu.customItems;
				var cmi:ContextMenuItem = new ContextMenuItem('');
				cmi.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, handleMenuItemSelect);
				items.push(cmi);
				_contextMenu.customItems = items;
			}
			return _contextMenu.customItems[index] as ContextMenuItem;
		}
		
		private function handleMenuItemSelect(event:ContextMenuEvent):void
		{
			(cmi_to_wmi[event.target] as WeaveMenuItem).runClickFunction();
		}
	}
}
